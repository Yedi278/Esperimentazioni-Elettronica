
Hall_Effect_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005708  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080059e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000104  24000010  080059f8  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000114  080059f8  00007114  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014622  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022e3  00000000  00000000  0001b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe8  00000000  00000000  0001d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c76  00000000  00000000  0001e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036949  00000000  00000000  0001f5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000148b6  00000000  00000000  00055eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161a8f  00000000  00000000  0006a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc234  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004378  00000000  00000000  001cc278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001d05f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005988 	.word	0x08005988

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005988 	.word	0x08005988

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <USART3_custom_interrupt>:
    USART3->CR1 &= ~USART_CR1_RXNEIE;

    USART3->CR1 |= USART_CR1_UE;
}

void USART3_custom_interrupt(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	switch(usart_hall_index){
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d02e      	beq.n	8000634 <USART3_custom_interrupt+0x6c>
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	dc42      	bgt.n	8000660 <USART3_custom_interrupt+0x98>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <USART3_custom_interrupt+0x1c>
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d014      	beq.n	800060c <USART3_custom_interrupt+0x44>
 80005e2:	e03d      	b.n	8000660 <USART3_custom_interrupt+0x98>

		case 0:
			while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80005e4:	bf00      	nop
 80005e6:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <USART3_custom_interrupt+0xac>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f9      	beq.n	80005e6 <USART3_custom_interrupt+0x1e>
			USART3->TDR = hall_0;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <USART3_custom_interrupt+0xb0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <USART3_custom_interrupt+0xac>)
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28
			++usart_hall_index;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 8000608:	701a      	strb	r2, [r3, #0]
			return;
 800060a:	e02d      	b.n	8000668 <USART3_custom_interrupt+0xa0>

		case 1:
			while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 800060c:	bf00      	nop
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <USART3_custom_interrupt+0xac>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <USART3_custom_interrupt+0x46>
			USART3->TDR = hall_1;
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <USART3_custom_interrupt+0xb4>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <USART3_custom_interrupt+0xac>)
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
			++usart_hall_index;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 8000630:	701a      	strb	r2, [r3, #0]
			return;
 8000632:	e019      	b.n	8000668 <USART3_custom_interrupt+0xa0>

		case 2:
			while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000634:	bf00      	nop
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <USART3_custom_interrupt+0xac>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <USART3_custom_interrupt+0x6e>
			USART3->TDR = hall_2;
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <USART3_custom_interrupt+0xb8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <USART3_custom_interrupt+0xac>)
 800064a:	629a      	str	r2, [r3, #40]	@ 0x28
			USART3->CR1 &= ~USART_CR1_TXEIE;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <USART3_custom_interrupt+0xac>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <USART3_custom_interrupt+0xac>)
 8000652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000656:	6013      	str	r3, [r2, #0]
			usart_hall_index=3;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 800065a:	2203      	movs	r2, #3
 800065c:	701a      	strb	r2, [r3, #0]
			return;
 800065e:	e003      	b.n	8000668 <USART3_custom_interrupt+0xa0>

		default:
			usart_hall_index=0;
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <USART3_custom_interrupt+0xa8>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
			return;
 8000666:	bf00      	nop
	}
}
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	2400002f 	.word	0x2400002f
 8000674:	40004800 	.word	0x40004800
 8000678:	2400002c 	.word	0x2400002c
 800067c:	2400002d 	.word	0x2400002d
 8000680:	2400002e 	.word	0x2400002e

08000684 <Hall_0_interr>:

void Hall_0_interr(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	++hall_0;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <Hall_0_interr+0x28>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	3301      	adds	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <Hall_0_interr+0x28>)
 8000694:	701a      	strb	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_TXEIE;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <Hall_0_interr+0x2c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <Hall_0_interr+0x2c>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6013      	str	r3, [r2, #0]
	USART3_custom_interrupt();
 80006a2:	f7ff ff91 	bl	80005c8 <USART3_custom_interrupt>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2400002c 	.word	0x2400002c
 80006b0:	40004800 	.word	0x40004800

080006b4 <Hall_1_interr>:


void Hall_1_interr(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	++hall_1;
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <Hall_1_interr+0x28>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <Hall_1_interr+0x28>)
 80006c4:	701a      	strb	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_TXEIE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <Hall_1_interr+0x2c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a05      	ldr	r2, [pc, #20]	@ (80006e0 <Hall_1_interr+0x2c>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d0:	6013      	str	r3, [r2, #0]
	USART3_custom_interrupt();
 80006d2:	f7ff ff79 	bl	80005c8 <USART3_custom_interrupt>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2400002d 	.word	0x2400002d
 80006e0:	40004800 	.word	0x40004800

080006e4 <Hall_2_interr>:


void Hall_2_interr(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	++hall_2;
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <Hall_2_interr+0x28>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <Hall_2_interr+0x28>)
 80006f4:	701a      	strb	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_TXEIE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <Hall_2_interr+0x2c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <Hall_2_interr+0x2c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000700:	6013      	str	r3, [r2, #0]
	USART3_custom_interrupt();
 8000702:	f7ff ff61 	bl	80005c8 <USART3_custom_interrupt>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2400002e 	.word	0x2400002e
 8000710:	40004800 	.word	0x40004800

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fc6e 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f808 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f938 	bl	8000994 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000724:	f000 f8b2 	bl	800088c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000728:	f000 f8e6 	bl	80008f8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <main+0x18>

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09e      	sub	sp, #120	@ 0x78
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800073a:	224c      	movs	r2, #76	@ 0x4c
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f005 f8f6 	bl	8005930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2220      	movs	r2, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 f8ef 	bl	8005930 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000752:	2002      	movs	r0, #2
 8000754:	f001 f838 	bl	80017c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b48      	ldr	r3, [pc, #288]	@ (8000880 <SystemClock_Config+0x150>)
 800075e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000760:	4a47      	ldr	r2, [pc, #284]	@ (8000880 <SystemClock_Config+0x150>)
 8000762:	f023 0301 	bic.w	r3, r3, #1
 8000766:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000768:	4b45      	ldr	r3, [pc, #276]	@ (8000880 <SystemClock_Config+0x150>)
 800076a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <SystemClock_Config+0x154>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a43      	ldr	r2, [pc, #268]	@ (8000884 <SystemClock_Config+0x154>)
 8000778:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b41      	ldr	r3, [pc, #260]	@ (8000884 <SystemClock_Config+0x154>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078a:	bf00      	nop
 800078c:	4b3d      	ldr	r3, [pc, #244]	@ (8000884 <SystemClock_Config+0x154>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000798:	d1f8      	bne.n	800078c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b3b      	ldr	r3, [pc, #236]	@ (8000888 <SystemClock_Config+0x158>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007a0:	4a39      	ldr	r2, [pc, #228]	@ (8000888 <SystemClock_Config+0x158>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007aa:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <SystemClock_Config+0x158>)
 80007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b31      	ldr	r3, [pc, #196]	@ (8000884 <SystemClock_Config+0x154>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a30      	ldr	r2, [pc, #192]	@ (8000884 <SystemClock_Config+0x154>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <SystemClock_Config+0x154>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <SystemClock_Config+0x150>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000880 <SystemClock_Config+0x150>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <SystemClock_Config+0x150>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ea:	bf00      	nop
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <SystemClock_Config+0x154>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007f8:	d1f8      	bne.n	80007ec <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007fe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000808:	2302      	movs	r3, #2
 800080a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000810:	2378      	movs	r3, #120	@ 0x78
 8000812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000820:	230c      	movs	r3, #12
 8000822:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000824:	2300      	movs	r3, #0
 8000826:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000830:	4618      	mov	r0, r3
 8000832:	f001 f803 	bl	800183c <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800083c:	f000 fa10 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	233f      	movs	r3, #63	@ 0x3f
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2303      	movs	r3, #3
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800084c:	2308      	movs	r3, #8
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000850:	2340      	movs	r3, #64	@ 0x40
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000854:	2340      	movs	r3, #64	@ 0x40
 8000856:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800085e:	2340      	movs	r3, #64	@ 0x40
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2104      	movs	r1, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fc41 	bl	80020f0 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000874:	f000 f9f4 	bl	8000c60 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3778      	adds	r7, #120	@ 0x78
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58000400 	.word	0x58000400
 8000884:	58024800 	.word	0x58024800
 8000888:	58024400 	.word	0x58024400

0800088c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_TIM6_Init+0x64>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_TIM6_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_TIM6_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_TIM6_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_TIM6_Init+0x64>)
 80008b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_TIM6_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <MX_TIM6_Init+0x64>)
 80008be:	f003 fdcf 	bl	8004460 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008c8:	f000 f9ca 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_TIM6_Init+0x64>)
 80008da:	f003 febf 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f9bc 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	24000030 	.word	0x24000030
 80008f4:	40001000 	.word	0x40001000

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 80008fe:	4a23      	ldr	r2, [pc, #140]	@ (800098c <MX_USART3_UART_Init+0x94>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000904:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <MX_USART3_UART_Init+0x98>)
 8000906:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 800091c:	220c      	movs	r2, #12
 800091e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093e:	4812      	ldr	r0, [pc, #72]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000940:	f003 ff1a 	bl	8004778 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800094a:	f000 f989 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000952:	f004 ff22 	bl	800579a <HAL_UARTEx_SetTxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800095c:	f000 f980 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4809      	ldr	r0, [pc, #36]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000964:	f004 ff57 	bl	8005816 <HAL_UARTEx_SetRxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800096e:	f000 f977 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART3_UART_Init+0x90>)
 8000974:	f004 fed8 	bl	8005728 <HAL_UARTEx_DisableFifoMode>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800097e:	f000 f96f 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2400007c 	.word	0x2400007c
 800098c:	40004800 	.word	0x40004800
 8000990:	000f4240 	.word	0x000f4240

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	@ 0x38
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4ba5      	ldr	r3, [pc, #660]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4aa3      	ldr	r2, [pc, #652]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4ba1      	ldr	r3, [pc, #644]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c8:	4b9d      	ldr	r3, [pc, #628]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a9c      	ldr	r2, [pc, #624]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b99      	ldr	r3, [pc, #612]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	4b96      	ldr	r3, [pc, #600]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a94      	ldr	r2, [pc, #592]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b92      	ldr	r3, [pc, #584]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b8e      	ldr	r3, [pc, #568]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	4a8d      	ldr	r2, [pc, #564]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a14:	4b8a      	ldr	r3, [pc, #552]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b87      	ldr	r3, [pc, #540]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a85      	ldr	r2, [pc, #532]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b83      	ldr	r3, [pc, #524]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a40:	4b7f      	ldr	r3, [pc, #508]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	4a7e      	ldr	r2, [pc, #504]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a50:	4b7b      	ldr	r3, [pc, #492]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	4b78      	ldr	r3, [pc, #480]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a76      	ldr	r2, [pc, #472]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b74      	ldr	r3, [pc, #464]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7c:	4b70      	ldr	r3, [pc, #448]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	4a6f      	ldr	r2, [pc, #444]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8000c40 <MX_GPIO_Init+0x2ac>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000aa0:	4868      	ldr	r0, [pc, #416]	@ (8000c44 <MX_GPIO_Init+0x2b0>)
 8000aa2:	f000 fe53 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aac:	4866      	ldr	r0, [pc, #408]	@ (8000c48 <MX_GPIO_Init+0x2b4>)
 8000aae:	f000 fe4d 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4865      	ldr	r0, [pc, #404]	@ (8000c4c <MX_GPIO_Init+0x2b8>)
 8000ab8:	f000 fe48 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	485f      	ldr	r0, [pc, #380]	@ (8000c50 <MX_GPIO_Init+0x2bc>)
 8000ad2:	f000 fc8b 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ada:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	485a      	ldr	r0, [pc, #360]	@ (8000c54 <MX_GPIO_Init+0x2c0>)
 8000aec:	f000 fc7e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000af0:	2386      	movs	r3, #134	@ 0x86
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b00:	230b      	movs	r3, #11
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4853      	ldr	r0, [pc, #332]	@ (8000c58 <MX_GPIO_Init+0x2c4>)
 8000b0c:	f000 fc6e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b10:	2330      	movs	r3, #48	@ 0x30
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b20:	230b      	movs	r3, #11
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4849      	ldr	r0, [pc, #292]	@ (8000c50 <MX_GPIO_Init+0x2bc>)
 8000b2c:	f000 fc5e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b30:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	483e      	ldr	r0, [pc, #248]	@ (8000c44 <MX_GPIO_Init+0x2b0>)
 8000b4a:	f000 fc4f 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b60:	230b      	movs	r3, #11
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4836      	ldr	r0, [pc, #216]	@ (8000c44 <MX_GPIO_Init+0x2b0>)
 8000b6c:	f000 fc3e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <MX_GPIO_Init+0x2b4>)
 8000b8a:	f000 fc2f 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482e      	ldr	r0, [pc, #184]	@ (8000c5c <MX_GPIO_Init+0x2c8>)
 8000ba4:	f000 fc22 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ba8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4824      	ldr	r0, [pc, #144]	@ (8000c58 <MX_GPIO_Init+0x2c4>)
 8000bc6:	f000 fc11 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	481d      	ldr	r0, [pc, #116]	@ (8000c5c <MX_GPIO_Init+0x2c8>)
 8000be8:	f000 fc00 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bec:	2302      	movs	r3, #2
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <MX_GPIO_Init+0x2b8>)
 8000c04:	f000 fbf2 	bl	80013ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f000 fbb8 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f000 fbcf 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2007      	movs	r0, #7
 8000c1e:	f000 fbb0 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fbc7 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2008      	movs	r0, #8
 8000c2e:	f000 fba8 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c32:	2008      	movs	r0, #8
 8000c34:	f000 fbbf 	bl	80013b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	@ 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020400 	.word	0x58020400
 8000c48:	58020c00 	.word	0x58020c00
 8000c4c:	58021000 	.word	0x58021000
 8000c50:	58020800 	.word	0x58020800
 8000c54:	58021400 	.word	0x58021400
 8000c58:	58020000 	.word	0x58020000
 8000c5c:	58021800 	.word	0x58021800

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_MspInit+0x5c>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c78:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <HAL_MspInit+0x5c>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_MspInit+0x5c>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000c90:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <HAL_MspInit+0x5c>)
 8000c92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c96:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc8 <HAL_MspInit+0x5c>)
 8000c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_MspInit+0x5c>)
 8000ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fa40 	bl	8001134 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000cb4:	f000 fa66 	bl	8001184 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 fa4f 	bl	800115c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <HAL_TIM_Base_MspInit+0x3c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10e      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <HAL_TIM_Base_MspInit+0x40>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce4:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <HAL_TIM_Base_MspInit+0x40>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <HAL_TIM_Base_MspInit+0x40>)
 8000cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40001000 	.word	0x40001000
 8000d0c:	58024400 	.word	0x58024400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ba      	sub	sp, #232	@ 0xe8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	22c0      	movs	r2, #192	@ 0xc0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fdfd 	bl	8005930 <memset>
  if(huart->Instance==USART3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000de8 <HAL_UART_MspInit+0xd8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d14e      	bne.n	8000dde <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d40:	f04f 0202 	mov.w	r2, #2
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fd56 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d62:	f7ff ff7d 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <HAL_UART_MspInit+0xdc>)
 8000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dec <HAL_UART_MspInit+0xdc>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <HAL_UART_MspInit+0xdc>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_UART_MspInit+0xdc>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a18      	ldr	r2, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0xdc>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0xdc>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <HAL_UART_MspInit+0xe0>)
 8000dca:	f000 fb0f 	bl	80013ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2027      	movs	r0, #39	@ 0x27
 8000dd4:	f000 fad5 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dd8:	2027      	movs	r0, #39	@ 0x27
 8000dda:	f000 faec 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	37e8      	adds	r7, #232	@ 0xe8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004800 	.word	0x40004800
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58020c00 	.word	0x58020c00

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f947 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Hall_0_interr();
 8000e56:	f7ff fc15 	bl	8000684 <Hall_0_interr>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 fc8f 	bl	800177e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	Hall_1_interr();
 8000e68:	f7ff fc24 	bl	80006b4 <Hall_1_interr>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f000 fc86 	bl	800177e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	Hall_2_interr();
 8000e7a:	f7ff fc33 	bl	80006e4 <Hall_2_interr>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e7e:	2004      	movs	r0, #4
 8000e80:	f000 fc7d 	bl	800177e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART3_custom_interrupt();
 8000e8c:	f7ff fb9c 	bl	80005c8 <USART3_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e98:	4b37      	ldr	r3, [pc, #220]	@ (8000f78 <SystemInit+0xe4>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9e:	4a36      	ldr	r2, [pc, #216]	@ (8000f78 <SystemInit+0xe4>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea8:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <SystemInit+0xe8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	d807      	bhi.n	8000ec4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb4:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <SystemInit+0xe8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 030f 	bic.w	r3, r3, #15
 8000ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f7c <SystemInit+0xe8>)
 8000ebe:	f043 0307 	orr.w	r3, r3, #7
 8000ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <SystemInit+0xec>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8000f80 <SystemInit+0xec>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <SystemInit+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <SystemInit+0xec>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4929      	ldr	r1, [pc, #164]	@ (8000f80 <SystemInit+0xec>)
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <SystemInit+0xf0>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <SystemInit+0xe8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eee:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <SystemInit+0xe8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 030f 	bic.w	r3, r3, #15
 8000ef6:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <SystemInit+0xe8>)
 8000ef8:	f043 0307 	orr.w	r3, r3, #7
 8000efc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <SystemInit+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <SystemInit+0xec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <SystemInit+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <SystemInit+0xec>)
 8000f12:	4a1d      	ldr	r2, [pc, #116]	@ (8000f88 <SystemInit+0xf4>)
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <SystemInit+0xec>)
 8000f18:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <SystemInit+0xf8>)
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <SystemInit+0xec>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <SystemInit+0xfc>)
 8000f20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <SystemInit+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <SystemInit+0xec>)
 8000f2a:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <SystemInit+0xfc>)
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <SystemInit+0xec>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <SystemInit+0xec>)
 8000f36:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <SystemInit+0xfc>)
 8000f38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <SystemInit+0xec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <SystemInit+0xec>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <SystemInit+0xec>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <SystemInit+0xec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <SystemInit+0x100>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <SystemInit+0x104>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f5e:	d202      	bcs.n	8000f66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <SystemInit+0x108>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <SystemInit+0x10c>)
 8000f68:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	52002000 	.word	0x52002000
 8000f80:	58024400 	.word	0x58024400
 8000f84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f88:	02020200 	.word	0x02020200
 8000f8c:	01ff0000 	.word	0x01ff0000
 8000f90:	01010280 	.word	0x01010280
 8000f94:	5c001000 	.word	0x5c001000
 8000f98:	ffff0000 	.word	0xffff0000
 8000f9c:	51008108 	.word	0x51008108
 8000fa0:	52004000 	.word	0x52004000

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff ff74 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f004 fcb5 	bl	8005940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fb9d 	bl	8000714 <main>
  bx  lr
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe8:	080059e8 	.word	0x080059e8
  ldr r2, =_sbss
 8000fec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ff0:	24000114 	.word	0x24000114

08000ff4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC3_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f9b4 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001004:	f001 fa2a 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <HAL_Init+0x6c>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_Init+0x6c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x70>)
 800103a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_Init+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f814 	bl	8001070 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e002      	b.n	8001058 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fe0b 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	080059a0 	.word	0x080059a0
 8001068:	24000004 	.word	0x24000004
 800106c:	24000000 	.word	0x24000000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e021      	b.n	80010c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_InitTick+0x64>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f999 	bl	80013d2 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f963 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x68>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000008 	.word	0x24000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	24000110 	.word	0x24000110

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	24000110 	.word	0x24000110

0800111c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetREVID+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1b      	lsrs	r3, r3, #16
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	5c001000 	.word	0x5c001000

08001134 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001144:	4904      	ldr	r1, [pc, #16]	@ (8001158 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	58003c00 	.word	0x58003c00

0800115c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 0202 	bic.w	r2, r3, #2
 800116c:	4904      	ldr	r1, [pc, #16]	@ (8001180 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	58003c00 	.word	0x58003c00

08001184 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001196:	f7ff ffb5 	bl	8001104 <HAL_GetTick>
 800119a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800119c:	e008      	b.n	80011b0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800119e:	f7ff ffb1 	bl	8001104 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b0a      	cmp	r3, #10
 80011aa:	d901      	bls.n	80011b0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e006      	b.n	80011be <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	58003c00 	.word	0x58003c00

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	05fa0000 	.word	0x05fa0000

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	@ (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff40 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa4 	bl	8001328 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013fa:	4b89      	ldr	r3, [pc, #548]	@ (8001620 <HAL_GPIO_Init+0x234>)
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013fe:	e194      	b.n	800172a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8186 	beq.w	8001724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x44>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d017      	beq.n	80014ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	69b9      	ldr	r1, [r7, #24]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80e0 	beq.w	8001724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_GPIO_Init+0x238>)
 8001566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800156a:	4a2e      	ldr	r2, [pc, #184]	@ (8001624 <HAL_GPIO_Init+0x238>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_GPIO_Init+0x238>)
 8001576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001582:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <HAL_GPIO_Init+0x23c>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a20      	ldr	r2, [pc, #128]	@ (800162c <HAL_GPIO_Init+0x240>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d052      	beq.n	8001654 <HAL_GPIO_Init+0x268>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <HAL_GPIO_Init+0x244>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d031      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <HAL_GPIO_Init+0x248>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02b      	beq.n	8001616 <HAL_GPIO_Init+0x22a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_GPIO_Init+0x24c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_GPIO_Init+0x250>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <HAL_GPIO_Init+0x254>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001644 <HAL_GPIO_Init+0x258>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_GPIO_Init+0x25c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x216>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_GPIO_Init+0x260>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x212>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_GPIO_Init+0x264>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x20e>
 80015f6:	2309      	movs	r3, #9
 80015f8:	e02d      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 80015fa:	230a      	movs	r3, #10
 80015fc:	e02b      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 80015fe:	2308      	movs	r3, #8
 8001600:	e029      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001602:	2307      	movs	r3, #7
 8001604:	e027      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001606:	2306      	movs	r3, #6
 8001608:	e025      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800160a:	2305      	movs	r3, #5
 800160c:	e023      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800160e:	2304      	movs	r3, #4
 8001610:	e021      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001612:	2303      	movs	r3, #3
 8001614:	e01f      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001616:	2302      	movs	r3, #2
 8001618:	e01d      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800161a:	2301      	movs	r3, #1
 800161c:	e01b      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800161e:	bf00      	nop
 8001620:	58000080 	.word	0x58000080
 8001624:	58024400 	.word	0x58024400
 8001628:	58000400 	.word	0x58000400
 800162c:	58020000 	.word	0x58020000
 8001630:	58020400 	.word	0x58020400
 8001634:	58020800 	.word	0x58020800
 8001638:	58020c00 	.word	0x58020c00
 800163c:	58021000 	.word	0x58021000
 8001640:	58021400 	.word	0x58021400
 8001644:	58021800 	.word	0x58021800
 8001648:	58021c00 	.word	0x58021c00
 800164c:	58022000 	.word	0x58022000
 8001650:	58022400 	.word	0x58022400
 8001654:	2300      	movs	r3, #0
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001666:	4938      	ldr	r1, [pc, #224]	@ (8001748 <HAL_GPIO_Init+0x35c>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f ae63 	bne.w	8001400 <HAL_GPIO_Init+0x14>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3724      	adds	r7, #36	@ 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f804 	bl	80017b2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_PWREx_ConfigSupply+0x70>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d00a      	beq.n	80017f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_PWREx_ConfigSupply+0x70>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e01f      	b.n	800182e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e01d      	b.n	800182e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_PWREx_ConfigSupply+0x70>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	490f      	ldr	r1, [pc, #60]	@ (8001838 <HAL_PWREx_ConfigSupply+0x70>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001802:	f7ff fc7f 	bl	8001104 <HAL_GetTick>
 8001806:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001808:	e009      	b.n	800181e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800180a:	f7ff fc7b 	bl	8001104 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001818:	d901      	bls.n	800181e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e007      	b.n	800182e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_PWREx_ConfigSupply+0x70>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800182a:	d1ee      	bne.n	800180a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	58024800 	.word	0x58024800

0800183c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	@ 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	f000 bc48 	b.w	80020e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8088 	beq.w	800196e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185e:	4b99      	ldr	r3, [pc, #612]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001868:	4b96      	ldr	r3, [pc, #600]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001870:	2b10      	cmp	r3, #16
 8001872:	d007      	beq.n	8001884 <HAL_RCC_OscConfig+0x48>
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001876:	2b18      	cmp	r3, #24
 8001878:	d111      	bne.n	800189e <HAL_RCC_OscConfig+0x62>
 800187a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d10c      	bne.n	800189e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	4b8f      	ldr	r3, [pc, #572]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d06d      	beq.n	800196c <HAL_RCC_OscConfig+0x130>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d169      	bne.n	800196c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f000 bc21 	b.w	80020e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x7a>
 80018a8:	4b86      	ldr	r3, [pc, #536]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a85      	ldr	r2, [pc, #532]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x9c>
 80018be:	4b81      	ldr	r3, [pc, #516]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a80      	ldr	r2, [pc, #512]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7d      	ldr	r2, [pc, #500]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xc0>
 80018e2:	4b78      	ldr	r3, [pc, #480]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b75      	ldr	r3, [pc, #468]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a74      	ldr	r2, [pc, #464]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd8>
 80018fc:	4b71      	ldr	r3, [pc, #452]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a70      	ldr	r2, [pc, #448]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6d      	ldr	r2, [pc, #436]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fbf2 	bl	8001104 <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fbee 	bl	8001104 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e3d4      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001936:	4b63      	ldr	r3, [pc, #396]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe8>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fbde 	bl	8001104 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fbda 	bl	8001104 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e3c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800195e:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x110>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80ca 	beq.w	8001b10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197c:	4b51      	ldr	r3, [pc, #324]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001984:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001986:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_OscConfig+0x166>
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2b18      	cmp	r3, #24
 8001996:	d156      	bne.n	8001a46 <HAL_RCC_OscConfig+0x20a>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d151      	bne.n	8001a46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a2:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x17e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e392      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ba:	4b42      	ldr	r3, [pc, #264]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0219 	bic.w	r2, r3, #25
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	493f      	ldr	r1, [pc, #252]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb9a 	bl	8001104 <HAL_GetTick>
 80019d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fb96 	bl	8001104 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e37c      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e6:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	f7ff fb93 	bl	800111c <HAL_GetREVID>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d817      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x1f4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b40      	cmp	r3, #64	@ 0x40
 8001a06:	d108      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1de>
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a10:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a18:	e07a      	b.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	031b      	lsls	r3, r3, #12
 8001a28:	4926      	ldr	r1, [pc, #152]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2e:	e06f      	b.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	4921      	ldr	r1, [pc, #132]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	e064      	b.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d047      	beq.n	8001ade <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0219 	bic.w	r2, r3, #25
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	491a      	ldr	r1, [pc, #104]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb50 	bl	8001104 <HAL_GetTick>
 8001a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff fb4c 	bl	8001104 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e332      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	f7ff fb49 	bl	800111c <HAL_GetREVID>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d819      	bhi.n	8001ac8 <HAL_RCC_OscConfig+0x28c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b40      	cmp	r3, #64	@ 0x40
 8001a9a:	d108      	bne.n	8001aae <HAL_RCC_OscConfig+0x272>
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001aa4:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aaa:	6053      	str	r3, [r2, #4]
 8001aac:	e030      	b.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	031b      	lsls	r3, r3, #12
 8001abc:	4901      	ldr	r1, [pc, #4]	@ (8001ac4 <HAL_RCC_OscConfig+0x288>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
 8001ac2:	e025      	b.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	4b9a      	ldr	r3, [pc, #616]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4997      	ldr	r1, [pc, #604]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e018      	b.n	8001b10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b95      	ldr	r3, [pc, #596]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a94      	ldr	r2, [pc, #592]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fb0b 	bl	8001104 <HAL_GetTick>
 8001aee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fb07 	bl	8001104 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e2ed      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b04:	4b8b      	ldr	r3, [pc, #556]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a9 	beq.w	8001c70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1e:	4b85      	ldr	r3, [pc, #532]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b28:	4b82      	ldr	r3, [pc, #520]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d007      	beq.n	8001b44 <HAL_RCC_OscConfig+0x308>
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b18      	cmp	r3, #24
 8001b38:	d13a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x374>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d135      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b44:	4b7b      	ldr	r3, [pc, #492]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_OscConfig+0x320>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b80      	cmp	r3, #128	@ 0x80
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e2c1      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b5c:	f7ff fade 	bl	800111c <HAL_GetREVID>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d817      	bhi.n	8001b9a <HAL_RCC_OscConfig+0x35e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d108      	bne.n	8001b84 <HAL_RCC_OscConfig+0x348>
 8001b72:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b82:	e075      	b.n	8001c70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b84:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	069b      	lsls	r3, r3, #26
 8001b92:	4968      	ldr	r1, [pc, #416]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b98:	e06a      	b.n	8001c70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b9a:	4b66      	ldr	r3, [pc, #408]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	061b      	lsls	r3, r3, #24
 8001ba8:	4962      	ldr	r1, [pc, #392]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bae:	e05f      	b.n	8001c70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d042      	beq.n	8001c3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa9e 	bl	8001104 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fa9a 	bl	8001104 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e280      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bde:	4b55      	ldr	r3, [pc, #340]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bea:	f7ff fa97 	bl	800111c <HAL_GetREVID>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d817      	bhi.n	8001c28 <HAL_RCC_OscConfig+0x3ec>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d108      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3d6>
 8001c00:	4b4c      	ldr	r3, [pc, #304]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c08:	4a4a      	ldr	r2, [pc, #296]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c0e:	6053      	str	r3, [r2, #4]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0x434>
 8001c12:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	069b      	lsls	r3, r3, #26
 8001c20:	4944      	ldr	r1, [pc, #272]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	e023      	b.n	8001c70 <HAL_RCC_OscConfig+0x434>
 8001c28:	4b42      	ldr	r3, [pc, #264]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	493f      	ldr	r1, [pc, #252]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
 8001c3c:	e018      	b.n	8001c70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3c      	ldr	r2, [pc, #240]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa5b 	bl	8001104 <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c52:	f7ff fa57 	bl	8001104 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e23d      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c64:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d036      	beq.n	8001cea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d019      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c84:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c88:	4a2a      	ldr	r2, [pc, #168]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff fa38 	bl	8001104 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fa34 	bl	8001104 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e21a      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x45c>
 8001cb6:	e018      	b.n	8001cea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fa1e 	bl	8001104 <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fa1a 	bl	8001104 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e200      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d039      	beq.n	8001d6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f9fb 	bl	8001104 <HAL_GetTick>
 8001d0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d12:	f7ff f9f7 	bl	8001104 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1dd      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4d6>
 8001d30:	e01b      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
 8001d32:	bf00      	nop
 8001d34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d38:	4b9b      	ldr	r3, [pc, #620]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a9a      	ldr	r2, [pc, #616]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d44:	f7ff f9de 	bl	8001104 <HAL_GetTick>
 8001d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d4c:	f7ff f9da 	bl	8001104 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d5e:	4b92      	ldr	r3, [pc, #584]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8081 	beq.w	8001e7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d78:	4b8c      	ldr	r3, [pc, #560]	@ (8001fac <HAL_RCC_OscConfig+0x770>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a8b      	ldr	r2, [pc, #556]	@ (8001fac <HAL_RCC_OscConfig+0x770>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d84:	f7ff f9be 	bl	8001104 <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7ff f9ba 	bl	8001104 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1a0      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d9e:	4b83      	ldr	r3, [pc, #524]	@ (8001fac <HAL_RCC_OscConfig+0x770>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x584>
 8001db2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbe:	e02d      	b.n	8001e1c <HAL_RCC_OscConfig+0x5e0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x5a6>
 8001dc8:	4b77      	ldr	r3, [pc, #476]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dcc:	4a76      	ldr	r2, [pc, #472]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd4:	4b74      	ldr	r3, [pc, #464]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd8:	4a73      	ldr	r2, [pc, #460]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x5e0>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c8>
 8001dea:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df6:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0x5e0>
 8001e04:	4b68      	ldr	r3, [pc, #416]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e08:	4a67      	ldr	r2, [pc, #412]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e10:	4b65      	ldr	r3, [pc, #404]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e14:	4a64      	ldr	r2, [pc, #400]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d015      	beq.n	8001e50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff f96e 	bl	8001104 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f96a 	bl	8001104 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e14e      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e42:	4b59      	ldr	r3, [pc, #356]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ee      	beq.n	8001e2c <HAL_RCC_OscConfig+0x5f0>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f958 	bl	8001104 <HAL_GetTick>
 8001e54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff f954 	bl	8001104 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e138      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ee      	bne.n	8001e58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 812d 	beq.w	80020de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e84:	4b48      	ldr	r3, [pc, #288]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e8c:	2b18      	cmp	r3, #24
 8001e8e:	f000 80bd 	beq.w	800200c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 809e 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a41      	ldr	r2, [pc, #260]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f92c 	bl	8001104 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f928 	bl	8001104 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e10e      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec2:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ece:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ed2:	4b37      	ldr	r3, [pc, #220]	@ (8001fb0 <HAL_RCC_OscConfig+0x774>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	4931      	ldr	r1, [pc, #196]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	3b01      	subs	r3, #1
 8001eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f02:	3b01      	subs	r3, #1
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	3b01      	subs	r3, #1
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f18:	4923      	ldr	r1, [pc, #140]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f22:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f2e:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <HAL_RCC_OscConfig+0x778>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f36:	00d2      	lsls	r2, r2, #3
 8001f38:	491b      	ldr	r1, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	f023 020c 	bic.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4917      	ldr	r1, [pc, #92]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f023 0202 	bic.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5c:	4912      	ldr	r1, [pc, #72]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f8b1 	bl	8001104 <HAL_GetTick>
 8001fa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fa4:	e011      	b.n	8001fca <HAL_RCC_OscConfig+0x78e>
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	58024800 	.word	0x58024800
 8001fb0:	fffffc0c 	.word	0xfffffc0c
 8001fb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f8a4 	bl	8001104 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e08a      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x77c>
 8001fd6:	e082      	b.n	80020de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b43      	ldr	r3, [pc, #268]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a42      	ldr	r2, [pc, #264]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f88e 	bl	8001104 <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f88a 	bl	8001104 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e070      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x7b0>
 800200a:	e068      	b.n	80020de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800200c:	4b36      	ldr	r3, [pc, #216]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002012:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	2b01      	cmp	r3, #1
 800201e:	d031      	beq.n	8002084 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0203 	and.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d12a      	bne.n	8002084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d122      	bne.n	8002084 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d11a      	bne.n	8002084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0a5b      	lsrs	r3, r3, #9
 8002052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d111      	bne.n	8002084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0e1b      	lsrs	r3, r3, #24
 8002076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e02b      	b.n	80020e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 800208a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002092:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d01f      	beq.n	80020de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020aa:	f7ff f82b 	bl	8001104 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020b0:	bf00      	nop
 80020b2:	f7ff f827 	bl	8001104 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d0f9      	beq.n	80020b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_RCC_OscConfig+0x8b0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ca:	00d2      	lsls	r2, r2, #3
 80020cc:	4906      	ldr	r1, [pc, #24]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020d2:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_RCC_OscConfig+0x8ac>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3730      	adds	r7, #48	@ 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	58024400 	.word	0x58024400
 80020ec:	ffff0007 	.word	0xffff0007

080020f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e19c      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b8a      	ldr	r3, [pc, #552]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d910      	bls.n	8002134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b87      	ldr	r3, [pc, #540]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	4985      	ldr	r1, [pc, #532]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b83      	ldr	r3, [pc, #524]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e184      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	4b7b      	ldr	r3, [pc, #492]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800214c:	429a      	cmp	r2, r3
 800214e:	d908      	bls.n	8002162 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002150:	4b78      	ldr	r3, [pc, #480]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4975      	ldr	r1, [pc, #468]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 800215e:	4313      	orrs	r3, r2
 8002160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	4b70      	ldr	r3, [pc, #448]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800217a:	429a      	cmp	r2, r3
 800217c:	d908      	bls.n	8002190 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800217e:	4b6d      	ldr	r3, [pc, #436]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	496a      	ldr	r1, [pc, #424]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 800218c:	4313      	orrs	r3, r2
 800218e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	4b64      	ldr	r3, [pc, #400]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d908      	bls.n	80021be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021ac:	4b61      	ldr	r3, [pc, #388]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	495e      	ldr	r1, [pc, #376]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d010      	beq.n	80021ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021da:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4953      	ldr	r1, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	429a      	cmp	r2, r3
 8002206:	d908      	bls.n	800221a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f023 020f 	bic.w	r2, r3, #15
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4947      	ldr	r1, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002216:	4313      	orrs	r3, r2
 8002218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d055      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002226:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4940      	ldr	r1, [pc, #256]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d107      	bne.n	8002250 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002240:	4b3c      	ldr	r3, [pc, #240]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d121      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0f6      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002258:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d115      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0ea      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002270:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0de      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002280:	4b2c      	ldr	r3, [pc, #176]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d6      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002290:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f023 0207 	bic.w	r2, r3, #7
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4925      	ldr	r1, [pc, #148]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a2:	f7fe ff2f 	bl	8001104 <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe ff2b 	bl	8001104 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0be      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d1eb      	bne.n	80022aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d208      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f023 020f 	bic.w	r2, r3, #15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d214      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	4906      	ldr	r1, [pc, #24]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e086      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
 8002330:	52002000 	.word	0x52002000
 8002334:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d010      	beq.n	8002366 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002350:	429a      	cmp	r2, r3
 8002352:	d208      	bcs.n	8002366 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002354:	4b3c      	ldr	r3, [pc, #240]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4939      	ldr	r1, [pc, #228]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002362:	4313      	orrs	r3, r2
 8002364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800237e:	429a      	cmp	r2, r3
 8002380:	d208      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002382:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	492e      	ldr	r1, [pc, #184]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	4b28      	ldr	r3, [pc, #160]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d208      	bcs.n	80023c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023b0:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4922      	ldr	r1, [pc, #136]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d010      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023da:	429a      	cmp	r2, r3
 80023dc:	d208      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4917      	ldr	r1, [pc, #92]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f0:	f000 f834 	bl	800245c <HAL_RCC_GetSysClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4912      	ldr	r1, [pc, #72]	@ (800244c <HAL_RCC_ClockConfig+0x35c>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <HAL_RCC_ClockConfig+0x35c>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <HAL_RCC_ClockConfig+0x360>)
 8002426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002428:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x364>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_RCC_ClockConfig+0x368>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fe1c 	bl	8001070 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	58024400 	.word	0x58024400
 800244c:	080059a0 	.word	0x080059a0
 8002450:	24000004 	.word	0x24000004
 8002454:	24000000 	.word	0x24000000
 8002458:	24000008 	.word	0x24000008

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	@ 0x24
 8002460:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002462:	4bb3      	ldr	r3, [pc, #716]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800246a:	2b18      	cmp	r3, #24
 800246c:	f200 8155 	bhi.w	800271a <HAL_RCC_GetSysClockFreq+0x2be>
 8002470:	a201      	add	r2, pc, #4	@ (adr r2, 8002478 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	080024dd 	.word	0x080024dd
 800247c:	0800271b 	.word	0x0800271b
 8002480:	0800271b 	.word	0x0800271b
 8002484:	0800271b 	.word	0x0800271b
 8002488:	0800271b 	.word	0x0800271b
 800248c:	0800271b 	.word	0x0800271b
 8002490:	0800271b 	.word	0x0800271b
 8002494:	0800271b 	.word	0x0800271b
 8002498:	08002503 	.word	0x08002503
 800249c:	0800271b 	.word	0x0800271b
 80024a0:	0800271b 	.word	0x0800271b
 80024a4:	0800271b 	.word	0x0800271b
 80024a8:	0800271b 	.word	0x0800271b
 80024ac:	0800271b 	.word	0x0800271b
 80024b0:	0800271b 	.word	0x0800271b
 80024b4:	0800271b 	.word	0x0800271b
 80024b8:	08002509 	.word	0x08002509
 80024bc:	0800271b 	.word	0x0800271b
 80024c0:	0800271b 	.word	0x0800271b
 80024c4:	0800271b 	.word	0x0800271b
 80024c8:	0800271b 	.word	0x0800271b
 80024cc:	0800271b 	.word	0x0800271b
 80024d0:	0800271b 	.word	0x0800271b
 80024d4:	0800271b 	.word	0x0800271b
 80024d8:	0800250f 	.word	0x0800250f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024dc:	4b94      	ldr	r3, [pc, #592]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024e8:	4b91      	ldr	r3, [pc, #580]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	08db      	lsrs	r3, r3, #3
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	4a90      	ldr	r2, [pc, #576]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024fa:	e111      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024fe:	61bb      	str	r3, [r7, #24]
      break;
 8002500:	e10e      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002502:	4b8d      	ldr	r3, [pc, #564]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002504:	61bb      	str	r3, [r7, #24]
      break;
 8002506:	e10b      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002508:	4b8c      	ldr	r3, [pc, #560]	@ (800273c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800250a:	61bb      	str	r3, [r7, #24]
      break;
 800250c:	e108      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800250e:	4b88      	ldr	r3, [pc, #544]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002518:	4b85      	ldr	r3, [pc, #532]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002522:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002524:	4b82      	ldr	r3, [pc, #520]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800252e:	4b80      	ldr	r3, [pc, #512]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002532:	08db      	lsrs	r3, r3, #3
 8002534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002546:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80e1 	beq.w	8002714 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f000 8083 	beq.w	8002660 <HAL_RCC_GetSysClockFreq+0x204>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b02      	cmp	r3, #2
 800255e:	f200 80a1 	bhi.w	80026a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x114>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d056      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x1c0>
 800256e:	e099      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002570:	4b6f      	ldr	r3, [pc, #444]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02d      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800257c:	4b6c      	ldr	r3, [pc, #432]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	4a6b      	ldr	r2, [pc, #428]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a6:	4b62      	ldr	r3, [pc, #392]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025d6:	e087      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002744 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ea:	4b51      	ldr	r3, [pc, #324]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800261a:	e065      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800262a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800262e:	4b40      	ldr	r3, [pc, #256]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800263e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002642:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800265e:	e043      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800274c <HAL_RCC_GetSysClockFreq+0x2f0>
 800266e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002672:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002682:	ed97 6a02 	vldr	s12, [r7, #8]
 8002686:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800268a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800268e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026a2:	e021      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002748 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026e8:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	0a5b      	lsrs	r3, r3, #9
 80026ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026f2:	3301      	adds	r3, #1
 80026f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002700:	edd7 6a07 	vldr	s13, [r7, #28]
 8002704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800270c:	ee17 3a90 	vmov	r3, s15
 8002710:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002712:	e005      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
      break;
 8002718:	e002      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800271c:	61bb      	str	r3, [r7, #24]
      break;
 800271e:	bf00      	nop
  }

  return sysclockfreq;
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	@ 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	58024400 	.word	0x58024400
 8002734:	03d09000 	.word	0x03d09000
 8002738:	003d0900 	.word	0x003d0900
 800273c:	007a1200 	.word	0x007a1200
 8002740:	46000000 	.word	0x46000000
 8002744:	4c742400 	.word	0x4c742400
 8002748:	4a742400 	.word	0x4a742400
 800274c:	4af42400 	.word	0x4af42400

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002756:	f7ff fe81 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490f      	ldr	r1, [pc, #60]	@ (80027a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a07      	ldr	r2, [pc, #28]	@ (80027a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800278c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800278e:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	58024400 	.word	0x58024400
 80027a4:	080059a0 	.word	0x080059a0
 80027a8:	24000004 	.word	0x24000004
 80027ac:	24000000 	.word	0x24000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027b4:	f7ff ffcc 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4904      	ldr	r1, [pc, #16]	@ (80027d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58024400 	.word	0x58024400
 80027d8:	080059a0 	.word	0x080059a0

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027e0:	f7ff ffb6 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4904      	ldr	r1, [pc, #16]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	58024400 	.word	0x58024400
 8002804:	080059a0 	.word	0x080059a0

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280c:	b0ca      	sub	sp, #296	@ 0x128
 800280e:	af00      	add	r7, sp, #0
 8002810:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800282c:	2500      	movs	r5, #0
 800282e:	ea54 0305 	orrs.w	r3, r4, r5
 8002832:	d049      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800283a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800283e:	d02f      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002840:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002844:	d828      	bhi.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800284a:	d01a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800284c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002850:	d822      	bhi.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800285a:	d007      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800285c:	e01c      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800285e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	4ab7      	ldr	r2, [pc, #732]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800286a:	e01a      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800286c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002870:	3308      	adds	r3, #8
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fc8f 	bl	8004198 <RCCEx_PLL2_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002880:	e00f      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002886:	3328      	adds	r3, #40	@ 0x28
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fd36 	bl	80042fc <RCCEx_PLL3_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002896:	e004      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800289e:	e000      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028aa:	4ba5      	ldr	r3, [pc, #660]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b8:	4aa1      	ldr	r2, [pc, #644]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ba:	430b      	orrs	r3, r1
 80028bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80028be:	e003      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80028d4:	f04f 0900 	mov.w	r9, #0
 80028d8:	ea58 0309 	orrs.w	r3, r8, r9
 80028dc:	d047      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d82a      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002905 	.word	0x08002905
 80028f4:	08002913 	.word	0x08002913
 80028f8:	08002929 	.word	0x08002929
 80028fc:	08002947 	.word	0x08002947
 8002900:	08002947 	.word	0x08002947
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002904:	4b8e      	ldr	r3, [pc, #568]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	4a8d      	ldr	r2, [pc, #564]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002910:	e01a      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002916:	3308      	adds	r3, #8
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fc3c 	bl	8004198 <RCCEx_PLL2_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002926:	e00f      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292c:	3328      	adds	r3, #40	@ 0x28
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fce3 	bl	80042fc <RCCEx_PLL3_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800293c:	e004      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002944:	e000      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002950:	4b7b      	ldr	r3, [pc, #492]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002954:	f023 0107 	bic.w	r1, r3, #7
 8002958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	4a78      	ldr	r2, [pc, #480]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002960:	430b      	orrs	r3, r1
 8002962:	6513      	str	r3, [r2, #80]	@ 0x50
 8002964:	e003      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800296a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800296e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800297a:	f04f 0b00 	mov.w	fp, #0
 800297e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002982:	d04c      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800298e:	d030      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002994:	d829      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002996:	2bc0      	cmp	r3, #192	@ 0xc0
 8002998:	d02d      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800299a:	2bc0      	cmp	r3, #192	@ 0xc0
 800299c:	d825      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800299e:	2b80      	cmp	r3, #128	@ 0x80
 80029a0:	d018      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029a2:	2b80      	cmp	r3, #128	@ 0x80
 80029a4:	d821      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029aa:	2b40      	cmp	r3, #64	@ 0x40
 80029ac:	d007      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029ae:	e01c      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b0:	4b63      	ldr	r3, [pc, #396]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	4a62      	ldr	r2, [pc, #392]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029bc:	e01c      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c2:	3308      	adds	r3, #8
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 fbe6 	bl	8004198 <RCCEx_PLL2_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029d2:	e011      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d8:	3328      	adds	r3, #40	@ 0x28
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 fc8d 	bl	80042fc <RCCEx_PLL3_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029e8:	e006      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029f0:	e002      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a00:	4b4f      	ldr	r3, [pc, #316]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a14:	e003      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	d053      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a4a:	d035      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a50:	d82e      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a56:	d031      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a5c:	d828      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a62:	d01a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a68:	d822      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a72:	d007      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a76:	4b32      	ldr	r3, [pc, #200]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	4a31      	ldr	r2, [pc, #196]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a82:	e01c      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a88:	3308      	adds	r3, #8
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fb83 	bl	8004198 <RCCEx_PLL2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a98:	e011      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9e:	3328      	adds	r3, #40	@ 0x28
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fc2a 	bl	80042fc <RCCEx_PLL3_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aae:	e006      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ab6:	e002      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10b      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8002adc:	e003      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002af2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002afc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b00:	460b      	mov	r3, r1
 8002b02:	4313      	orrs	r3, r2
 8002b04:	d056      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b12:	d038      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b18:	d831      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b1e:	d034      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b24:	d82b      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b2a:	d01d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b30:	d825      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b3c:	e01f      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b44:	4ba2      	ldr	r3, [pc, #648]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	4aa1      	ldr	r2, [pc, #644]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b50:	e01c      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b56:	3308      	adds	r3, #8
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fb1c 	bl	8004198 <RCCEx_PLL2_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b66:	e011      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6c:	3328      	adds	r3, #40	@ 0x28
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 fbc3 	bl	80042fc <RCCEx_PLL3_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b94:	4b8e      	ldr	r3, [pc, #568]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ba4:	4a8a      	ldr	r2, [pc, #552]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002baa:	e003      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002bca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	d03a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	2b30      	cmp	r3, #48	@ 0x30
 8002bdc:	d01f      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bde:	2b30      	cmp	r3, #48	@ 0x30
 8002be0:	d819      	bhi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d00c      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d815      	bhi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d111      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf2:	4b77      	ldr	r3, [pc, #476]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	4a76      	ldr	r2, [pc, #472]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002bfe:	e011      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c04:	3308      	adds	r3, #8
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fac5 	bl	8004198 <RCCEx_PLL2_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c14:	e006      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c2c:	4b68      	ldr	r3, [pc, #416]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	4a65      	ldr	r2, [pc, #404]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c40:	e003      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4313      	orrs	r3, r2
 8002c68:	d051      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c74:	d035      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c7a:	d82e      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c80:	d031      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c86:	d828      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c92:	d822      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9c:	d007      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c9e:	e01c      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fa6e 	bl	8004198 <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cc2:	e011      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc8:	3328      	adds	r3, #40	@ 0x28
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fb15 	bl	80042fc <RCCEx_PLL3_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cf0:	4b37      	ldr	r3, [pc, #220]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfe:	4a34      	ldr	r2, [pc, #208]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	d056      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d033      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d3e:	d82c      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d44:	d02f      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d4a:	d826      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d50:	d02b      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d56:	d820      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d5c:	d012      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d62:	d81a      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d022      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6c:	d115      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d72:	3308      	adds	r3, #8
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fa0e 	bl	8004198 <RCCEx_PLL2_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d82:	e015      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	3328      	adds	r3, #40	@ 0x28
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fab5 	bl	80042fc <RCCEx_PLL3_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d98:	e00a      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002da0:	e006      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dc6:	4a02      	ldr	r2, [pc, #8]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002dce:	bf00      	nop
 8002dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002df2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	d055      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e08:	d033      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e0e:	d82c      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e14:	d02f      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1a:	d826      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e20:	d02b      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e26:	d820      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e2c:	d012      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e32:	d81a      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d022      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e3c:	d115      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e42:	3308      	adds	r3, #8
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f9a6 	bl	8004198 <RCCEx_PLL2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e52:	e015      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e58:	3328      	adds	r3, #40	@ 0x28
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 fa4d 	bl	80042fc <RCCEx_PLL3_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e68:	e00a      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e70:	e006      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e72:	bf00      	nop
 8002e74:	e004      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e76:	bf00      	nop
 8002e78:	e002      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e88:	4ba3      	ldr	r3, [pc, #652]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e98:	4a9f      	ldr	r2, [pc, #636]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9e:	e003      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	d037      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed8:	d816      	bhi.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d018      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ee2:	d111      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	4a8b      	ldr	r2, [pc, #556]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ef0:	e00f      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 f94c 	bl	8004198 <RCCEx_PLL2_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f06:	e004      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a7b      	ldr	r2, [pc, #492]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	d039      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d81c      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f62:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002fa5 	.word	0x08002fa5
 8002f6c:	08002f79 	.word	0x08002f79
 8002f70:	08002f87 	.word	0x08002f87
 8002f74:	08002fa5 	.word	0x08002fa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f78:	4b67      	ldr	r3, [pc, #412]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	4a66      	ldr	r2, [pc, #408]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f84:	e00f      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 f902 	bl	8004198 <RCCEx_PLL2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fae:	4b5a      	ldr	r3, [pc, #360]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	f023 0103 	bic.w	r1, r3, #3
 8002fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fbc:	4a56      	ldr	r2, [pc, #344]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fc2:	e003      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f000 809f 	beq.w	800312c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fee:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffa:	f7fe f883 	bl	8001104 <HAL_GetTick>
 8002ffe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003002:	e00b      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003004:	f7fe f87e 	bl	8001104 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b64      	cmp	r3, #100	@ 0x64
 8003012:	d903      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800301a:	e005      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301c:	4b3f      	ldr	r3, [pc, #252]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ed      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302c:	2b00      	cmp	r3, #0
 800302e:	d179      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003030:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800303c:	4053      	eors	r3, r2
 800303e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003042:	2b00      	cmp	r3, #0
 8003044:	d015      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003046:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800304e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003052:	4b31      	ldr	r3, [pc, #196]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a30      	ldr	r2, [pc, #192]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800305e:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a2d      	ldr	r2, [pc, #180]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800306a:	4a2b      	ldr	r2, [pc, #172]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003070:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800307a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800307e:	d118      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe f840 	bl	8001104 <HAL_GetTick>
 8003084:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003088:	e00d      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f83b 	bl	8001104 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	f241 3388 	movw	r3, #5000	@ 0x1388
 800309a:	429a      	cmp	r2, r3
 800309c:	d903      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80030a4:	e005      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0eb      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80030b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d129      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ca:	d10e      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80030cc:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030dc:	091a      	lsrs	r2, r3, #4
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6113      	str	r3, [r2, #16]
 80030e8:	e005      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030f4:	6113      	str	r3, [r2, #16]
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003106:	4a04      	ldr	r2, [pc, #16]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003108:	430b      	orrs	r3, r1
 800310a:	6713      	str	r3, [r2, #112]	@ 0x70
 800310c:	e00e      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003116:	e009      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003118:	58024400 	.word	0x58024400
 800311c:	58024800 	.word	0x58024800
 8003120:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800312c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f002 0301 	and.w	r3, r2, #1
 8003138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003142:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003146:	460b      	mov	r3, r1
 8003148:	4313      	orrs	r3, r2
 800314a:	f000 8089 	beq.w	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003154:	2b28      	cmp	r3, #40	@ 0x28
 8003156:	d86b      	bhi.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003239 	.word	0x08003239
 8003164:	08003231 	.word	0x08003231
 8003168:	08003231 	.word	0x08003231
 800316c:	08003231 	.word	0x08003231
 8003170:	08003231 	.word	0x08003231
 8003174:	08003231 	.word	0x08003231
 8003178:	08003231 	.word	0x08003231
 800317c:	08003231 	.word	0x08003231
 8003180:	08003205 	.word	0x08003205
 8003184:	08003231 	.word	0x08003231
 8003188:	08003231 	.word	0x08003231
 800318c:	08003231 	.word	0x08003231
 8003190:	08003231 	.word	0x08003231
 8003194:	08003231 	.word	0x08003231
 8003198:	08003231 	.word	0x08003231
 800319c:	08003231 	.word	0x08003231
 80031a0:	0800321b 	.word	0x0800321b
 80031a4:	08003231 	.word	0x08003231
 80031a8:	08003231 	.word	0x08003231
 80031ac:	08003231 	.word	0x08003231
 80031b0:	08003231 	.word	0x08003231
 80031b4:	08003231 	.word	0x08003231
 80031b8:	08003231 	.word	0x08003231
 80031bc:	08003231 	.word	0x08003231
 80031c0:	08003239 	.word	0x08003239
 80031c4:	08003231 	.word	0x08003231
 80031c8:	08003231 	.word	0x08003231
 80031cc:	08003231 	.word	0x08003231
 80031d0:	08003231 	.word	0x08003231
 80031d4:	08003231 	.word	0x08003231
 80031d8:	08003231 	.word	0x08003231
 80031dc:	08003231 	.word	0x08003231
 80031e0:	08003239 	.word	0x08003239
 80031e4:	08003231 	.word	0x08003231
 80031e8:	08003231 	.word	0x08003231
 80031ec:	08003231 	.word	0x08003231
 80031f0:	08003231 	.word	0x08003231
 80031f4:	08003231 	.word	0x08003231
 80031f8:	08003231 	.word	0x08003231
 80031fc:	08003231 	.word	0x08003231
 8003200:	08003239 	.word	0x08003239
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	3308      	adds	r3, #8
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f000 ffc3 	bl	8004198 <RCCEx_PLL2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003218:	e00f      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321e:	3328      	adds	r3, #40	@ 0x28
 8003220:	2101      	movs	r1, #1
 8003222:	4618      	mov	r0, r3
 8003224:	f001 f86a 	bl	80042fc <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800322e:	e004      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003242:	4bbf      	ldr	r3, [pc, #764]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003246:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003250:	4abb      	ldr	r2, [pc, #748]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003252:	430b      	orrs	r3, r1
 8003254:	6553      	str	r3, [r2, #84]	@ 0x54
 8003256:	e003      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800325c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f002 0302 	and.w	r3, r2, #2
 800326c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003276:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800327a:	460b      	mov	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	d041      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003286:	2b05      	cmp	r3, #5
 8003288:	d824      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800328a:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032dd 	.word	0x080032dd
 8003294:	080032a9 	.word	0x080032a9
 8003298:	080032bf 	.word	0x080032bf
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	080032dd 	.word	0x080032dd
 80032a4:	080032dd 	.word	0x080032dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ac:	3308      	adds	r3, #8
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 ff71 	bl	8004198 <RCCEx_PLL2_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032bc:	e00f      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c2:	3328      	adds	r3, #40	@ 0x28
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 f818 	bl	80042fc <RCCEx_PLL3_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032d2:	e004      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032da:	e000      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80032dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032e6:	4b96      	ldr	r3, [pc, #600]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	f023 0107 	bic.w	r1, r3, #7
 80032ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032f4:	4a92      	ldr	r2, [pc, #584]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f6:	430b      	orrs	r3, r1
 80032f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80032fa:	e003      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 0304 	and.w	r3, r2, #4
 8003310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800331a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800331e:	460b      	mov	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	d044      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332c:	2b05      	cmp	r3, #5
 800332e:	d825      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003385 	.word	0x08003385
 800333c:	08003351 	.word	0x08003351
 8003340:	08003367 	.word	0x08003367
 8003344:	08003385 	.word	0x08003385
 8003348:	08003385 	.word	0x08003385
 800334c:	08003385 	.word	0x08003385
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	3308      	adds	r3, #8
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f000 ff1d 	bl	8004198 <RCCEx_PLL2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003364:	e00f      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	3328      	adds	r3, #40	@ 0x28
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 ffc4 	bl	80042fc <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800338e:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	f023 0107 	bic.w	r1, r3, #7
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800339e:	4a68      	ldr	r2, [pc, #416]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a4:	e003      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f002 0320 	and.w	r3, r2, #32
 80033ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033c8:	460b      	mov	r3, r1
 80033ca:	4313      	orrs	r3, r2
 80033cc:	d055      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033da:	d033      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80033dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033e0:	d82c      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d826      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033f2:	d02b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80033f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033f8:	d820      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033fe:	d012      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003404:	d81a      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d022      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800340a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800340e:	d115      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	3308      	adds	r3, #8
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f000 febd 	bl	8004198 <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003424:	e015      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	3328      	adds	r3, #40	@ 0x28
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f000 ff64 	bl	80042fc <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800343a:	e00a      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003444:	bf00      	nop
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003448:	bf00      	nop
 800344a:	e002      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345a:	4b39      	ldr	r3, [pc, #228]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800345c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a35      	ldr	r2, [pc, #212]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003494:	460b      	mov	r3, r1
 8003496:	4313      	orrs	r3, r2
 8003498:	d058      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034a6:	d033      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80034a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034ac:	d82c      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b2:	d02f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b8:	d826      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034be:	d02b      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80034c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034c4:	d820      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ca:	d012      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80034cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034d0:	d81a      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d022      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034da:	d115      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	3308      	adds	r3, #8
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fe57 	bl	8004198 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034f0:	e015      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fefe 	bl	80042fc <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003506:	e00a      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350e:	e006      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003510:	bf00      	nop
 8003512:	e004      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003514:	bf00      	nop
 8003516:	e002      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800351c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003536:	4a02      	ldr	r2, [pc, #8]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003538:	430b      	orrs	r3, r1
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
 800353c:	e006      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003562:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d055      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003574:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003578:	d033      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800357a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800357e:	d82c      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003584:	d02f      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358a:	d826      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800358c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003590:	d02b      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003592:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003596:	d820      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800359c:	d012      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800359e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035a2:	d81a      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d022      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ac:	d115      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	3308      	adds	r3, #8
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fdee 	bl	8004198 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035c2:	e015      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c8:	3328      	adds	r3, #40	@ 0x28
 80035ca:	2102      	movs	r1, #2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fe95 	bl	80042fc <RCCEx_PLL3_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035d8:	e00a      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e0:	e006      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035e2:	bf00      	nop
 80035e4:	e004      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003608:	4a9d      	ldr	r2, [pc, #628]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800360a:	430b      	orrs	r3, r1
 800360c:	6593      	str	r3, [r2, #88]	@ 0x58
 800360e:	e003      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f002 0308 	and.w	r3, r2, #8
 8003624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800362e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003632:	460b      	mov	r3, r1
 8003634:	4313      	orrs	r3, r2
 8003636:	d01e      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003644:	d10c      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	3328      	adds	r3, #40	@ 0x28
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fe54 	bl	80042fc <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003660:	4b87      	ldr	r3, [pc, #540]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003664:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003670:	4a83      	ldr	r2, [pc, #524]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f002 0310 	and.w	r3, r2, #16
 8003682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800368c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d01e      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a2:	d10c      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	3328      	adds	r3, #40	@ 0x28
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fe25 	bl	80042fc <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036be:	4b70      	ldr	r3, [pc, #448]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80036e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d03e      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003700:	d022      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003706:	d81b      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003710:	d00b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003712:	e015      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	3308      	adds	r3, #8
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd3b 	bl	8004198 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003728:	e00f      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	3328      	adds	r3, #40	@ 0x28
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fde2 	bl	80042fc <RCCEx_PLL3_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800373e:	e004      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003752:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003762:	4a47      	ldr	r2, [pc, #284]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003764:	430b      	orrs	r3, r1
 8003766:	6593      	str	r3, [r2, #88]	@ 0x58
 8003768:	e003      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800377e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003780:	2300      	movs	r3, #0
 8003782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003784:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d03b      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800379a:	d01f      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800379c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037a0:	d818      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80037a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80037a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037ac:	d007      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037ae:	e011      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b0:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	4a32      	ldr	r2, [pc, #200]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037bc:	e00f      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	3328      	adds	r3, #40	@ 0x28
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fd98 	bl	80042fc <RCCEx_PLL3_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80037d2:	e004      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80037dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003812:	673b      	str	r3, [r7, #112]	@ 0x70
 8003814:	2300      	movs	r3, #0
 8003816:	677b      	str	r3, [r7, #116]	@ 0x74
 8003818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800381c:	460b      	mov	r3, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	d034      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003830:	d007      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a11      	ldr	r2, [pc, #68]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003840:	e00e      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fca4 	bl	8004198 <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003868:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	4a02      	ldr	r2, [pc, #8]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003878:	430b      	orrs	r3, r1
 800387a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800387c:	e006      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800387e:	bf00      	nop
 8003880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800389a:	2300      	movs	r3, #0
 800389c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800389e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d00c      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3328      	adds	r3, #40	@ 0x28
 80038ae:	2102      	movs	r1, #2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fd23 	bl	80042fc <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80038ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80038d0:	2300      	movs	r3, #0
 80038d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038d8:	460b      	mov	r3, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	d038      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ea:	d018      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80038ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038f0:	d811      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038f6:	d014      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038fc:	d80b      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003906:	d106      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003908:	4bc3      	ldr	r3, [pc, #780]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	4ac2      	ldr	r2, [pc, #776]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003914:	e008      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800391c:	e004      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003930:	4bb9      	ldr	r3, [pc, #740]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003940:	4ab5      	ldr	r2, [pc, #724]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6553      	str	r3, [r2, #84]	@ 0x54
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800395c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800395e:	2300      	movs	r3, #0
 8003960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003962:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800396c:	4baa      	ldr	r3, [pc, #680]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800396e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003970:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397a:	4aa7      	ldr	r2, [pc, #668]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397c:	430b      	orrs	r3, r1
 800397e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800398c:	653b      	str	r3, [r7, #80]	@ 0x50
 800398e:	2300      	movs	r3, #0
 8003990:	657b      	str	r3, [r7, #84]	@ 0x54
 8003992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800399c:	4b9e      	ldr	r3, [pc, #632]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039ac:	4a9a      	ldr	r2, [pc, #616]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c0:	2300      	movs	r3, #0
 80039c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ce:	4b92      	ldr	r3, [pc, #584]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80039ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f0:	2300      	movs	r3, #0
 80039f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039fe:	4b86      	ldr	r3, [pc, #536]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	4a85      	ldr	r2, [pc, #532]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a08:	6113      	str	r3, [r2, #16]
 8003a0a:	4b83      	ldr	r3, [pc, #524]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a16:	4a80      	ldr	r2, [pc, #512]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a38:	4b77      	ldr	r3, [pc, #476]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a46:	4a74      	ldr	r2, [pc, #464]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a68:	4b6b      	ldr	r3, [pc, #428]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a78:	4a67      	ldr	r2, [pc, #412]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	2100      	movs	r1, #0
 8003a88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003a94:	460b      	mov	r3, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	d011      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fb78 	bl	8004198 <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6239      	str	r1, [r7, #32]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	d011      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ade:	3308      	adds	r3, #8
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fb58 	bl	8004198 <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	2100      	movs	r1, #0
 8003b08:	61b9      	str	r1, [r7, #24]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b14:	460b      	mov	r3, r1
 8003b16:	4313      	orrs	r3, r2
 8003b18:	d011      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	3308      	adds	r3, #8
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb38 	bl	8004198 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	2100      	movs	r1, #0
 8003b48:	6139      	str	r1, [r7, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b54:	460b      	mov	r3, r1
 8003b56:	4313      	orrs	r3, r2
 8003b58:	d011      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	3328      	adds	r3, #40	@ 0x28
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fbca 	bl	80042fc <RCCEx_PLL3_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	2100      	movs	r1, #0
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b94:	460b      	mov	r3, r1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	d011      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	3328      	adds	r3, #40	@ 0x28
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fbaa 	bl	80042fc <RCCEx_PLL3_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d011      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	3328      	adds	r3, #40	@ 0x28
 8003be0:	2102      	movs	r1, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb8a 	bl	80042fc <RCCEx_PLL3_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003bfe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c12:	46bd      	mov	sp, r7
 8003c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c18:	58024400 	.word	0x58024400

08003c1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c20:	f7fe fd96 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4904      	ldr	r1, [pc, #16]	@ (8003c44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58024400 	.word	0x58024400
 8003c44:	080059a0 	.word	0x080059a0

08003c48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	@ 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c50:	4ba1      	ldr	r3, [pc, #644]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	0b1b      	lsrs	r3, r3, #12
 8003c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c66:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c72:	4b99      	ldr	r3, [pc, #612]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8111 	beq.w	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	f000 8083 	beq.w	8003da4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	f200 80a1 	bhi.w	8003de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d056      	beq.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003cb2:	e099      	b.n	8003de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb4:	4b88      	ldr	r3, [pc, #544]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d02d      	beq.n	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc0:	4b85      	ldr	r3, [pc, #532]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	08db      	lsrs	r3, r3, #3
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	4a84      	ldr	r2, [pc, #528]	@ (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cea:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d1a:	e087      	b.n	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5e:	e065      	b.n	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d72:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003da2:	e043      	b.n	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db6:	4b48      	ldr	r3, [pc, #288]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de6:	e021      	b.n	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfa:	4b37      	ldr	r3, [pc, #220]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	0a5b      	lsrs	r3, r3, #9
 8003e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e52:	ee17 2a90 	vmov	r2, s15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e80:	ee17 2a90 	vmov	r2, s15
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e88:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eae:	ee17 2a90 	vmov	r2, s15
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003eb6:	e008      	b.n	8003eca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
}
 8003eca:	bf00      	nop
 8003ecc:	3724      	adds	r7, #36	@ 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	03d09000 	.word	0x03d09000
 8003ee0:	46000000 	.word	0x46000000
 8003ee4:	4c742400 	.word	0x4c742400
 8003ee8:	4a742400 	.word	0x4a742400
 8003eec:	4af42400 	.word	0x4af42400

08003ef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	@ 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ef8:	4ba1      	ldr	r3, [pc, #644]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f02:	4b9f      	ldr	r3, [pc, #636]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	0d1b      	lsrs	r3, r3, #20
 8003f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f0e:	4b9c      	ldr	r3, [pc, #624]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f1a:	4b99      	ldr	r3, [pc, #612]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	08db      	lsrs	r3, r3, #3
 8003f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8111 	beq.w	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f000 8083 	beq.w	800404c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	f200 80a1 	bhi.w	8004090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d056      	beq.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f5a:	e099      	b.n	8004090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f5c:	4b88      	ldr	r3, [pc, #544]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02d      	beq.n	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f68:	4b85      	ldr	r3, [pc, #532]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	4a84      	ldr	r2, [pc, #528]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b7b      	ldr	r3, [pc, #492]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fc2:	e087      	b.n	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800418c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004006:	e065      	b.n	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b59      	ldr	r3, [pc, #356]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a03 	vldr	s12, [r7, #12]
 800402e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800404a:	e043      	b.n	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b48      	ldr	r3, [pc, #288]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004072:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800408e:	e021      	b.n	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b37      	ldr	r3, [pc, #220]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	0a5b      	lsrs	r3, r3, #9
 80040da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fa:	ee17 2a90 	vmov	r2, s15
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004102:	4b1f      	ldr	r3, [pc, #124]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800411c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004128:	ee17 2a90 	vmov	r2, s15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	0e1b      	lsrs	r3, r3, #24
 8004136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800414a:	edd7 6a07 	vldr	s13, [r7, #28]
 800414e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004156:	ee17 2a90 	vmov	r2, s15
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
}
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	@ 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	58024400 	.word	0x58024400
 8004184:	03d09000 	.word	0x03d09000
 8004188:	46000000 	.word	0x46000000
 800418c:	4c742400 	.word	0x4c742400
 8004190:	4a742400 	.word	0x4a742400
 8004194:	4af42400 	.word	0x4af42400

08004198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041a6:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d101      	bne.n	80041b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e099      	b.n	80042ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041b6:	4b4f      	ldr	r3, [pc, #316]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4e      	ldr	r2, [pc, #312]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c2:	f7fc ff9f 	bl	8001104 <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041c8:	e008      	b.n	80041dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041ca:	f7fc ff9b 	bl	8001104 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e086      	b.n	80042ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041dc:	4b45      	ldr	r3, [pc, #276]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041e8:	4b42      	ldr	r3, [pc, #264]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	031b      	lsls	r3, r3, #12
 80041f6:	493f      	ldr	r1, [pc, #252]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	3b01      	subs	r3, #1
 8004202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	025b      	lsls	r3, r3, #9
 800420e:	b29b      	uxth	r3, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	3b01      	subs	r3, #1
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800422c:	4931      	ldr	r1, [pc, #196]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004232:	4b30      	ldr	r3, [pc, #192]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	492d      	ldr	r1, [pc, #180]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004240:	4313      	orrs	r3, r2
 8004242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004244:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	f023 0220 	bic.w	r2, r3, #32
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	4928      	ldr	r1, [pc, #160]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004256:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004262:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004266:	4b24      	ldr	r3, [pc, #144]	@ (80042f8 <RCCEx_PLL2_Config+0x160>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	69d2      	ldr	r2, [r2, #28]
 800426e:	00d2      	lsls	r2, r2, #3
 8004270:	4920      	ldr	r1, [pc, #128]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004276:	4b1f      	ldr	r3, [pc, #124]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	4a1e      	ldr	r2, [pc, #120]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800427c:	f043 0310 	orr.w	r3, r3, #16
 8004280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	4a19      	ldr	r2, [pc, #100]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800428e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004294:	e00f      	b.n	80042b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800429c:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042a8:	e005      	b.n	80042b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042aa:	4b12      	ldr	r3, [pc, #72]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	4a11      	ldr	r2, [pc, #68]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042b6:	4b0f      	ldr	r3, [pc, #60]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a0e      	ldr	r2, [pc, #56]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c2:	f7fc ff1f 	bl	8001104 <HAL_GetTick>
 80042c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042c8:	e008      	b.n	80042dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042ca:	f7fc ff1b 	bl	8001104 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e006      	b.n	80042ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	ffff0007 	.word	0xffff0007

080042fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800430a:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d101      	bne.n	800431a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e099      	b.n	800444e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800431a:	4b4f      	ldr	r3, [pc, #316]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a4e      	ldr	r2, [pc, #312]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004326:	f7fc feed 	bl	8001104 <HAL_GetTick>
 800432a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800432c:	e008      	b.n	8004340 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800432e:	f7fc fee9 	bl	8001104 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e086      	b.n	800444e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004340:	4b45      	ldr	r3, [pc, #276]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800434c:	4b42      	ldr	r3, [pc, #264]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	051b      	lsls	r3, r3, #20
 800435a:	493f      	ldr	r1, [pc, #252]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	3b01      	subs	r3, #1
 8004366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	3b01      	subs	r3, #1
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	b29b      	uxth	r3, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	3b01      	subs	r3, #1
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004390:	4931      	ldr	r1, [pc, #196]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004396:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	492d      	ldr	r1, [pc, #180]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4928      	ldr	r1, [pc, #160]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ba:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043c6:	4b24      	ldr	r3, [pc, #144]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ca:	4b24      	ldr	r3, [pc, #144]	@ (800445c <RCCEx_PLL3_Config+0x160>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	69d2      	ldr	r2, [r2, #28]
 80043d2:	00d2      	lsls	r2, r2, #3
 80043d4:	4920      	ldr	r1, [pc, #128]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043da:	4b1f      	ldr	r3, [pc, #124]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4a19      	ldr	r2, [pc, #100]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043f8:	e00f      	b.n	800441a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d106      	bne.n	800440e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004400:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	4a14      	ldr	r2, [pc, #80]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800440a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800440c:	e005      	b.n	800441a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800440e:	4b12      	ldr	r3, [pc, #72]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	4a11      	ldr	r2, [pc, #68]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800441a:	4b0f      	ldr	r3, [pc, #60]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a0e      	ldr	r2, [pc, #56]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fc fe6d 	bl	8001104 <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800442c:	e008      	b.n	8004440 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800442e:	f7fc fe69 	bl	8001104 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	ffff0007 	.word	0xffff0007

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e049      	b.n	8004506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fc20 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 f836 	bl	8004510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a46      	ldr	r2, [pc, #280]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a43      	ldr	r2, [pc, #268]	@ (8004640 <TIM_Base_SetConfig+0x130>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <TIM_Base_SetConfig+0x134>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a41      	ldr	r2, [pc, #260]	@ (8004648 <TIM_Base_SetConfig+0x138>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a40      	ldr	r2, [pc, #256]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a35      	ldr	r2, [pc, #212]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01f      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004570:	d01b      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a32      	ldr	r2, [pc, #200]	@ (8004640 <TIM_Base_SetConfig+0x130>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d017      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a31      	ldr	r2, [pc, #196]	@ (8004644 <TIM_Base_SetConfig+0x134>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a30      	ldr	r2, [pc, #192]	@ (8004648 <TIM_Base_SetConfig+0x138>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00f      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2f      	ldr	r2, [pc, #188]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2e      	ldr	r2, [pc, #184]	@ (8004650 <TIM_Base_SetConfig+0x140>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2d      	ldr	r2, [pc, #180]	@ (8004654 <TIM_Base_SetConfig+0x144>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004658 <TIM_Base_SetConfig+0x148>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a16      	ldr	r2, [pc, #88]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00f      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <TIM_Base_SetConfig+0x140>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a16      	ldr	r2, [pc, #88]	@ (8004654 <TIM_Base_SetConfig+0x144>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a15      	ldr	r2, [pc, #84]	@ (8004658 <TIM_Base_SetConfig+0x148>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]
  }
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e06d      	b.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a30      	ldr	r2, [pc, #192]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a20      	ldr	r2, [pc, #128]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e6:	d01d      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a16      	ldr	r2, [pc, #88]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10c      	bne.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800472a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40010000 	.word	0x40010000
 8004760:	40010400 	.word	0x40010400
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40001800 	.word	0x40001800
 8004774:	40014000 	.word	0x40014000

08004778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e042      	b.n	8004810 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fab7 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2224      	movs	r2, #36	@ 0x24
 80047a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fd90 	bl	80052e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f825 	bl	8004818 <UART_SetConfig>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e01b      	b.n	8004810 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fe0f 	bl	800542c <UART_CheckIdleState>
 800480e:	4603      	mov	r3, r0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b092      	sub	sp, #72	@ 0x48
 800481e:	af00      	add	r7, sp, #0
 8004820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	431a      	orrs	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	431a      	orrs	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	4313      	orrs	r3, r2
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4bbe      	ldr	r3, [pc, #760]	@ (8004b40 <UART_SetConfig+0x328>)
 8004848:	4013      	ands	r3, r2
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004850:	430b      	orrs	r3, r1
 8004852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4ab3      	ldr	r2, [pc, #716]	@ (8004b44 <UART_SetConfig+0x32c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004880:	4313      	orrs	r3, r2
 8004882:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	4baf      	ldr	r3, [pc, #700]	@ (8004b48 <UART_SetConfig+0x330>)
 800488c:	4013      	ands	r3, r2
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004894:	430b      	orrs	r3, r1
 8004896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	f023 010f 	bic.w	r1, r3, #15
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4aa6      	ldr	r2, [pc, #664]	@ (8004b4c <UART_SetConfig+0x334>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d177      	bne.n	80049a8 <UART_SetConfig+0x190>
 80048b8:	4ba5      	ldr	r3, [pc, #660]	@ (8004b50 <UART_SetConfig+0x338>)
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048c0:	2b28      	cmp	r3, #40	@ 0x28
 80048c2:	d86d      	bhi.n	80049a0 <UART_SetConfig+0x188>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <UART_SetConfig+0xb4>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004971 	.word	0x08004971
 80048d0:	080049a1 	.word	0x080049a1
 80048d4:	080049a1 	.word	0x080049a1
 80048d8:	080049a1 	.word	0x080049a1
 80048dc:	080049a1 	.word	0x080049a1
 80048e0:	080049a1 	.word	0x080049a1
 80048e4:	080049a1 	.word	0x080049a1
 80048e8:	080049a1 	.word	0x080049a1
 80048ec:	08004979 	.word	0x08004979
 80048f0:	080049a1 	.word	0x080049a1
 80048f4:	080049a1 	.word	0x080049a1
 80048f8:	080049a1 	.word	0x080049a1
 80048fc:	080049a1 	.word	0x080049a1
 8004900:	080049a1 	.word	0x080049a1
 8004904:	080049a1 	.word	0x080049a1
 8004908:	080049a1 	.word	0x080049a1
 800490c:	08004981 	.word	0x08004981
 8004910:	080049a1 	.word	0x080049a1
 8004914:	080049a1 	.word	0x080049a1
 8004918:	080049a1 	.word	0x080049a1
 800491c:	080049a1 	.word	0x080049a1
 8004920:	080049a1 	.word	0x080049a1
 8004924:	080049a1 	.word	0x080049a1
 8004928:	080049a1 	.word	0x080049a1
 800492c:	08004989 	.word	0x08004989
 8004930:	080049a1 	.word	0x080049a1
 8004934:	080049a1 	.word	0x080049a1
 8004938:	080049a1 	.word	0x080049a1
 800493c:	080049a1 	.word	0x080049a1
 8004940:	080049a1 	.word	0x080049a1
 8004944:	080049a1 	.word	0x080049a1
 8004948:	080049a1 	.word	0x080049a1
 800494c:	08004991 	.word	0x08004991
 8004950:	080049a1 	.word	0x080049a1
 8004954:	080049a1 	.word	0x080049a1
 8004958:	080049a1 	.word	0x080049a1
 800495c:	080049a1 	.word	0x080049a1
 8004960:	080049a1 	.word	0x080049a1
 8004964:	080049a1 	.word	0x080049a1
 8004968:	080049a1 	.word	0x080049a1
 800496c:	08004999 	.word	0x08004999
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e222      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e21e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e21a      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e216      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004990:	2320      	movs	r3, #32
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e212      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004998:	2340      	movs	r3, #64	@ 0x40
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e20e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 80049a0:	2380      	movs	r3, #128	@ 0x80
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e20a      	b.n	8004dbe <UART_SetConfig+0x5a6>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a69      	ldr	r2, [pc, #420]	@ (8004b54 <UART_SetConfig+0x33c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d130      	bne.n	8004a14 <UART_SetConfig+0x1fc>
 80049b2:	4b67      	ldr	r3, [pc, #412]	@ (8004b50 <UART_SetConfig+0x338>)
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d826      	bhi.n	8004a0c <UART_SetConfig+0x1f4>
 80049be:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <UART_SetConfig+0x1ac>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049dd 	.word	0x080049dd
 80049c8:	080049e5 	.word	0x080049e5
 80049cc:	080049ed 	.word	0x080049ed
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e1ec      	b.n	8004dbe <UART_SetConfig+0x5a6>
 80049e4:	2304      	movs	r3, #4
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e1e8      	b.n	8004dbe <UART_SetConfig+0x5a6>
 80049ec:	2308      	movs	r3, #8
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e1e4      	b.n	8004dbe <UART_SetConfig+0x5a6>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e1e0      	b.n	8004dbe <UART_SetConfig+0x5a6>
 80049fc:	2320      	movs	r3, #32
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e1dc      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a04:	2340      	movs	r3, #64	@ 0x40
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e1d8      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e1d4      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a4f      	ldr	r2, [pc, #316]	@ (8004b58 <UART_SetConfig+0x340>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d130      	bne.n	8004a80 <UART_SetConfig+0x268>
 8004a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004b50 <UART_SetConfig+0x338>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d826      	bhi.n	8004a78 <UART_SetConfig+0x260>
 8004a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0x218>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a49 	.word	0x08004a49
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	08004a59 	.word	0x08004a59
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4e:	e1b6      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a56:	e1b2      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5e:	e1ae      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a66:	e1aa      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a68:	2320      	movs	r3, #32
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6e:	e1a6      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a70:	2340      	movs	r3, #64	@ 0x40
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e1a2      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7e:	e19e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a35      	ldr	r2, [pc, #212]	@ (8004b5c <UART_SetConfig+0x344>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d130      	bne.n	8004aec <UART_SetConfig+0x2d4>
 8004a8a:	4b31      	ldr	r3, [pc, #196]	@ (8004b50 <UART_SetConfig+0x338>)
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	2b05      	cmp	r3, #5
 8004a94:	d826      	bhi.n	8004ae4 <UART_SetConfig+0x2cc>
 8004a96:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <UART_SetConfig+0x284>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004ab5 	.word	0x08004ab5
 8004aa0:	08004abd 	.word	0x08004abd
 8004aa4:	08004ac5 	.word	0x08004ac5
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004ad5 	.word	0x08004ad5
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e180      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004abc:	2304      	movs	r3, #4
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac2:	e17c      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aca:	e178      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004acc:	2310      	movs	r3, #16
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad2:	e174      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e170      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004adc:	2340      	movs	r3, #64	@ 0x40
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e16c      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aea:	e168      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <UART_SetConfig+0x348>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d142      	bne.n	8004b7c <UART_SetConfig+0x364>
 8004af6:	4b16      	ldr	r3, [pc, #88]	@ (8004b50 <UART_SetConfig+0x338>)
 8004af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d838      	bhi.n	8004b74 <UART_SetConfig+0x35c>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <UART_SetConfig+0x2f0>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b21 	.word	0x08004b21
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	08004b31 	.word	0x08004b31
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b65 	.word	0x08004b65
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e14a      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e146      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b30:	2308      	movs	r3, #8
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b36:	e142      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3e:	e13e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b40:	cfff69f3 	.word	0xcfff69f3
 8004b44:	58000c00 	.word	0x58000c00
 8004b48:	11fff4ff 	.word	0x11fff4ff
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	58024400 	.word	0x58024400
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	2320      	movs	r3, #32
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e128      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b6c:	2340      	movs	r3, #64	@ 0x40
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e124      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b74:	2380      	movs	r3, #128	@ 0x80
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e120      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4acb      	ldr	r2, [pc, #812]	@ (8004eb0 <UART_SetConfig+0x698>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d176      	bne.n	8004c74 <UART_SetConfig+0x45c>
 8004b86:	4bcb      	ldr	r3, [pc, #812]	@ (8004eb4 <UART_SetConfig+0x69c>)
 8004b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b8e:	2b28      	cmp	r3, #40	@ 0x28
 8004b90:	d86c      	bhi.n	8004c6c <UART_SetConfig+0x454>
 8004b92:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <UART_SetConfig+0x380>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004c3d 	.word	0x08004c3d
 8004b9c:	08004c6d 	.word	0x08004c6d
 8004ba0:	08004c6d 	.word	0x08004c6d
 8004ba4:	08004c6d 	.word	0x08004c6d
 8004ba8:	08004c6d 	.word	0x08004c6d
 8004bac:	08004c6d 	.word	0x08004c6d
 8004bb0:	08004c6d 	.word	0x08004c6d
 8004bb4:	08004c6d 	.word	0x08004c6d
 8004bb8:	08004c45 	.word	0x08004c45
 8004bbc:	08004c6d 	.word	0x08004c6d
 8004bc0:	08004c6d 	.word	0x08004c6d
 8004bc4:	08004c6d 	.word	0x08004c6d
 8004bc8:	08004c6d 	.word	0x08004c6d
 8004bcc:	08004c6d 	.word	0x08004c6d
 8004bd0:	08004c6d 	.word	0x08004c6d
 8004bd4:	08004c6d 	.word	0x08004c6d
 8004bd8:	08004c4d 	.word	0x08004c4d
 8004bdc:	08004c6d 	.word	0x08004c6d
 8004be0:	08004c6d 	.word	0x08004c6d
 8004be4:	08004c6d 	.word	0x08004c6d
 8004be8:	08004c6d 	.word	0x08004c6d
 8004bec:	08004c6d 	.word	0x08004c6d
 8004bf0:	08004c6d 	.word	0x08004c6d
 8004bf4:	08004c6d 	.word	0x08004c6d
 8004bf8:	08004c55 	.word	0x08004c55
 8004bfc:	08004c6d 	.word	0x08004c6d
 8004c00:	08004c6d 	.word	0x08004c6d
 8004c04:	08004c6d 	.word	0x08004c6d
 8004c08:	08004c6d 	.word	0x08004c6d
 8004c0c:	08004c6d 	.word	0x08004c6d
 8004c10:	08004c6d 	.word	0x08004c6d
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c5d 	.word	0x08004c5d
 8004c1c:	08004c6d 	.word	0x08004c6d
 8004c20:	08004c6d 	.word	0x08004c6d
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c6d 	.word	0x08004c6d
 8004c2c:	08004c6d 	.word	0x08004c6d
 8004c30:	08004c6d 	.word	0x08004c6d
 8004c34:	08004c6d 	.word	0x08004c6d
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e0bc      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e0b8      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e0b4      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e0b0      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e0ac      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c64:	2340      	movs	r3, #64	@ 0x40
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e0a8      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e0a4      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a8f      	ldr	r2, [pc, #572]	@ (8004eb8 <UART_SetConfig+0x6a0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d130      	bne.n	8004ce0 <UART_SetConfig+0x4c8>
 8004c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004eb4 <UART_SetConfig+0x69c>)
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d826      	bhi.n	8004cd8 <UART_SetConfig+0x4c0>
 8004c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <UART_SetConfig+0x478>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ca9 	.word	0x08004ca9
 8004c94:	08004cb1 	.word	0x08004cb1
 8004c98:	08004cb9 	.word	0x08004cb9
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e086      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e082      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e07e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e07a      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004cc8:	2320      	movs	r3, #32
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e076      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004cd0:	2340      	movs	r3, #64	@ 0x40
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e072      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004cd8:	2380      	movs	r3, #128	@ 0x80
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e06e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a75      	ldr	r2, [pc, #468]	@ (8004ebc <UART_SetConfig+0x6a4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d130      	bne.n	8004d4c <UART_SetConfig+0x534>
 8004cea:	4b72      	ldr	r3, [pc, #456]	@ (8004eb4 <UART_SetConfig+0x69c>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d826      	bhi.n	8004d44 <UART_SetConfig+0x52c>
 8004cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <UART_SetConfig+0x4e4>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d15 	.word	0x08004d15
 8004d00:	08004d1d 	.word	0x08004d1d
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e050      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e04c      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e048      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e044      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d34:	2320      	movs	r3, #32
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e040      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d3c:	2340      	movs	r3, #64	@ 0x40
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e03c      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e038      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5b      	ldr	r2, [pc, #364]	@ (8004ec0 <UART_SetConfig+0x6a8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d130      	bne.n	8004db8 <UART_SetConfig+0x5a0>
 8004d56:	4b57      	ldr	r3, [pc, #348]	@ (8004eb4 <UART_SetConfig+0x69c>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d826      	bhi.n	8004db0 <UART_SetConfig+0x598>
 8004d62:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <UART_SetConfig+0x550>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d81 	.word	0x08004d81
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	08004d91 	.word	0x08004d91
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	2302      	movs	r3, #2
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e01a      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e016      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d90:	2308      	movs	r3, #8
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d96:	e012      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e00e      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004da0:	2320      	movs	r3, #32
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e00a      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004da8:	2340      	movs	r3, #64	@ 0x40
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e006      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db6:	e002      	b.n	8004dbe <UART_SetConfig+0x5a6>
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec0 <UART_SetConfig+0x6a8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f040 80f8 	bne.w	8004fba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	dc46      	bgt.n	8004e60 <UART_SetConfig+0x648>
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	f2c0 8082 	blt.w	8004edc <UART_SetConfig+0x6c4>
 8004dd8:	3b02      	subs	r3, #2
 8004dda:	2b1e      	cmp	r3, #30
 8004ddc:	d87e      	bhi.n	8004edc <UART_SetConfig+0x6c4>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <UART_SetConfig+0x5cc>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e67 	.word	0x08004e67
 8004de8:	08004edd 	.word	0x08004edd
 8004dec:	08004e6f 	.word	0x08004e6f
 8004df0:	08004edd 	.word	0x08004edd
 8004df4:	08004edd 	.word	0x08004edd
 8004df8:	08004edd 	.word	0x08004edd
 8004dfc:	08004e7f 	.word	0x08004e7f
 8004e00:	08004edd 	.word	0x08004edd
 8004e04:	08004edd 	.word	0x08004edd
 8004e08:	08004edd 	.word	0x08004edd
 8004e0c:	08004edd 	.word	0x08004edd
 8004e10:	08004edd 	.word	0x08004edd
 8004e14:	08004edd 	.word	0x08004edd
 8004e18:	08004edd 	.word	0x08004edd
 8004e1c:	08004e8f 	.word	0x08004e8f
 8004e20:	08004edd 	.word	0x08004edd
 8004e24:	08004edd 	.word	0x08004edd
 8004e28:	08004edd 	.word	0x08004edd
 8004e2c:	08004edd 	.word	0x08004edd
 8004e30:	08004edd 	.word	0x08004edd
 8004e34:	08004edd 	.word	0x08004edd
 8004e38:	08004edd 	.word	0x08004edd
 8004e3c:	08004edd 	.word	0x08004edd
 8004e40:	08004edd 	.word	0x08004edd
 8004e44:	08004edd 	.word	0x08004edd
 8004e48:	08004edd 	.word	0x08004edd
 8004e4c:	08004edd 	.word	0x08004edd
 8004e50:	08004edd 	.word	0x08004edd
 8004e54:	08004edd 	.word	0x08004edd
 8004e58:	08004edd 	.word	0x08004edd
 8004e5c:	08004ecf 	.word	0x08004ecf
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d037      	beq.n	8004ed4 <UART_SetConfig+0x6bc>
 8004e64:	e03a      	b.n	8004edc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e66:	f7fe fed9 	bl	8003c1c <HAL_RCCEx_GetD3PCLK1Freq>
 8004e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e6c:	e03c      	b.n	8004ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fee8 	bl	8003c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e7c:	e034      	b.n	8004ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e7e:	f107 0318 	add.w	r3, r7, #24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff f834 	bl	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e8c:	e02c      	b.n	8004ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e8e:	4b09      	ldr	r3, [pc, #36]	@ (8004eb4 <UART_SetConfig+0x69c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <UART_SetConfig+0x69c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	08db      	lsrs	r3, r3, #3
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	4a07      	ldr	r2, [pc, #28]	@ (8004ec4 <UART_SetConfig+0x6ac>)
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004eac:	e01c      	b.n	8004ee8 <UART_SetConfig+0x6d0>
 8004eae:	bf00      	nop
 8004eb0:	40011400 	.word	0x40011400
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	40007800 	.word	0x40007800
 8004ebc:	40007c00 	.word	0x40007c00
 8004ec0:	58000c00 	.word	0x58000c00
 8004ec4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004ec8:	4b9d      	ldr	r3, [pc, #628]	@ (8005140 <UART_SetConfig+0x928>)
 8004eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ecc:	e00c      	b.n	8004ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ece:	4b9d      	ldr	r3, [pc, #628]	@ (8005144 <UART_SetConfig+0x92c>)
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ed2:	e009      	b.n	8004ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eda:	e005      	b.n	8004ee8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004ee6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 81de 	beq.w	80052ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	4a94      	ldr	r2, [pc, #592]	@ (8005148 <UART_SetConfig+0x930>)
 8004ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f02:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d305      	bcc.n	8004f20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d903      	bls.n	8004f28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f26:	e1c1      	b.n	80052ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	60fa      	str	r2, [r7, #12]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	4a84      	ldr	r2, [pc, #528]	@ (8005148 <UART_SetConfig+0x930>)
 8004f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f4a:	f7fb f9c5 	bl	80002d8 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	020b      	lsls	r3, r1, #8
 8004f60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f64:	0202      	lsls	r2, r0, #8
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	6849      	ldr	r1, [r1, #4]
 8004f6a:	0849      	lsrs	r1, r1, #1
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4605      	mov	r5, r0
 8004f72:	eb12 0804 	adds.w	r8, r2, r4
 8004f76:	eb43 0905 	adc.w	r9, r3, r5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	469a      	mov	sl, r3
 8004f82:	4693      	mov	fp, r2
 8004f84:	4652      	mov	r2, sl
 8004f86:	465b      	mov	r3, fp
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb f9a4 	bl	80002d8 <__aeabi_uldivmod>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4613      	mov	r3, r2
 8004f96:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f9e:	d308      	bcc.n	8004fb2 <UART_SetConfig+0x79a>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa6:	d204      	bcs.n	8004fb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	e17c      	b.n	80052ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004fb8:	e178      	b.n	80052ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc2:	f040 80c5 	bne.w	8005150 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	dc48      	bgt.n	8005060 <UART_SetConfig+0x848>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db7b      	blt.n	80050ca <UART_SetConfig+0x8b2>
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d879      	bhi.n	80050ca <UART_SetConfig+0x8b2>
 8004fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <UART_SetConfig+0x7c4>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08005067 	.word	0x08005067
 8004fe0:	0800506f 	.word	0x0800506f
 8004fe4:	080050cb 	.word	0x080050cb
 8004fe8:	080050cb 	.word	0x080050cb
 8004fec:	08005077 	.word	0x08005077
 8004ff0:	080050cb 	.word	0x080050cb
 8004ff4:	080050cb 	.word	0x080050cb
 8004ff8:	080050cb 	.word	0x080050cb
 8004ffc:	08005087 	.word	0x08005087
 8005000:	080050cb 	.word	0x080050cb
 8005004:	080050cb 	.word	0x080050cb
 8005008:	080050cb 	.word	0x080050cb
 800500c:	080050cb 	.word	0x080050cb
 8005010:	080050cb 	.word	0x080050cb
 8005014:	080050cb 	.word	0x080050cb
 8005018:	080050cb 	.word	0x080050cb
 800501c:	08005097 	.word	0x08005097
 8005020:	080050cb 	.word	0x080050cb
 8005024:	080050cb 	.word	0x080050cb
 8005028:	080050cb 	.word	0x080050cb
 800502c:	080050cb 	.word	0x080050cb
 8005030:	080050cb 	.word	0x080050cb
 8005034:	080050cb 	.word	0x080050cb
 8005038:	080050cb 	.word	0x080050cb
 800503c:	080050cb 	.word	0x080050cb
 8005040:	080050cb 	.word	0x080050cb
 8005044:	080050cb 	.word	0x080050cb
 8005048:	080050cb 	.word	0x080050cb
 800504c:	080050cb 	.word	0x080050cb
 8005050:	080050cb 	.word	0x080050cb
 8005054:	080050cb 	.word	0x080050cb
 8005058:	080050cb 	.word	0x080050cb
 800505c:	080050bd 	.word	0x080050bd
 8005060:	2b40      	cmp	r3, #64	@ 0x40
 8005062:	d02e      	beq.n	80050c2 <UART_SetConfig+0x8aa>
 8005064:	e031      	b.n	80050ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005066:	f7fd fba3 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 800506a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800506c:	e033      	b.n	80050d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800506e:	f7fd fbb5 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8005072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005074:	e02f      	b.n	80050d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fde4 	bl	8003c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005084:	e027      	b.n	80050d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005086:	f107 0318 	add.w	r3, r7, #24
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe ff30 	bl	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005094:	e01f      	b.n	80050d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005096:	4b2d      	ldr	r3, [pc, #180]	@ (800514c <UART_SetConfig+0x934>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050a2:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <UART_SetConfig+0x934>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	08db      	lsrs	r3, r3, #3
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	4a24      	ldr	r2, [pc, #144]	@ (8005140 <UART_SetConfig+0x928>)
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050b4:	e00f      	b.n	80050d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050b6:	4b22      	ldr	r3, [pc, #136]	@ (8005140 <UART_SetConfig+0x928>)
 80050b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ba:	e00c      	b.n	80050d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050bc:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <UART_SetConfig+0x92c>)
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050c0:	e009      	b.n	80050d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050c8:	e005      	b.n	80050d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80e7 	beq.w	80052ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <UART_SetConfig+0x930>)
 80050e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050e8:	461a      	mov	r2, r3
 80050ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f0:	005a      	lsls	r2, r3, #1
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	441a      	add	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	2b0f      	cmp	r3, #15
 8005108:	d916      	bls.n	8005138 <UART_SetConfig+0x920>
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005110:	d212      	bcs.n	8005138 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	b29b      	uxth	r3, r3
 8005116:	f023 030f 	bic.w	r3, r3, #15
 800511a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	b29b      	uxth	r3, r3
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	b29a      	uxth	r2, r3
 8005128:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800512a:	4313      	orrs	r3, r2
 800512c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	e0b9      	b.n	80052ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800513e:	e0b5      	b.n	80052ac <UART_SetConfig+0xa94>
 8005140:	03d09000 	.word	0x03d09000
 8005144:	003d0900 	.word	0x003d0900
 8005148:	080059b0 	.word	0x080059b0
 800514c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005150:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005154:	2b20      	cmp	r3, #32
 8005156:	dc49      	bgt.n	80051ec <UART_SetConfig+0x9d4>
 8005158:	2b00      	cmp	r3, #0
 800515a:	db7c      	blt.n	8005256 <UART_SetConfig+0xa3e>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d87a      	bhi.n	8005256 <UART_SetConfig+0xa3e>
 8005160:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <UART_SetConfig+0x950>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	080051f3 	.word	0x080051f3
 800516c:	080051fb 	.word	0x080051fb
 8005170:	08005257 	.word	0x08005257
 8005174:	08005257 	.word	0x08005257
 8005178:	08005203 	.word	0x08005203
 800517c:	08005257 	.word	0x08005257
 8005180:	08005257 	.word	0x08005257
 8005184:	08005257 	.word	0x08005257
 8005188:	08005213 	.word	0x08005213
 800518c:	08005257 	.word	0x08005257
 8005190:	08005257 	.word	0x08005257
 8005194:	08005257 	.word	0x08005257
 8005198:	08005257 	.word	0x08005257
 800519c:	08005257 	.word	0x08005257
 80051a0:	08005257 	.word	0x08005257
 80051a4:	08005257 	.word	0x08005257
 80051a8:	08005223 	.word	0x08005223
 80051ac:	08005257 	.word	0x08005257
 80051b0:	08005257 	.word	0x08005257
 80051b4:	08005257 	.word	0x08005257
 80051b8:	08005257 	.word	0x08005257
 80051bc:	08005257 	.word	0x08005257
 80051c0:	08005257 	.word	0x08005257
 80051c4:	08005257 	.word	0x08005257
 80051c8:	08005257 	.word	0x08005257
 80051cc:	08005257 	.word	0x08005257
 80051d0:	08005257 	.word	0x08005257
 80051d4:	08005257 	.word	0x08005257
 80051d8:	08005257 	.word	0x08005257
 80051dc:	08005257 	.word	0x08005257
 80051e0:	08005257 	.word	0x08005257
 80051e4:	08005257 	.word	0x08005257
 80051e8:	08005249 	.word	0x08005249
 80051ec:	2b40      	cmp	r3, #64	@ 0x40
 80051ee:	d02e      	beq.n	800524e <UART_SetConfig+0xa36>
 80051f0:	e031      	b.n	8005256 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f2:	f7fd fadd 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 80051f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051f8:	e033      	b.n	8005262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fa:	f7fd faef 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 80051fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005200:	e02f      	b.n	8005262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fd1e 	bl	8003c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005210:	e027      	b.n	8005262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005212:	f107 0318 	add.w	r3, r7, #24
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe fe6a 	bl	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005220:	e01f      	b.n	8005262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005222:	4b2d      	ldr	r3, [pc, #180]	@ (80052d8 <UART_SetConfig+0xac0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800522e:	4b2a      	ldr	r3, [pc, #168]	@ (80052d8 <UART_SetConfig+0xac0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	08db      	lsrs	r3, r3, #3
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	4a28      	ldr	r2, [pc, #160]	@ (80052dc <UART_SetConfig+0xac4>)
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005240:	e00f      	b.n	8005262 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005242:	4b26      	ldr	r3, [pc, #152]	@ (80052dc <UART_SetConfig+0xac4>)
 8005244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005246:	e00c      	b.n	8005262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005248:	4b25      	ldr	r3, [pc, #148]	@ (80052e0 <UART_SetConfig+0xac8>)
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800524c:	e009      	b.n	8005262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005254:	e005      	b.n	8005262 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005260:	bf00      	nop
    }

    if (pclk != 0U)
 8005262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d021      	beq.n	80052ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	4a1d      	ldr	r2, [pc, #116]	@ (80052e4 <UART_SetConfig+0xacc>)
 800526e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005272:	461a      	mov	r2, r3
 8005274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005276:	fbb3 f2f2 	udiv	r2, r3, r2
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	441a      	add	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	fbb2 f3f3 	udiv	r3, r2, r3
 800528a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	2b0f      	cmp	r3, #15
 8005290:	d909      	bls.n	80052a6 <UART_SetConfig+0xa8e>
 8005292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005298:	d205      	bcs.n	80052a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	b29a      	uxth	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	e002      	b.n	80052ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2200      	movs	r2, #0
 80052c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2200      	movs	r2, #0
 80052c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3748      	adds	r7, #72	@ 0x48
 80052d0:	46bd      	mov	sp, r7
 80052d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	03d09000 	.word	0x03d09000
 80052e0:	003d0900 	.word	0x003d0900
 80052e4:	080059b0 	.word	0x080059b0

080052e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01a      	beq.n	80053fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053e6:	d10a      	bne.n	80053fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	605a      	str	r2, [r3, #4]
  }
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b098      	sub	sp, #96	@ 0x60
 8005430:	af02      	add	r7, sp, #8
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800543c:	f7fb fe62 	bl	8001104 <HAL_GetTick>
 8005440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d12f      	bne.n	80054b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f88e 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d022      	beq.n	80054b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005488:	647b      	str	r3, [r7, #68]	@ 0x44
 800548a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800548e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e063      	b.n	8005578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d149      	bne.n	8005552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c6:	2200      	movs	r2, #0
 80054c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f857 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d03c      	beq.n	8005552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	623b      	str	r3, [r7, #32]
   return(result);
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	60fb      	str	r3, [r7, #12]
   return(result);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800552a:	61fa      	str	r2, [r7, #28]
 800552c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	69b9      	ldr	r1, [r7, #24]
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	617b      	str	r3, [r7, #20]
   return(result);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e012      	b.n	8005578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3758      	adds	r7, #88	@ 0x58
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005590:	e04f      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d04b      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fb fdb3 	bl	8001104 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e04e      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d037      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b80      	cmp	r3, #128	@ 0x80
 80055c6:	d034      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d031      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d110      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2208      	movs	r2, #8
 80055e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f839 	bl	800565c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2208      	movs	r2, #8
 80055ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e029      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800560c:	d111      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f81f 	bl	800565c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e00f      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d0a0      	beq.n	8005592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b095      	sub	sp, #84	@ 0x54
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005682:	643b      	str	r3, [r7, #64]	@ 0x40
 8005684:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <UART_EndRxTransfer+0xc8>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d118      	bne.n	8005704 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6979      	ldr	r1, [r7, #20]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	613b      	str	r3, [r7, #16]
   return(result);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005718:	bf00      	nop
 800571a:	3754      	adds	r7, #84	@ 0x54
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	effffffe 	.word	0xeffffffe

08005728 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_UARTEx_DisableFifoMode+0x16>
 800573a:	2302      	movs	r3, #2
 800573c:	e027      	b.n	800578e <HAL_UARTEx_DisableFifoMode+0x66>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	@ 0x24
 800574a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800576c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e02d      	b.n	800580e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2224      	movs	r2, #36	@ 0x24
 80057be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f850 	bl	8005894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800582a:	2302      	movs	r3, #2
 800582c:	e02d      	b.n	800588a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2224      	movs	r2, #36	@ 0x24
 800583a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f812 	bl	8005894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d108      	bne.n	80058b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058b4:	e031      	b.n	800591a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058b6:	2310      	movs	r3, #16
 80058b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058ba:	2310      	movs	r3, #16
 80058bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	0e5b      	lsrs	r3, r3, #25
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	0f5b      	lsrs	r3, r3, #29
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	7b3a      	ldrb	r2, [r7, #12]
 80058e2:	4911      	ldr	r1, [pc, #68]	@ (8005928 <UARTEx_SetNbDataToProcess+0x94>)
 80058e4:	5c8a      	ldrb	r2, [r1, r2]
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ea:	7b3a      	ldrb	r2, [r7, #12]
 80058ec:	490f      	ldr	r1, [pc, #60]	@ (800592c <UARTEx_SetNbDataToProcess+0x98>)
 80058ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	7b7a      	ldrb	r2, [r7, #13]
 8005900:	4909      	ldr	r1, [pc, #36]	@ (8005928 <UARTEx_SetNbDataToProcess+0x94>)
 8005902:	5c8a      	ldrb	r2, [r1, r2]
 8005904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005908:	7b7a      	ldrb	r2, [r7, #13]
 800590a:	4908      	ldr	r1, [pc, #32]	@ (800592c <UARTEx_SetNbDataToProcess+0x98>)
 800590c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800590e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005912:	b29a      	uxth	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	080059c8 	.word	0x080059c8
 800592c:	080059d0 	.word	0x080059d0

08005930 <memset>:
 8005930:	4402      	add	r2, r0
 8005932:	4603      	mov	r3, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4d0d      	ldr	r5, [pc, #52]	@ (8005978 <__libc_init_array+0x38>)
 8005944:	4c0d      	ldr	r4, [pc, #52]	@ (800597c <__libc_init_array+0x3c>)
 8005946:	1b64      	subs	r4, r4, r5
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	2600      	movs	r6, #0
 800594c:	42a6      	cmp	r6, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	4d0b      	ldr	r5, [pc, #44]	@ (8005980 <__libc_init_array+0x40>)
 8005952:	4c0c      	ldr	r4, [pc, #48]	@ (8005984 <__libc_init_array+0x44>)
 8005954:	f000 f818 	bl	8005988 <_init>
 8005958:	1b64      	subs	r4, r4, r5
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	2600      	movs	r6, #0
 800595e:	42a6      	cmp	r6, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f855 3b04 	ldr.w	r3, [r5], #4
 8005968:	4798      	blx	r3
 800596a:	3601      	adds	r6, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005972:	4798      	blx	r3
 8005974:	3601      	adds	r6, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	080059e0 	.word	0x080059e0
 800597c:	080059e0 	.word	0x080059e0
 8005980:	080059e0 	.word	0x080059e0
 8005984:	080059e4 	.word	0x080059e4

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
