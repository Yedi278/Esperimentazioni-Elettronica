
DMA_hard_trig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000987c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009b14  08009b14  0000ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009b60  08009b60  0000ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009b64  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a68  24000010  08009b74  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a78  08009b74  0000ba78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a624  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f65  00000000  00000000  00025662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001488  00000000  00000000  000285c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001001  00000000  00000000  00029a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039b36  00000000  00000000  0002aa51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c7f3  00000000  00000000  00064587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017aaaa  00000000  00000000  00080d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fb824  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057a8  00000000  00000000  001fb868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00201010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009afc 	.word	0x08009afc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009afc 	.word	0x08009afc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
volatile bool triggd = 0;
volatile uint16_t trig_indx=0;
/* END OF GLOB VARIABLES */


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <ADC_custom_init+0xc8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <ADC_custom_init+0xc8>)
 80005d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000690 <ADC_custom_init+0xc8>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <ADC_custom_init+0xc8>)
 80005dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <ADC_custom_init+0xc8>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0; // Dichiaro quali canali leggere : 18 e 19
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <ADC_custom_init+0xc8>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <ADC_custom_init+0xc8>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]


	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <ADC_custom_init+0xc8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <ADC_custom_init+0xc8>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <ADC_custom_init+0xc8>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a24      	ldr	r2, [pc, #144]	@ (8000690 <ADC_custom_init+0xc8>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <ADC_custom_init+0xc8>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <ADC_custom_init+0xc8>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <ADC_custom_init+0xc8>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <ADC_custom_init+0xc8>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <ADC_custom_init+0xc8>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <ADC_custom_init+0xc8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <ADC_custom_init+0xc8>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <ADC_custom_init+0xc8>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <ADC_custom_init+0xc8>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000640:	bf00      	nop
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <ADC_custom_init+0xc8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <ADC_custom_init+0xc8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <ADC_custom_init+0xc8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]

	/* ADR ACCESO */

	// TIM6 set to 240Mhz

	TIM6->PSC = 12; // TIM6 CLOCK/PSC
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <ADC_custom_init+0xcc>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 20;	// TIM6 CLOCK/PSC/ARR
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <ADC_custom_init+0xcc>)
 8000662:	2214      	movs	r2, #20
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <ADC_custom_init+0xcc>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <ADC_custom_init+0xcc>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <ADC_custom_init+0xcc>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]

	// 240 Mhz -> 20 Mhz -> 1 Mhz

	ADC3->IER |= ADC_IER_EOCIE;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <ADC_custom_init+0xc8>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <ADC_custom_init+0xc8>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6053      	str	r3, [r2, #4]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	58026000 	.word	0x58026000
 8000694:	40001000 	.word	0x40001000

08000698 <ADC_custom_interrupt>:
		pre_triggd = false;
		return;
	}
}

void ADC_custom_interrupt(){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

	if (triggd && (DMA2_Stream0->NDTR == trig_indx)) {
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <ADC_custom_interrupt+0x84>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d01c      	beq.n	80006e0 <ADC_custom_interrupt+0x48>
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <ADC_custom_interrupt+0x88>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000724 <ADC_custom_interrupt+0x8c>)
 80006ac:	8812      	ldrh	r2, [r2, #0]
 80006ae:	b292      	uxth	r2, r2
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d115      	bne.n	80006e0 <ADC_custom_interrupt+0x48>
	    TIM6->CR1 &= ~TIM_CR1_CEN;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <ADC_custom_interrupt+0x90>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <ADC_custom_interrupt+0x90>)
 80006ba:	f023 0301 	bic.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]
	    ADC3->ISR |= ADC_ISR_EOC;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <ADC_custom_interrupt+0x94>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	@ (800072c <ADC_custom_interrupt+0x94>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6013      	str	r3, [r2, #0]
	    triggd = false;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <ADC_custom_interrupt+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	    USART3->CR3 |= USART_CR3_DMAT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <ADC_custom_interrupt+0x98>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <ADC_custom_interrupt+0x98>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006dc:	6093      	str	r3, [r2, #8]
	    return;
 80006de:	e019      	b.n	8000714 <ADC_custom_interrupt+0x7c>
	}

	if (!(COMP12->SR & COMP_SR_C2VAL)) {
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <ADC_custom_interrupt+0x9c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d110      	bne.n	800070e <ADC_custom_interrupt+0x76>
	    if (!triggd) {
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <ADC_custom_interrupt+0x84>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <ADC_custom_interrupt+0x7c>
	        triggd = true;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <ADC_custom_interrupt+0x84>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
	        trig_indx = DMA2_Stream0->NDTR;
 8000702:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <ADC_custom_interrupt+0x88>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <ADC_custom_interrupt+0x8c>)
 800070a:	801a      	strh	r2, [r3, #0]
 800070c:	e002      	b.n	8000714 <ADC_custom_interrupt+0x7c>
	    }
	} else {
	    triggd = false;
 800070e:	4b03      	ldr	r3, [pc, #12]	@ (800071c <ADC_custom_interrupt+0x84>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	}
}
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	2400002c 	.word	0x2400002c
 8000720:	40020410 	.word	0x40020410
 8000724:	2400002e 	.word	0x2400002e
 8000728:	40001000 	.word	0x40001000
 800072c:	58026000 	.word	0x58026000
 8000730:	40004800 	.word	0x40004800
 8000734:	58003800 	.word	0x58003800

08000738 <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0

	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <DMA_custom_init+0x88>)
 8000740:	4a20      	ldr	r2, [pc, #128]	@ (80007c4 <DMA_custom_init+0x8c>)
 8000742:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000744:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <DMA_custom_init+0x90>)
 8000746:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <DMA_custom_init+0x8c>)
 8000748:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <DMA_custom_init+0x88>)
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <DMA_custom_init+0x94>)
 800074e:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <DMA_custom_init+0x90>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <DMA_custom_init+0x98>)
 8000754:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 8000756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075a:	607b      	str	r3, [r7, #4]

	DMA2_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 800075c:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <DMA_custom_init+0x88>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6053      	str	r3, [r2, #4]
	DMA2_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 8000762:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <DMA_custom_init+0x90>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	6053      	str	r3, [r2, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <DMA_custom_init+0x88>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <DMA_custom_init+0x88>)
 8000770:	f023 0310 	bic.w	r3, r3, #16
 8000774:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <DMA_custom_init+0x90>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <DMA_custom_init+0x90>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in single shot mode
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <DMA_custom_init+0x9c>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <DMA_custom_init+0x9c>)
 8000788:	f043 0303 	orr.w	r3, r3, #3
 800078c:	60d3      	str	r3, [r2, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <DMA_custom_init+0x88>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <DMA_custom_init+0x88>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <DMA_custom_init+0x90>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <DMA_custom_init+0x90>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <DMA_custom_init+0x9c>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <DMA_custom_init+0x9c>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6093      	str	r3, [r2, #8]

	//TIM6->CR1 |= TIM_CR1_CEN;	LO ACCENDO NELL'USART3 INTERR
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40020410 	.word	0x40020410
 80007c4:	24000030 	.word	0x24000030
 80007c8:	40020428 	.word	0x40020428
 80007cc:	58026040 	.word	0x58026040
 80007d0:	40004828 	.word	0x40004828
 80007d4:	58026000 	.word	0x58026000

080007d8 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <DMA_custom_interrupt_tx+0x74>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	@ (800084c <DMA_custom_interrupt_tx+0x74>)
 80007e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007e6:	6093      	str	r3, [r2, #8]

	extern uint16_t trig_indx;

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <DMA_custom_interrupt_tx+0x78>)
 80007ea:	f04f 32ff 	mov.w	r2, #4294967295
 80007ee:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <DMA_custom_interrupt_tx+0x78>)
 80007f2:	f04f 32ff 	mov.w	r2, #4294967295
 80007f6:	60da      	str	r2, [r3, #12]


	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80007f8:	bf00      	nop
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <DMA_custom_interrupt_tx+0x74>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f9      	beq.n	80007fa <DMA_custom_interrupt_tx+0x22>
	USART3->TDR = ((unsigned char*)&trig_indx)[0];
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <DMA_custom_interrupt_tx+0x7c>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <DMA_custom_interrupt_tx+0x74>)
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 800080e:	bf00      	nop
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <DMA_custom_interrupt_tx+0x74>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f9      	beq.n	8000810 <DMA_custom_interrupt_tx+0x38>
	USART3->TDR = ((unsigned char*)&trig_indx)[1];
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <DMA_custom_interrupt_tx+0x80>)
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <DMA_custom_interrupt_tx+0x74>)
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28

	trig_indx = 0;
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <DMA_custom_interrupt_tx+0x7c>)
 8000826:	2200      	movs	r2, #0
 8000828:	801a      	strh	r2, [r3, #0]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <DMA_custom_interrupt_tx+0x84>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <DMA_custom_interrupt_tx+0x84>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <DMA_custom_interrupt_tx+0x88>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <DMA_custom_interrupt_tx+0x88>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	40004800 	.word	0x40004800
 8000850:	40020400 	.word	0x40020400
 8000854:	2400002e 	.word	0x2400002e
 8000858:	2400002f 	.word	0x2400002f
 800085c:	40020410 	.word	0x40020410
 8000860:	40020428 	.word	0x40020428

08000864 <usart3_init>:
 */

#include "Custom_usart.h"
#include <stdint.h>

void usart3_init(){
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <usart3_init+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <usart3_init+0x4c>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <usart3_init+0x4c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <usart3_init+0x4c>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <usart3_init+0x4c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <usart3_init+0x4c>)
 8000886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800088a:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <usart3_init+0x4c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <usart3_init+0x4c>)
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <usart3_init+0x4c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <usart3_init+0x4c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]

}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40004800 	.word	0x40004800

080008b4 <usart3_custom_interrupt>:

void usart3_custom_interrupt(){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <usart3_custom_interrupt+0x94>)
 80008bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008be:	71fb      	strb	r3, [r7, #7]
	extern bool triggd;

	if(data == 'V'){
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b56      	cmp	r3, #86	@ 0x56
 80008c4:	d116      	bne.n	80008f4 <usart3_custom_interrupt+0x40>

		USART3->TDR = ((unsigned char*)&VREFINT_C) [0];
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <usart3_custom_interrupt+0x98>)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <usart3_custom_interrupt+0x94>)
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008ce:	bf00      	nop
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <usart3_custom_interrupt+0x94>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <usart3_custom_interrupt+0x1c>
		USART3->TDR = ((unsigned char*)&VREFINT_C) [1];
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <usart3_custom_interrupt+0x9c>)
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <usart3_custom_interrupt+0x94>)
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008e4:	bf00      	nop
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <usart3_custom_interrupt+0x94>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f9      	beq.n	80008e6 <usart3_custom_interrupt+0x32>
 80008f2:	e011      	b.n	8000918 <usart3_custom_interrupt+0x64>

	}else if(data == '?'){
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80008f8:	d10e      	bne.n	8000918 <usart3_custom_interrupt+0x64>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <usart3_custom_interrupt+0x94>)
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <usart3_custom_interrupt+0x94>)
 8000900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000904:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <usart3_custom_interrupt+0xa0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <usart3_custom_interrupt+0xa0>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6013      	str	r3, [r2, #0]
		triggd = false;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <usart3_custom_interrupt+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	}


	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <usart3_custom_interrupt+0x94>)
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <usart3_custom_interrupt+0x94>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <usart3_custom_interrupt+0x94>)
 8000926:	6a1b      	ldr	r3, [r3, #32]
 8000928:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <usart3_custom_interrupt+0x94>)
 800092a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800092e:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <usart3_custom_interrupt+0x94>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <usart3_custom_interrupt+0x94>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40004800 	.word	0x40004800
 800094c:	1ff1e860 	.word	0x1ff1e860
 8000950:	1ff1e861 	.word	0x1ff1e861
 8000954:	40001000 	.word	0x40001000
 8000958:	2400002c 	.word	0x2400002c

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fe82 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f830 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 fa56 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 800096c:	f000 fa2c 	bl	8000dc8 <MX_DMA_Init>
  MX_ADC3_Init();
 8000970:	f000 f8d8 	bl	8000b24 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000974:	f000 f9da 	bl	8000d2c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000978:	f000 f9a2 	bl	8000cc0 <MX_TIM6_Init>
  MX_DAC1_Init();
 800097c:	f000 f96e 	bl	8000c5c <MX_DAC1_Init>
  MX_COMP2_Init();
 8000980:	f000 f940 	bl	8000c04 <MX_COMP2_Init>
  /* USER CODE BEGIN 2 */

  COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <main+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <main+0x64>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  DAC1->CR |= DAC_CR_EN1;		// attivo DAC
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <main+0x68>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <main+0x68>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]

  DAC1->DHR12R1 = 1200;			// Soglia del comparatore IN 12 BIT NON 16
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <main+0x68>)
 800099e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80009a2:	609a      	str	r2, [r3, #8]

  DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <main+0x68>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <main+0x68>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6053      	str	r3, [r2, #4]


  usart3_init();
 80009b0:	f7ff ff58 	bl	8000864 <usart3_init>
  ADC_custom_init();
 80009b4:	f7ff fe08 	bl	80005c8 <ADC_custom_init>
  DMA_custom_init();
 80009b8:	f7ff febe 	bl	8000738 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <main+0x60>
 80009c0:	58003810 	.word	0x58003810
 80009c4:	40007400 	.word	0x40007400

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09e      	sub	sp, #120	@ 0x78
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d2:	224c      	movs	r2, #76	@ 0x4c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f009 f864 	bl	8009aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2220      	movs	r2, #32
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f009 f85d 	bl	8009aa4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f004 f8d4 	bl	8004b98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <SystemClock_Config+0x150>)
 80009f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f8:	4a47      	ldr	r2, [pc, #284]	@ (8000b18 <SystemClock_Config+0x150>)
 80009fa:	f023 0301 	bic.w	r3, r3, #1
 80009fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a00:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SystemClock_Config+0x150>)
 8000a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b44      	ldr	r3, [pc, #272]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a43      	ldr	r2, [pc, #268]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b41      	ldr	r3, [pc, #260]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a22:	bf00      	nop
 8000a24:	4b3d      	ldr	r3, [pc, #244]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a30:	d1f8      	bne.n	8000a24 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <SystemClock_Config+0x158>)
 8000a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a38:	4a39      	ldr	r2, [pc, #228]	@ (8000b20 <SystemClock_Config+0x158>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a42:	4b37      	ldr	r3, [pc, #220]	@ (8000b20 <SystemClock_Config+0x158>)
 8000a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a30      	ldr	r2, [pc, #192]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b2e      	ldr	r3, [pc, #184]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <SystemClock_Config+0x150>)
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <SystemClock_Config+0x150>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <SystemClock_Config+0x150>)
 8000a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a82:	bf00      	nop
 8000a84:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <SystemClock_Config+0x154>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a90:	d1f8      	bne.n	8000a84 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a96:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aa8:	2378      	movs	r3, #120	@ 0x78
 8000aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f89f 	bl	8004c0c <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ad4:	f000 fad0 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	233f      	movs	r3, #63	@ 0x3f
 8000ada:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ae8:	2340      	movs	r3, #64	@ 0x40
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aec:	2340      	movs	r3, #64	@ 0x40
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000af6:	2340      	movs	r3, #64	@ 0x40
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2104      	movs	r1, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 fcdd 	bl	80054c0 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b0c:	f000 fab4 	bl	8001078 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3778      	adds	r7, #120	@ 0x78
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	58024400 	.word	0x58024400

08000b24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b3e:	4a30      	ldr	r2, [pc, #192]	@ (8000c00 <MX_ADC3_Init+0xdc>)
 8000b40:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b50:	2204      	movs	r2, #4
 8000b52:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b66:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b6e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b72:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b74:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000b9e:	f000 ffc7 	bl	8001b30 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000ba8:	f000 fa66 	bl	8001078 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bb2:	4812      	ldr	r0, [pc, #72]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000bb4:	f000 ffbc 	bl	8001b30 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000bbe:	f000 fa5b 	bl	8001078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_ADC3_Init+0xd8>)
 8000be6:	f001 f945 	bl	8001e74 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000bf0:	f000 fa42 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	24000800 	.word	0x24000800
 8000c00:	58026000 	.word	0x58026000

08000c04 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c0a:	4a13      	ldr	r2, [pc, #76]	@ (8000c58 <MX_COMP2_Init+0x54>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c14:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c3c:	2212      	movs	r2, #18
 8000c3e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_COMP2_Init+0x50>)
 8000c42:	f001 fd7f 	bl	8002744 <HAL_COMP_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f000 fa14 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	240008dc 	.word	0x240008dc
 8000c58:	58003810 	.word	0x58003810

08000c5c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2224      	movs	r2, #36	@ 0x24
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 ff1b 	bl	8009aa4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_DAC1_Init+0x5c>)
 8000c70:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <MX_DAC1_Init+0x60>)
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c74:	4810      	ldr	r0, [pc, #64]	@ (8000cb8 <MX_DAC1_Init+0x5c>)
 8000c76:	f001 ff9e 	bl	8002bb6 <HAL_DAC_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c80:	f000 f9fa 	bl	8001078 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <MX_DAC1_Init+0x5c>)
 8000ca0:	f001 ffac 	bl	8002bfc <HAL_DAC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f9e5 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24000908 	.word	0x24000908
 8000cbc:	40007400 	.word	0x40007400

08000cc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000cd2:	4a15      	ldr	r2, [pc, #84]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000ce4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ce8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000cf2:	f007 fc6f 	bl	80085d4 <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cfc:	f000 f9bc 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d00:	2320      	movs	r3, #32
 8000d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_TIM6_Init+0x64>)
 8000d0e:	f007 fd5f 	bl	80087d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 f9ae 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2400091c 	.word	0x2400091c
 8000d28:	40001000 	.word	0x40001000

08000d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d30:	4b22      	ldr	r3, [pc, #136]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d32:	4a23      	ldr	r2, [pc, #140]	@ (8000dc0 <MX_USART3_UART_Init+0x94>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d38:	4a22      	ldr	r2, [pc, #136]	@ (8000dc4 <MX_USART3_UART_Init+0x98>)
 8000d3a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d50:	220c      	movs	r2, #12
 8000d52:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d54:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d72:	4812      	ldr	r0, [pc, #72]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d74:	f007 fdba 	bl	80088ec <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000d7e:	f000 f97b 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d86:	f008 fdc2 	bl	800990e <HAL_UARTEx_SetTxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000d90:	f000 f972 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000d98:	f008 fdf7 	bl	800998a <HAL_UARTEx_SetRxFifoThreshold>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000da2:	f000 f969 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USART3_UART_Init+0x90>)
 8000da8:	f008 fd78 	bl	800989c <HAL_UARTEx_DisableFifoMode>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000db2:	f000 f961 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24000968 	.word	0x24000968
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	000f4240 	.word	0x000f4240

08000dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_DMA_Init+0x4c>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <MX_DMA_Init+0x4c>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <MX_DMA_Init+0x4c>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2038      	movs	r0, #56	@ 0x38
 8000df2:	f001 feac 	bl	8002b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000df6:	2038      	movs	r0, #56	@ 0x38
 8000df8:	f001 fec3 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2039      	movs	r0, #57	@ 0x39
 8000e02:	f001 fea4 	bl	8002b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e06:	2039      	movs	r0, #57	@ 0x39
 8000e08:	f001 febb 	bl	8002b82 <HAL_NVIC_EnableIRQ>

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	58024400 	.word	0x58024400

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a89      	ldr	r2, [pc, #548]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b87      	ldr	r3, [pc, #540]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4c:	4b83      	ldr	r3, [pc, #524]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a82      	ldr	r2, [pc, #520]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a7a      	ldr	r2, [pc, #488]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b78      	ldr	r3, [pc, #480]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b74      	ldr	r3, [pc, #464]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a73      	ldr	r2, [pc, #460]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b70      	ldr	r3, [pc, #448]	@ (800105c <MX_GPIO_Init+0x244>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800105c <MX_GPIO_Init+0x244>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	4a6b      	ldr	r2, [pc, #428]	@ (800105c <MX_GPIO_Init+0x244>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb6:	4b69      	ldr	r3, [pc, #420]	@ (800105c <MX_GPIO_Init+0x244>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	4b65      	ldr	r3, [pc, #404]	@ (800105c <MX_GPIO_Init+0x244>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eca:	4a64      	ldr	r2, [pc, #400]	@ (800105c <MX_GPIO_Init+0x244>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed4:	4b61      	ldr	r3, [pc, #388]	@ (800105c <MX_GPIO_Init+0x244>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800105c <MX_GPIO_Init+0x244>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800105c <MX_GPIO_Init+0x244>)
 8000eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800105c <MX_GPIO_Init+0x244>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f06:	4856      	ldr	r0, [pc, #344]	@ (8001060 <MX_GPIO_Init+0x248>)
 8000f08:	f003 fe2c 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f12:	4854      	ldr	r0, [pc, #336]	@ (8001064 <MX_GPIO_Init+0x24c>)
 8000f14:	f003 fe26 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4852      	ldr	r0, [pc, #328]	@ (8001068 <MX_GPIO_Init+0x250>)
 8000f1e:	f003 fe21 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	484d      	ldr	r0, [pc, #308]	@ (800106c <MX_GPIO_Init+0x254>)
 8000f38:	f003 fc64 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f3c:	2332      	movs	r3, #50	@ 0x32
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4c:	230b      	movs	r3, #11
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4845      	ldr	r0, [pc, #276]	@ (800106c <MX_GPIO_Init+0x254>)
 8000f58:	f003 fc54 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f5c:	2386      	movs	r3, #134	@ 0x86
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	483e      	ldr	r0, [pc, #248]	@ (8001070 <MX_GPIO_Init+0x258>)
 8000f78:	f003 fc44 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f7c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4832      	ldr	r0, [pc, #200]	@ (8001060 <MX_GPIO_Init+0x248>)
 8000f96:	f003 fc35 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	482a      	ldr	r0, [pc, #168]	@ (8001060 <MX_GPIO_Init+0x248>)
 8000fb8:	f003 fc24 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4823      	ldr	r0, [pc, #140]	@ (8001064 <MX_GPIO_Init+0x24c>)
 8000fd6:	f003 fc15 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4821      	ldr	r0, [pc, #132]	@ (8001074 <MX_GPIO_Init+0x25c>)
 8000ff0:	f003 fc08 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ff4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001006:	230a      	movs	r3, #10
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4817      	ldr	r0, [pc, #92]	@ (8001070 <MX_GPIO_Init+0x258>)
 8001012:	f003 fbf7 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001016:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4810      	ldr	r0, [pc, #64]	@ (8001074 <MX_GPIO_Init+0x25c>)
 8001034:	f003 fbe6 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <MX_GPIO_Init+0x250>)
 8001050:	f003 fbd8 	bl	8004804 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400
 8001060:	58020400 	.word	0x58020400
 8001064:	58020c00 	.word	0x58020c00
 8001068:	58021000 	.word	0x58021000
 800106c:	58020800 	.word	0x58020800
 8001070:	58020000 	.word	0x58020000
 8001074:	58021800 	.word	0x58021800

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <Error_Handler+0x8>

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_MspInit+0x54>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <HAL_MspInit+0x54>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_MspInit+0x54>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_MspInit+0x54>)
 80010aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_MspInit+0x54>)
 80010b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <HAL_MspInit+0x54>)
 80010ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80010c6:	f000 fb81 	bl	80017cc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f000 fb6a 	bl	80017a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58024400 	.word	0x58024400

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0b4      	sub	sp, #208	@ 0xd0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	22c0      	movs	r2, #192	@ 0xc0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 fcd9 	bl	8009aa4 <memset>
  if(hadc->Instance==ADC3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a43      	ldr	r2, [pc, #268]	@ (8001204 <HAL_ADC_MspInit+0x128>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d17e      	bne.n	80011fa <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 800110c:	2332      	movs	r3, #50	@ 0x32
 800110e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111c:	23c0      	movs	r3, #192	@ 0xc0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fd50 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800113e:	f7ff ff9b 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001142:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <HAL_ADC_MspInit+0x12c>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <HAL_ADC_MspInit+0x12c>)
 800114a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <HAL_ADC_MspInit+0x12c>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <HAL_ADC_MspInit+0x12c>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <HAL_ADC_MspInit+0x12c>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <HAL_ADC_MspInit+0x12c>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800117e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001182:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001186:	f000 fb31 	bl	80017ec <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800118a:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_ADC_MspInit+0x130>)
 800118c:	4a20      	ldr	r2, [pc, #128]	@ (8001210 <HAL_ADC_MspInit+0x134>)
 800118e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <HAL_ADC_MspInit+0x130>)
 8001192:	2273      	movs	r2, #115	@ 0x73
 8001194:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <HAL_ADC_MspInit+0x130>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <HAL_ADC_MspInit+0x130>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011b0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011c0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80011ce:	480f      	ldr	r0, [pc, #60]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011d0:	f001 fe56 	bl	8002e80 <HAL_DMA_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80011da:	f7ff ff4d 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011e4:	4a09      	ldr	r2, [pc, #36]	@ (800120c <HAL_ADC_MspInit+0x130>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	207f      	movs	r0, #127	@ 0x7f
 80011f0:	f001 fcad 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80011f4:	207f      	movs	r0, #127	@ 0x7f
 80011f6:	f001 fcc4 	bl	8002b82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	37d0      	adds	r7, #208	@ 0xd0
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58026000 	.word	0x58026000
 8001208:	58024400 	.word	0x58024400
 800120c:	24000864 	.word	0x24000864
 8001210:	40020410 	.word	0x40020410

08001214 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <HAL_COMP_MspInit+0x80>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12a      	bne.n	800128c <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_COMP_MspInit+0x84>)
 8001238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_COMP_MspInit+0x84>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001242:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_COMP_MspInit+0x84>)
 8001248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800124c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HAL_COMP_MspInit+0x84>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	4a0f      	ldr	r2, [pc, #60]	@ (8001298 <HAL_COMP_MspInit+0x84>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_COMP_MspInit+0x84>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_COMP_MspInit+0x88>)
 8001288:	f003 fabc 	bl	8004804 <HAL_GPIO_Init>

  /* USER CODE END COMP2_MspInit 1 */

  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	@ 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58003810 	.word	0x58003810
 8001298:	58024400 	.word	0x58024400
 800129c:	58021000 	.word	0x58021000

080012a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <HAL_DAC_MspInit+0x3c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10e      	bne.n	80012d0 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_DAC_MspInit+0x40>)
 80012b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b8:	4a09      	ldr	r2, [pc, #36]	@ (80012e0 <HAL_DAC_MspInit+0x40>)
 80012ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <HAL_DAC_MspInit+0x40>)
 80012c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40007400 	.word	0x40007400
 80012e0:	58024400 	.word	0x58024400

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_TIM_Base_MspInit+0x3c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10e      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_TIM_Base_MspInit+0x40>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_TIM_Base_MspInit+0x40>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <HAL_TIM_Base_MspInit+0x40>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40001000 	.word	0x40001000
 8001324:	58024400 	.word	0x58024400

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0ba      	sub	sp, #232	@ 0xe8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	22c0      	movs	r2, #192	@ 0xc0
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 fbab 	bl	8009aa4 <memset>
  if(huart->Instance==USART3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a41      	ldr	r2, [pc, #260]	@ (8001458 <HAL_UART_MspInit+0x130>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d17b      	bne.n	8001450 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001358:	f04f 0202 	mov.w	r2, #2
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fc32 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800137a:	f7ff fe7d 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137e:	4b37      	ldr	r3, [pc, #220]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001384:	4a35      	ldr	r2, [pc, #212]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_UART_MspInit+0x134>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	4a2e      	ldr	r2, [pc, #184]	@ (800145c <HAL_UART_MspInit+0x134>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_UART_MspInit+0x134>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d4:	2307      	movs	r3, #7
 80013d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	@ (8001460 <HAL_UART_MspInit+0x138>)
 80013e2:	f003 fa0f 	bl	8004804 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream1;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 80013e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <HAL_UART_MspInit+0x140>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 80013ee:	222e      	movs	r2, #46	@ 0x2e
 80013f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 8001400:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001404:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001424:	480f      	ldr	r0, [pc, #60]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 8001426:	f001 fd2b 	bl	8002e80 <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001430:	f7ff fe22 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 8001438:	67da      	str	r2, [r3, #124]	@ 0x7c
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2027      	movs	r0, #39	@ 0x27
 8001446:	f001 fb82 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800144a:	2027      	movs	r0, #39	@ 0x27
 800144c:	f001 fb99 	bl	8002b82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001450:	bf00      	nop
 8001452:	37e8      	adds	r7, #232	@ 0xe8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004800 	.word	0x40004800
 800145c:	58024400 	.word	0x58024400
 8001460:	58020c00 	.word	0x58020c00
 8001464:	240009fc 	.word	0x240009fc
 8001468:	40020428 	.word	0x40020428

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 f943 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}

080014ca <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_custom_interrupt();
 80014ce:	f7ff f9f1 	bl	80008b4 <usart3_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <DMA2_Stream0_IRQHandler+0x10>)
 80014de:	f002 f82b 	bl	8003538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000864 	.word	0x24000864

080014ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 80014f0:	f7ff f972 	bl	80007d8 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 80014fc:	f7ff f8cc 	bl	8000698 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b37      	ldr	r3, [pc, #220]	@ (80015e8 <SystemInit+0xe4>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a36      	ldr	r2, [pc, #216]	@ (80015e8 <SystemInit+0xe4>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001518:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <SystemInit+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b06      	cmp	r3, #6
 8001522:	d807      	bhi.n	8001534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001524:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <SystemInit+0xe8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 030f 	bic.w	r3, r3, #15
 800152c:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <SystemInit+0xe8>)
 800152e:	f043 0307 	orr.w	r3, r3, #7
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001534:	4b2e      	ldr	r3, [pc, #184]	@ (80015f0 <SystemInit+0xec>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2d      	ldr	r2, [pc, #180]	@ (80015f0 <SystemInit+0xec>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001540:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <SystemInit+0xec>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <SystemInit+0xec>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4929      	ldr	r1, [pc, #164]	@ (80015f0 <SystemInit+0xec>)
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <SystemInit+0xf0>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001552:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <SystemInit+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155e:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <SystemInit+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <SystemInit+0xe8>)
 8001568:	f043 0307 	orr.w	r3, r3, #7
 800156c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <SystemInit+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001574:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <SystemInit+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157a:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <SystemInit+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <SystemInit+0xec>)
 8001582:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <SystemInit+0xf4>)
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <SystemInit+0xec>)
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <SystemInit+0xf8>)
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <SystemInit+0xec>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <SystemInit+0xfc>)
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <SystemInit+0xec>)
 8001594:	2200      	movs	r2, #0
 8001596:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <SystemInit+0xec>)
 800159a:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <SystemInit+0xfc>)
 800159c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159e:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <SystemInit+0xec>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <SystemInit+0xec>)
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <SystemInit+0xfc>)
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <SystemInit+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <SystemInit+0xec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <SystemInit+0xec>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <SystemInit+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <SystemInit+0x100>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <SystemInit+0x104>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015ce:	d202      	bcs.n	80015d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <SystemInit+0x108>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <SystemInit+0x10c>)
 80015d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	52002000 	.word	0x52002000
 80015f0:	58024400 	.word	0x58024400
 80015f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f8:	02020200 	.word	0x02020200
 80015fc:	01ff0000 	.word	0x01ff0000
 8001600:	01010280 	.word	0x01010280
 8001604:	5c001000 	.word	0x5c001000
 8001608:	ffff0000 	.word	0xffff0000
 800160c:	51008108 	.word	0x51008108
 8001610:	52004000 	.word	0x52004000

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800164c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001618:	f7ff ff74 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	@ (8001654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	@ (8001660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f008 fa37 	bl	8009ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff f989 	bl	800095c <main>
  bx  lr
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001650:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001654:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001658:	08009b64 	.word	0x08009b64
  ldr r2, =_sbss
 800165c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001660:	24000a78 	.word	0x24000a78

08001664 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166e:	2003      	movs	r0, #3
 8001670:	f001 fa62 	bl	8002b38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001674:	f004 f8da 	bl	800582c <HAL_RCC_GetSysClockFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_Init+0x68>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	4913      	ldr	r1, [pc, #76]	@ (80016d4 <HAL_Init+0x6c>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_Init+0x68>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_Init+0x6c>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_Init+0x70>)
 80016aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016ac:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <HAL_Init+0x74>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f814 	bl	80016e0 <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e002      	b.n	80016c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fcdf 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	58024400 	.word	0x58024400
 80016d4:	08009b14 	.word	0x08009b14
 80016d8:	24000004 	.word	0x24000004
 80016dc:	24000000 	.word	0x24000000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e021      	b.n	8001738 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_InitTick+0x64>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_InitTick+0x60>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fa47 	bl	8002b9e <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f001 fa11 	bl	8002b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x68>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2400000c 	.word	0x2400000c
 8001744:	24000000 	.word	0x24000000
 8001748:	24000008 	.word	0x24000008

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000a74 	.word	0x24000a74

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	24000a74 	.word	0x24000a74

0800178c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetREVID+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0c1b      	lsrs	r3, r3, #16
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	5c001000 	.word	0x5c001000

080017a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 0202 	bic.w	r2, r3, #2
 80017b4:	4904      	ldr	r1, [pc, #16]	@ (80017c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	58003c00 	.word	0x58003c00

080017cc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	58003c00 	.word	0x58003c00

080017ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	4904      	ldr	r1, [pc, #16]	@ (8001814 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	58000400 	.word	0x58000400

08001818 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3360      	adds	r3, #96	@ 0x60
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	611a      	str	r2, [r3, #16]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b087      	sub	sp, #28
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3360      	adds	r3, #96	@ 0x60
 8001902:	461a      	mov	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	431a      	orrs	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
  }
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3330      	adds	r3, #48	@ 0x30
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	211f      	movs	r1, #31
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	f003 011f 	and.w	r1, r3, #31
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	431a      	orrs	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3314      	adds	r3, #20
 8001990:	461a      	mov	r2, r3
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	0e5b      	lsrs	r3, r3, #25
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	0d1b      	lsrs	r3, r3, #20
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2107      	movs	r1, #7
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0d1b      	lsrs	r3, r3, #20
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0318 	and.w	r3, r3, #24
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <LL_ADC_SetChannelSingleDiff+0x44>)
 80019fc:	40d9      	lsrs	r1, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	400b      	ands	r3, r1
 8001a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a06:	431a      	orrs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	000fffff 	.word	0x000fffff

08001a20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6093      	str	r3, [r2, #8]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	5fffffc0 	.word	0x5fffffc0

08001a44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	6fffffc0 	.word	0x6fffffc0

08001a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <LL_ADC_IsEnabled+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_ADC_IsEnabled+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d101      	bne.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d101      	bne.n	8001b20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e18f      	b.n	8001e6a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fabf 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff67 	bl	8001a44 <LL_ADC_IsDeepPowerDownEnabled>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff4d 	bl	8001a20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff82 	bl	8001a94 <LL_ADC_IsInternalRegulatorEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d114      	bne.n	8001bc0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff66 	bl	8001a6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba0:	4b87      	ldr	r3, [pc, #540]	@ (8001dc0 <HAL_ADC_Init+0x290>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	4a87      	ldr	r2, [pc, #540]	@ (8001dc4 <HAL_ADC_Init+0x294>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bb2:	e002      	b.n	8001bba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff65 	bl	8001a94 <LL_ADC_IsInternalRegulatorEnabled>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff76 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001bf6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 8129 	bne.w	8001e58 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 8125 	bne.w	8001e58 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c12:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c16:	f043 0202 	orr.w	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff4a 	bl	8001abc <LL_ADC_IsEnabled>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d136      	bne.n	8001c9c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a65      	ldr	r2, [pc, #404]	@ (8001dc8 <HAL_ADC_Init+0x298>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_ADC_Init+0x112>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a63      	ldr	r2, [pc, #396]	@ (8001dcc <HAL_ADC_Init+0x29c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10e      	bne.n	8001c60 <HAL_ADC_Init+0x130>
 8001c42:	4861      	ldr	r0, [pc, #388]	@ (8001dc8 <HAL_ADC_Init+0x298>)
 8001c44:	f7ff ff3a 	bl	8001abc <LL_ADC_IsEnabled>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	4860      	ldr	r0, [pc, #384]	@ (8001dcc <HAL_ADC_Init+0x29c>)
 8001c4c:	f7ff ff36 	bl	8001abc <LL_ADC_IsEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4323      	orrs	r3, r4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	e008      	b.n	8001c72 <HAL_ADC_Init+0x142>
 8001c60:	485b      	ldr	r0, [pc, #364]	@ (8001dd0 <HAL_ADC_Init+0x2a0>)
 8001c62:	f7ff ff2b 	bl	8001abc <LL_ADC_IsEnabled>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a53      	ldr	r2, [pc, #332]	@ (8001dc8 <HAL_ADC_Init+0x298>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_Init+0x15a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a51      	ldr	r2, [pc, #324]	@ (8001dcc <HAL_ADC_Init+0x29c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Init+0x15e>
 8001c8a:	4a52      	ldr	r2, [pc, #328]	@ (8001dd4 <HAL_ADC_Init+0x2a4>)
 8001c8c:	e000      	b.n	8001c90 <HAL_ADC_Init+0x160>
 8001c8e:	4a52      	ldr	r2, [pc, #328]	@ (8001dd8 <HAL_ADC_Init+0x2a8>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f7ff fdbe 	bl	8001818 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c9c:	f7ff fd76 	bl	800178c <HAL_GetREVID>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d914      	bls.n	8001cd4 <HAL_ADC_Init+0x1a4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d110      	bne.n	8001cd4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7d5b      	ldrb	r3, [r3, #21]
 8001cb6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cbc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001cc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ccc:	f043 030c 	orr.w	r3, r3, #12
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	e00d      	b.n	8001cf0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7d5b      	ldrb	r3, [r3, #21]
 8001cd8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cde:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ce4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7f1b      	ldrb	r3, [r3, #28]
 8001cea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7f1b      	ldrb	r3, [r3, #28]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	045b      	lsls	r3, r3, #17
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <HAL_ADC_Init+0x2ac>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	69b9      	ldr	r1, [r7, #24]
 8001d32:	430b      	orrs	r3, r1
 8001d34:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fed1 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001d40:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fede 	bl	8001b08 <LL_ADC_INJ_IsConversionOngoing>
 8001d4c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d15f      	bne.n	8001e14 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d15c      	bne.n	8001e14 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7d1b      	ldrb	r3, [r3, #20]
 8001d5e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <HAL_ADC_Init+0x2b0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d130      	bne.n	8001de8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_ADC_Init+0x2b4>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	0411      	lsls	r1, r2, #16
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dae:	430a      	orrs	r2, r1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	e01c      	b.n	8001df8 <HAL_ADC_Init+0x2c8>
 8001dbe:	bf00      	nop
 8001dc0:	24000000 	.word	0x24000000
 8001dc4:	053e2d63 	.word	0x053e2d63
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40022100 	.word	0x40022100
 8001dd0:	58026000 	.word	0x58026000
 8001dd4:	40022300 	.word	0x40022300
 8001dd8:	58026300 	.word	0x58026300
 8001ddc:	fff0c003 	.word	0xfff0c003
 8001de0:	ffffbffc 	.word	0xffffbffc
 8001de4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fb8c 	bl	800252c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10c      	bne.n	8001e36 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f023 010f 	bic.w	r1, r3, #15
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	1e5a      	subs	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e34:	e007      	b.n	8001e46 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 020f 	bic.w	r2, r2, #15
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e56:	e007      	b.n	8001e68 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	f043 0210 	orr.w	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	bf00      	nop

08001e74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b0a1      	sub	sp, #132	@ 0x84
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	@ (8002024 <HAL_ADC_ConfigChannel+0x1b0>)
 8001e8e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x2a>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e32e      	b.n	80024fc <HAL_ADC_ConfigChannel+0x688>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe19 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8313 	bne.w	80024de <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db2c      	blt.n	8001f1a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x6a>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	e016      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x98>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eee:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e003      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	69d1      	ldr	r1, [r2, #28]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7ff fcfe 	bl	8001928 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fdd6 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001f36:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fde3 	bl	8001b08 <LL_ADC_INJ_IsConversionOngoing>
 8001f42:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80b8 	bne.w	80020bc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 80b4 	bne.w	80020bc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fd0d 	bl	8001980 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f66:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <HAL_ADC_ConfigChannel+0x1b4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f72:	d10b      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x118>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	e01d      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x154>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x13e>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	e00a      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x154>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d02c      	beq.n	800202c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6919      	ldr	r1, [r3, #16]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fe0:	f7ff fc4e 	bl	8001880 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6919      	ldr	r1, [r3, #16]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	7e5b      	ldrb	r3, [r3, #25]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x186>
 8001ff4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ff8:	e000      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x188>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f7ff fc78 	bl	80018f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7e1b      	ldrb	r3, [r3, #24]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1a4>
 8002012:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002016:	e000      	b.n	800201a <HAL_ADC_ConfigChannel+0x1a6>
 8002018:	2300      	movs	r3, #0
 800201a:	461a      	mov	r2, r3
 800201c:	f7ff fc50 	bl	80018c0 <LL_ADC_SetDataRightShift>
 8002020:	e04c      	b.n	80020bc <HAL_ADC_ConfigChannel+0x248>
 8002022:	bf00      	nop
 8002024:	47ff0000 	.word	0x47ff0000
 8002028:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	069b      	lsls	r3, r3, #26
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800204e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002072:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	429a      	cmp	r2, r3
 8002086:	d107      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002096:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fcfb 	bl	8001abc <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 8211 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	f7ff fc7c 	bl	80019d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4aa1      	ldr	r2, [pc, #644]	@ (800236c <HAL_ADC_ConfigChannel+0x4f8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 812e 	bne.w	8002348 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x2a0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2b09      	cmp	r3, #9
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e019      	b.n	8002148 <HAL_ADC_ConfigChannel+0x2d4>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002124:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e003      	b.n	8002138 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b09      	cmp	r3, #9
 8002140:	bf94      	ite	ls
 8002142:	2301      	movls	r3, #1
 8002144:	2300      	movhi	r3, #0
 8002146:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002148:	2b00      	cmp	r3, #0
 800214a:	d079      	beq.n	8002240 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x2f4>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002166:	e015      	b.n	8002194 <HAL_ADC_ConfigChannel+0x320>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002178:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800217a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x340>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	e017      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x370>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80021d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	ea42 0103 	orr.w	r1, r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_ADC_ConfigChannel+0x396>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	051b      	lsls	r3, r3, #20
 8002208:	e018      	b.n	800223c <HAL_ADC_ConfigChannel+0x3c8>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800221c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e003      	b.n	800222e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223c:	430b      	orrs	r3, r1
 800223e:	e07e      	b.n	800233e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3e8>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	069b      	lsls	r3, r3, #26
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225a:	e015      	b.n	8002288 <HAL_ADC_ConfigChannel+0x414>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e003      	b.n	8002280 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x434>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	e017      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x464>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	61bb      	str	r3, [r7, #24]
  return result;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x490>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	3b1e      	subs	r3, #30
 80022fc:	051b      	lsls	r3, r3, #20
 80022fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002302:	e01b      	b.n	800233c <HAL_ADC_ConfigChannel+0x4c8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	60fb      	str	r3, [r7, #12]
  return result;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	051b      	lsls	r3, r3, #20
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	430b      	orrs	r3, r1
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	4619      	mov	r1, r3
 8002344:	f7ff fb1c 	bl	8001980 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f280 80cf 	bge.w	80024f0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <HAL_ADC_ConfigChannel+0x4fc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x4f2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_ADC_ConfigChannel+0x500>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10a      	bne.n	800237c <HAL_ADC_ConfigChannel+0x508>
 8002366:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <HAL_ADC_ConfigChannel+0x504>)
 8002368:	e009      	b.n	800237e <HAL_ADC_ConfigChannel+0x50a>
 800236a:	bf00      	nop
 800236c:	47ff0000 	.word	0x47ff0000
 8002370:	40022000 	.word	0x40022000
 8002374:	40022100 	.word	0x40022100
 8002378:	40022300 	.word	0x40022300
 800237c:	4b61      	ldr	r3, [pc, #388]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fa70 	bl	8001864 <LL_ADC_GetCommonPathInternalCh>
 8002384:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5f      	ldr	r2, [pc, #380]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_ADC_ConfigChannel+0x526>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5d      	ldr	r2, [pc, #372]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x544>
 800239a:	485b      	ldr	r0, [pc, #364]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 800239c:	f7ff fb8e 	bl	8001abc <LL_ADC_IsEnabled>
 80023a0:	4604      	mov	r4, r0
 80023a2:	485a      	ldr	r0, [pc, #360]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 80023a4:	f7ff fb8a 	bl	8001abc <LL_ADC_IsEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4323      	orrs	r3, r4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e008      	b.n	80023ca <HAL_ADC_ConfigChannel+0x556>
 80023b8:	4855      	ldr	r0, [pc, #340]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 80023ba:	f7ff fb7f 	bl	8001abc <LL_ADC_IsEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d07d      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a50      	ldr	r2, [pc, #320]	@ (8002514 <HAL_ADC_ConfigChannel+0x6a0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d130      	bne.n	800243a <HAL_ADC_ConfigChannel+0x5c6>
 80023d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d12b      	bne.n	800243a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f040 8081 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a45      	ldr	r2, [pc, #276]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x58e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a43      	ldr	r2, [pc, #268]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x592>
 8002402:	4a45      	ldr	r2, [pc, #276]	@ (8002518 <HAL_ADC_ConfigChannel+0x6a4>)
 8002404:	e000      	b.n	8002408 <HAL_ADC_ConfigChannel+0x594>
 8002406:	4a3f      	ldr	r2, [pc, #252]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 8002408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800240a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f7ff fa14 	bl	800183e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002416:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_ADC_ConfigChannel+0x6a8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	4a40      	ldr	r2, [pc, #256]	@ (8002520 <HAL_ADC_ConfigChannel+0x6ac>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	3301      	adds	r3, #1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800242a:	e002      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3b01      	subs	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002438:	e05a      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a39      	ldr	r2, [pc, #228]	@ (8002524 <HAL_ADC_ConfigChannel+0x6b0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d11e      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x60e>
 8002444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2f      	ldr	r2, [pc, #188]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d14b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_ADC_ConfigChannel+0x5f8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a29      	ldr	r2, [pc, #164]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x5fc>
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_ADC_ConfigChannel+0x6a4>)
 800246e:	e000      	b.n	8002472 <HAL_ADC_ConfigChannel+0x5fe>
 8002470:	4a24      	ldr	r2, [pc, #144]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 8002472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f7ff f9df 	bl	800183e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002480:	e036      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <HAL_ADC_ConfigChannel+0x6b4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d131      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
 800248c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12c      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_ADC_ConfigChannel+0x69c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d127      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_ADC_ConfigChannel+0x694>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x640>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_ADC_ConfigChannel+0x698>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x644>
 80024b4:	4a18      	ldr	r2, [pc, #96]	@ (8002518 <HAL_ADC_ConfigChannel+0x6a4>)
 80024b6:	e000      	b.n	80024ba <HAL_ADC_ConfigChannel+0x646>
 80024b8:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <HAL_ADC_ConfigChannel+0x690>)
 80024ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7ff f9bb 	bl	800183e <LL_ADC_SetCommonPathInternalCh>
 80024c8:	e012      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024dc:	e008      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	f043 0220 	orr.w	r2, r3, #32
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3784      	adds	r7, #132	@ 0x84
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	58026300 	.word	0x58026300
 8002508:	40022000 	.word	0x40022000
 800250c:	40022100 	.word	0x40022100
 8002510:	58026000 	.word	0x58026000
 8002514:	cb840000 	.word	0xcb840000
 8002518:	40022300 	.word	0x40022300
 800251c:	24000000 	.word	0x24000000
 8002520:	053e2d63 	.word	0x053e2d63
 8002524:	c7520000 	.word	0xc7520000
 8002528:	cfb80000 	.word	0xcfb80000

0800252c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a7a      	ldr	r2, [pc, #488]	@ (8002724 <ADC_ConfigureBoostMode+0x1f8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <ADC_ConfigureBoostMode+0x1c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a79      	ldr	r2, [pc, #484]	@ (8002728 <ADC_ConfigureBoostMode+0x1fc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d109      	bne.n	800255c <ADC_ConfigureBoostMode+0x30>
 8002548:	4b78      	ldr	r3, [pc, #480]	@ (800272c <ADC_ConfigureBoostMode+0x200>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e008      	b.n	800256e <ADC_ConfigureBoostMode+0x42>
 800255c:	4b74      	ldr	r3, [pc, #464]	@ (8002730 <ADC_ConfigureBoostMode+0x204>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01c      	beq.n	80025ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002572:	f003 fad5 	bl	8005b20 <HAL_RCC_GetHCLKFreq>
 8002576:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002580:	d010      	beq.n	80025a4 <ADC_ConfigureBoostMode+0x78>
 8002582:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002586:	d873      	bhi.n	8002670 <ADC_ConfigureBoostMode+0x144>
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258c:	d002      	beq.n	8002594 <ADC_ConfigureBoostMode+0x68>
 800258e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002592:	d16d      	bne.n	8002670 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	60fb      	str	r3, [r7, #12]
        break;
 80025a2:	e068      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e064      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025b0:	f04f 0100 	mov.w	r1, #0
 80025b4:	f004 fd1a 	bl	8006fec <HAL_RCCEx_GetPeriphCLKFreq>
 80025b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025c2:	d051      	beq.n	8002668 <ADC_ConfigureBoostMode+0x13c>
 80025c4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025c8:	d854      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 80025ca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025ce:	d047      	beq.n	8002660 <ADC_ConfigureBoostMode+0x134>
 80025d0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025d4:	d84e      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025da:	d03d      	beq.n	8002658 <ADC_ConfigureBoostMode+0x12c>
 80025dc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025e0:	d848      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025e6:	d033      	beq.n	8002650 <ADC_ConfigureBoostMode+0x124>
 80025e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025ec:	d842      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 80025ee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025f2:	d029      	beq.n	8002648 <ADC_ConfigureBoostMode+0x11c>
 80025f4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025f8:	d83c      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 80025fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025fe:	d01a      	beq.n	8002636 <ADC_ConfigureBoostMode+0x10a>
 8002600:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002604:	d836      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 8002606:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800260a:	d014      	beq.n	8002636 <ADC_ConfigureBoostMode+0x10a>
 800260c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002610:	d830      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 8002612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002616:	d00e      	beq.n	8002636 <ADC_ConfigureBoostMode+0x10a>
 8002618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800261c:	d82a      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 800261e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002622:	d008      	beq.n	8002636 <ADC_ConfigureBoostMode+0x10a>
 8002624:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002628:	d824      	bhi.n	8002674 <ADC_ConfigureBoostMode+0x148>
 800262a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800262e:	d002      	beq.n	8002636 <ADC_ConfigureBoostMode+0x10a>
 8002630:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002634:	d11e      	bne.n	8002674 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	60fb      	str	r3, [r7, #12]
        break;
 8002646:	e016      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
        break;
 800264e:	e012      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	60fb      	str	r3, [r7, #12]
        break;
 8002656:	e00e      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	60fb      	str	r3, [r7, #12]
        break;
 800265e:	e00a      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	09db      	lsrs	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
        break;
 8002666:	e006      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	60fb      	str	r3, [r7, #12]
        break;
 800266e:	e002      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002670:	bf00      	nop
 8002672:	e000      	b.n	8002676 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002674:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002676:	f7ff f889 	bl	800178c <HAL_GetREVID>
 800267a:	4603      	mov	r3, r0
 800267c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002680:	4293      	cmp	r3, r2
 8002682:	d815      	bhi.n	80026b0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <ADC_ConfigureBoostMode+0x208>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d908      	bls.n	800269e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800269a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800269c:	e03e      	b.n	800271c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ac:	609a      	str	r2, [r3, #8]
}
 80026ae:	e035      	b.n	800271c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <ADC_ConfigureBoostMode+0x20c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d808      	bhi.n	80026d0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026cc:	609a      	str	r2, [r3, #8]
}
 80026ce:	e025      	b.n	800271c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a1a      	ldr	r2, [pc, #104]	@ (800273c <ADC_ConfigureBoostMode+0x210>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d80a      	bhi.n	80026ee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ea:	609a      	str	r2, [r3, #8]
}
 80026ec:	e016      	b.n	800271c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <ADC_ConfigureBoostMode+0x214>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d80a      	bhi.n	800270c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	e007      	b.n	800271c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40022000 	.word	0x40022000
 8002728:	40022100 	.word	0x40022100
 800272c:	40022300 	.word	0x40022300
 8002730:	58026300 	.word	0x58026300
 8002734:	01312d00 	.word	0x01312d00
 8002738:	005f5e10 	.word	0x005f5e10
 800273c:	00bebc20 	.word	0x00bebc20
 8002740:	017d7840 	.word	0x017d7840

08002744 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e10e      	b.n	800297e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800276a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800276e:	d102      	bne.n	8002776 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	77fb      	strb	r3, [r7, #31]
 8002774:	e103      	b.n	800297e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fd3f 	bl	8001214 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80027aa:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80027b0:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80027b6:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80027bc:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002988 <HAL_COMP_Init+0x244>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d108      	bne.n	80027f4 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0210 	orr.w	r2, r2, #16
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e007      	b.n	8002804 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_COMP_Init+0xfc>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002818:	4b5c      	ldr	r3, [pc, #368]	@ (800298c <HAL_COMP_Init+0x248>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	4a5c      	ldr	r2, [pc, #368]	@ (8002990 <HAL_COMP_Init+0x24c>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002832:	e002      	b.n	800283a <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3b01      	subs	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f9      	bne.n	8002834 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a53      	ldr	r2, [pc, #332]	@ (8002994 <HAL_COMP_Init+0x250>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d102      	bne.n	8002850 <HAL_COMP_Init+0x10c>
 800284a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800284e:	e001      	b.n	8002854 <HAL_COMP_Init+0x110>
 8002850:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002854:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06d      	beq.n	800293e <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800286e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
 800287e:	e008      	b.n	8002892 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800288e:	4013      	ands	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
 80028ae:	e008      	b.n	80028c2 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028be:	4013      	ands	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80028ec:	e00a      	b.n	8002904 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028fe:	4013      	ands	r3, r2
 8002900:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002914:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002924:	e021      	b.n	800296a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002936:	4013      	ands	r3, r2
 8002938:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 800293c:	e015      	b.n	800296a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002942:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294e:	4013      	ands	r3, r2
 8002950:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002958:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002964:	4013      	ands	r3, r2
 8002966:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 800297e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	f0e8cce1 	.word	0xf0e8cce1
 800298c:	24000000 	.word	0x24000000
 8002990:	053e2d63 	.word	0x053e2d63
 8002994:	5800380c 	.word	0x5800380c

08002998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <__NVIC_SetPriorityGrouping+0x40>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <__NVIC_SetPriorityGrouping+0x40>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00
 80029dc:	05fa0000 	.word	0x05fa0000

080029e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4907      	ldr	r1, [pc, #28]	@ (8002a34 <__NVIC_EnableIRQ+0x38>)
 8002a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db0a      	blt.n	8002a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	490c      	ldr	r1, [pc, #48]	@ (8002a84 <__NVIC_SetPriority+0x4c>)
 8002a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a60:	e00a      	b.n	8002a78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4908      	ldr	r1, [pc, #32]	@ (8002a88 <__NVIC_SetPriority+0x50>)
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	761a      	strb	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000e100 	.word	0xe000e100
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	@ 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f1c3 0307 	rsb	r3, r3, #7
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf28      	it	cs
 8002aaa:	2304      	movcs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d902      	bls.n	8002abc <NVIC_EncodePriority+0x30>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	e000      	b.n	8002abe <NVIC_EncodePriority+0x32>
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	4313      	orrs	r3, r2
         );
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b04:	d301      	bcc.n	8002b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00f      	b.n	8002b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <SysTick_Config+0x40>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b12:	210f      	movs	r1, #15
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f7ff ff8e 	bl	8002a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <SysTick_Config+0x40>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b22:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <SysTick_Config+0x40>)
 8002b24:	2207      	movs	r2, #7
 8002b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff29 	bl	8002998 <__NVIC_SetPriorityGrouping>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff40 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff90 	bl	8002a8c <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5f 	bl	8002a38 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff33 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa4 	bl	8002af4 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e014      	b.n	8002bf2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	791b      	ldrb	r3, [r3, #4]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe fb61 	bl	80012a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_DAC_ConfigChannel+0x1e>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e12a      	b.n	8002e74 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	795b      	ldrb	r3, [r3, #5]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_DAC_ConfigChannel+0x2e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e124      	b.n	8002e74 <HAL_DAC_ConfigChannel+0x278>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2202      	movs	r2, #2
 8002c34:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d17a      	bne.n	8002d34 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fd99 	bl	8001774 <HAL_GetTick>
 8002c42:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d13d      	bne.n	8002cc6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c4a:	e018      	b.n	8002c7e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c4c:	f7fe fd92 	bl	8001774 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d911      	bls.n	8002c7e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c60:	4b86      	ldr	r3, [pc, #536]	@ (8002e7c <HAL_DAC_ConfigChannel+0x280>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f043 0208 	orr.w	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2203      	movs	r2, #3
 8002c78:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0fa      	b.n	8002e74 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c84:	4b7d      	ldr	r3, [pc, #500]	@ (8002e7c <HAL_DAC_ConfigChannel+0x280>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1df      	bne.n	8002c4c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	6992      	ldr	r2, [r2, #24]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c96:	e020      	b.n	8002cda <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c98:	f7fe fd6c 	bl	8001774 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d90f      	bls.n	8002cc6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0a      	bge.n	8002cc6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f043 0208 	orr.w	r2, r3, #8
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0d6      	b.n	8002e74 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	dbe3      	blt.n	8002c98 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	6992      	ldr	r2, [r2, #24]
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	ea02 0103 	and.w	r1, r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	21ff      	movs	r1, #255	@ 0xff
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	ea02 0103 	and.w	r1, r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11d      	bne.n	8002d78 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2207      	movs	r2, #7
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	e00f      	b.n	8002dc2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d102      	bne.n	8002db0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002daa:	2301      	movs	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	e008      	b.n	8002dc2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbc:	e001      	b.n	8002dc2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43da      	mvns	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6819      	ldr	r1, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	22c0      	movs	r2, #192	@ 0xc0
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002e70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	@ 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20008000 	.word	0x20008000

08002e80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7fe fc74 	bl	8001774 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e316      	b.n	80034c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a66      	ldr	r2, [pc, #408]	@ (8003038 <HAL_DMA_Init+0x1b8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d04a      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a65      	ldr	r2, [pc, #404]	@ (800303c <HAL_DMA_Init+0x1bc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d045      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a63      	ldr	r2, [pc, #396]	@ (8003040 <HAL_DMA_Init+0x1c0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a62      	ldr	r2, [pc, #392]	@ (8003044 <HAL_DMA_Init+0x1c4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03b      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	@ (8003048 <HAL_DMA_Init+0x1c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d036      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5f      	ldr	r2, [pc, #380]	@ (800304c <HAL_DMA_Init+0x1cc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d031      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5d      	ldr	r2, [pc, #372]	@ (8003050 <HAL_DMA_Init+0x1d0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02c      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a5c      	ldr	r2, [pc, #368]	@ (8003054 <HAL_DMA_Init+0x1d4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d027      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a5a      	ldr	r2, [pc, #360]	@ (8003058 <HAL_DMA_Init+0x1d8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a59      	ldr	r2, [pc, #356]	@ (800305c <HAL_DMA_Init+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a57      	ldr	r2, [pc, #348]	@ (8003060 <HAL_DMA_Init+0x1e0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a56      	ldr	r2, [pc, #344]	@ (8003064 <HAL_DMA_Init+0x1e4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a54      	ldr	r2, [pc, #336]	@ (8003068 <HAL_DMA_Init+0x1e8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a53      	ldr	r2, [pc, #332]	@ (800306c <HAL_DMA_Init+0x1ec>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a51      	ldr	r2, [pc, #324]	@ (8003070 <HAL_DMA_Init+0x1f0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Init+0xb8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a50      	ldr	r2, [pc, #320]	@ (8003074 <HAL_DMA_Init+0x1f4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_Init+0xbc>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_DMA_Init+0xbe>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 813b 	beq.w	80031ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a37      	ldr	r2, [pc, #220]	@ (8003038 <HAL_DMA_Init+0x1b8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d04a      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a36      	ldr	r2, [pc, #216]	@ (800303c <HAL_DMA_Init+0x1bc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d045      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a34      	ldr	r2, [pc, #208]	@ (8003040 <HAL_DMA_Init+0x1c0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d040      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a33      	ldr	r2, [pc, #204]	@ (8003044 <HAL_DMA_Init+0x1c4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d03b      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a31      	ldr	r2, [pc, #196]	@ (8003048 <HAL_DMA_Init+0x1c8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d036      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a30      	ldr	r2, [pc, #192]	@ (800304c <HAL_DMA_Init+0x1cc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d031      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2e      	ldr	r2, [pc, #184]	@ (8003050 <HAL_DMA_Init+0x1d0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02c      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003054 <HAL_DMA_Init+0x1d4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d027      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8003058 <HAL_DMA_Init+0x1d8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d022      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800305c <HAL_DMA_Init+0x1dc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <HAL_DMA_Init+0x1e0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d018      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <HAL_DMA_Init+0x1e4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a25      	ldr	r2, [pc, #148]	@ (8003068 <HAL_DMA_Init+0x1e8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a24      	ldr	r2, [pc, #144]	@ (800306c <HAL_DMA_Init+0x1ec>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <HAL_DMA_Init+0x1f0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_DMA_Init+0x174>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a21      	ldr	r2, [pc, #132]	@ (8003074 <HAL_DMA_Init+0x1f4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <HAL_DMA_Init+0x186>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e007      	b.n	8003016 <HAL_DMA_Init+0x196>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003016:	e02f      	b.n	8003078 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003018:	f7fe fbac 	bl	8001774 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b05      	cmp	r3, #5
 8003024:	d928      	bls.n	8003078 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e246      	b.n	80034c6 <HAL_DMA_Init+0x646>
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1c8      	bne.n	8003018 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4b83      	ldr	r3, [pc, #524]	@ (80032a0 <HAL_DMA_Init+0x420>)
 8003092:	4013      	ands	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800309e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d107      	bne.n	80030dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	4313      	orrs	r3, r2
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80030dc:	4b71      	ldr	r3, [pc, #452]	@ (80032a4 <HAL_DMA_Init+0x424>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b71      	ldr	r3, [pc, #452]	@ (80032a8 <HAL_DMA_Init+0x428>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030e8:	d328      	bcc.n	800313c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b28      	cmp	r3, #40	@ 0x28
 80030f0:	d903      	bls.n	80030fa <HAL_DMA_Init+0x27a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80030f8:	d917      	bls.n	800312a <HAL_DMA_Init+0x2aa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003100:	d903      	bls.n	800310a <HAL_DMA_Init+0x28a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b42      	cmp	r3, #66	@ 0x42
 8003108:	d90f      	bls.n	800312a <HAL_DMA_Init+0x2aa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b46      	cmp	r3, #70	@ 0x46
 8003110:	d903      	bls.n	800311a <HAL_DMA_Init+0x29a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b48      	cmp	r3, #72	@ 0x48
 8003118:	d907      	bls.n	800312a <HAL_DMA_Init+0x2aa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003120:	d905      	bls.n	800312e <HAL_DMA_Init+0x2ae>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b52      	cmp	r3, #82	@ 0x52
 8003128:	d801      	bhi.n	800312e <HAL_DMA_Init+0x2ae>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_DMA_Init+0x2b0>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	2b04      	cmp	r3, #4
 8003164:	d117      	bne.n	8003196 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f001 f9b9 	bl	80044f0 <DMA_CheckFifoParam>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2240      	movs	r2, #64	@ 0x40
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e197      	b.n	80034c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f001 f8f4 	bl	800438c <DMA_CalcBaseAndBitshift>
 80031a4:	4603      	mov	r3, r0
 80031a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	223f      	movs	r2, #63	@ 0x3f
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e0cd      	b.n	8003356 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3b      	ldr	r2, [pc, #236]	@ (80032ac <HAL_DMA_Init+0x42c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <HAL_DMA_Init+0x38a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a39      	ldr	r2, [pc, #228]	@ (80032b0 <HAL_DMA_Init+0x430>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_Init+0x38a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a38      	ldr	r2, [pc, #224]	@ (80032b4 <HAL_DMA_Init+0x434>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d018      	beq.n	800320a <HAL_DMA_Init+0x38a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a36      	ldr	r2, [pc, #216]	@ (80032b8 <HAL_DMA_Init+0x438>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_DMA_Init+0x38a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a35      	ldr	r2, [pc, #212]	@ (80032bc <HAL_DMA_Init+0x43c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_Init+0x38a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a33      	ldr	r2, [pc, #204]	@ (80032c0 <HAL_DMA_Init+0x440>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_DMA_Init+0x38a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a32      	ldr	r2, [pc, #200]	@ (80032c4 <HAL_DMA_Init+0x444>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_Init+0x38a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a30      	ldr	r2, [pc, #192]	@ (80032c8 <HAL_DMA_Init+0x448>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_DMA_Init+0x38e>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_DMA_Init+0x390>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8097 	beq.w	8003344 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a24      	ldr	r2, [pc, #144]	@ (80032ac <HAL_DMA_Init+0x42c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d021      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <HAL_DMA_Init+0x430>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01c      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a21      	ldr	r2, [pc, #132]	@ (80032b4 <HAL_DMA_Init+0x434>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d017      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1f      	ldr	r2, [pc, #124]	@ (80032b8 <HAL_DMA_Init+0x438>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d012      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <HAL_DMA_Init+0x43c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00d      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <HAL_DMA_Init+0x440>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d008      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_DMA_Init+0x444>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <HAL_DMA_Init+0x3e4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a19      	ldr	r2, [pc, #100]	@ (80032c8 <HAL_DMA_Init+0x448>)
 8003262:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <HAL_DMA_Init+0x44c>)
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d021      	beq.n	80032d0 <HAL_DMA_Init+0x450>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b80      	cmp	r3, #128	@ 0x80
 8003292:	d102      	bne.n	800329a <HAL_DMA_Init+0x41a>
 8003294:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003298:	e01b      	b.n	80032d2 <HAL_DMA_Init+0x452>
 800329a:	2300      	movs	r3, #0
 800329c:	e019      	b.n	80032d2 <HAL_DMA_Init+0x452>
 800329e:	bf00      	nop
 80032a0:	fe10803f 	.word	0xfe10803f
 80032a4:	5c001000 	.word	0x5c001000
 80032a8:	ffff0000 	.word	0xffff0000
 80032ac:	58025408 	.word	0x58025408
 80032b0:	5802541c 	.word	0x5802541c
 80032b4:	58025430 	.word	0x58025430
 80032b8:	58025444 	.word	0x58025444
 80032bc:	58025458 	.word	0x58025458
 80032c0:	5802546c 	.word	0x5802546c
 80032c4:	58025480 	.word	0x58025480
 80032c8:	58025494 	.word	0x58025494
 80032cc:	fffe000f 	.word	0xfffe000f
 80032d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003300:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b6e      	ldr	r3, [pc, #440]	@ (80034d0 <HAL_DMA_Init+0x650>)
 8003318:	4413      	add	r3, r2
 800331a:	4a6e      	ldr	r2, [pc, #440]	@ (80034d4 <HAL_DMA_Init+0x654>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	009a      	lsls	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f001 f82f 	bl	800438c <DMA_CalcBaseAndBitshift>
 800332e:	4603      	mov	r3, r0
 8003330:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2201      	movs	r2, #1
 800333c:	409a      	lsls	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e008      	b.n	8003356 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2240      	movs	r2, #64	@ 0x40
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0b7      	b.n	80034c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5f      	ldr	r2, [pc, #380]	@ (80034d8 <HAL_DMA_Init+0x658>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d072      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5d      	ldr	r2, [pc, #372]	@ (80034dc <HAL_DMA_Init+0x65c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d06d      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5c      	ldr	r2, [pc, #368]	@ (80034e0 <HAL_DMA_Init+0x660>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d068      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5a      	ldr	r2, [pc, #360]	@ (80034e4 <HAL_DMA_Init+0x664>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d063      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a59      	ldr	r2, [pc, #356]	@ (80034e8 <HAL_DMA_Init+0x668>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d05e      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a57      	ldr	r2, [pc, #348]	@ (80034ec <HAL_DMA_Init+0x66c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d059      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a56      	ldr	r2, [pc, #344]	@ (80034f0 <HAL_DMA_Init+0x670>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d054      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a54      	ldr	r2, [pc, #336]	@ (80034f4 <HAL_DMA_Init+0x674>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04f      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a53      	ldr	r2, [pc, #332]	@ (80034f8 <HAL_DMA_Init+0x678>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d04a      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a51      	ldr	r2, [pc, #324]	@ (80034fc <HAL_DMA_Init+0x67c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d045      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a50      	ldr	r2, [pc, #320]	@ (8003500 <HAL_DMA_Init+0x680>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d040      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003504 <HAL_DMA_Init+0x684>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d03b      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003508 <HAL_DMA_Init+0x688>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d036      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4b      	ldr	r2, [pc, #300]	@ (800350c <HAL_DMA_Init+0x68c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d031      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_DMA_Init+0x690>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d02c      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a48      	ldr	r2, [pc, #288]	@ (8003514 <HAL_DMA_Init+0x694>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d027      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a47      	ldr	r2, [pc, #284]	@ (8003518 <HAL_DMA_Init+0x698>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a45      	ldr	r2, [pc, #276]	@ (800351c <HAL_DMA_Init+0x69c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01d      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a44      	ldr	r2, [pc, #272]	@ (8003520 <HAL_DMA_Init+0x6a0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d018      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a42      	ldr	r2, [pc, #264]	@ (8003524 <HAL_DMA_Init+0x6a4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a41      	ldr	r2, [pc, #260]	@ (8003528 <HAL_DMA_Init+0x6a8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3f      	ldr	r2, [pc, #252]	@ (800352c <HAL_DMA_Init+0x6ac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3e      	ldr	r2, [pc, #248]	@ (8003530 <HAL_DMA_Init+0x6b0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_DMA_Init+0x5c6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a3c      	ldr	r2, [pc, #240]	@ (8003534 <HAL_DMA_Init+0x6b4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_DMA_Init+0x5ca>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_DMA_Init+0x5cc>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d032      	beq.n	80034b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f001 f8c9 	bl	80045e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b80      	cmp	r3, #128	@ 0x80
 800345c:	d102      	bne.n	8003464 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003478:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_DMA_Init+0x624>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d80c      	bhi.n	80034a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 f946 	bl	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	e008      	b.n	80034b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	a7fdabf8 	.word	0xa7fdabf8
 80034d4:	cccccccd 	.word	0xcccccccd
 80034d8:	40020010 	.word	0x40020010
 80034dc:	40020028 	.word	0x40020028
 80034e0:	40020040 	.word	0x40020040
 80034e4:	40020058 	.word	0x40020058
 80034e8:	40020070 	.word	0x40020070
 80034ec:	40020088 	.word	0x40020088
 80034f0:	400200a0 	.word	0x400200a0
 80034f4:	400200b8 	.word	0x400200b8
 80034f8:	40020410 	.word	0x40020410
 80034fc:	40020428 	.word	0x40020428
 8003500:	40020440 	.word	0x40020440
 8003504:	40020458 	.word	0x40020458
 8003508:	40020470 	.word	0x40020470
 800350c:	40020488 	.word	0x40020488
 8003510:	400204a0 	.word	0x400204a0
 8003514:	400204b8 	.word	0x400204b8
 8003518:	58025408 	.word	0x58025408
 800351c:	5802541c 	.word	0x5802541c
 8003520:	58025430 	.word	0x58025430
 8003524:	58025444 	.word	0x58025444
 8003528:	58025458 	.word	0x58025458
 800352c:	5802546c 	.word	0x5802546c
 8003530:	58025480 	.word	0x58025480
 8003534:	58025494 	.word	0x58025494

08003538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	@ 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003544:	4b67      	ldr	r3, [pc, #412]	@ (80036e4 <HAL_DMA_IRQHandler+0x1ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a67      	ldr	r2, [pc, #412]	@ (80036e8 <HAL_DMA_IRQHandler+0x1b0>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5f      	ldr	r2, [pc, #380]	@ (80036ec <HAL_DMA_IRQHandler+0x1b4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5d      	ldr	r2, [pc, #372]	@ (80036f0 <HAL_DMA_IRQHandler+0x1b8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5c      	ldr	r2, [pc, #368]	@ (80036f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5a      	ldr	r2, [pc, #360]	@ (80036f8 <HAL_DMA_IRQHandler+0x1c0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a59      	ldr	r2, [pc, #356]	@ (80036fc <HAL_DMA_IRQHandler+0x1c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a57      	ldr	r2, [pc, #348]	@ (8003700 <HAL_DMA_IRQHandler+0x1c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_DMA_IRQHandler+0x1cc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a54      	ldr	r2, [pc, #336]	@ (8003708 <HAL_DMA_IRQHandler+0x1d0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a53      	ldr	r2, [pc, #332]	@ (800370c <HAL_DMA_IRQHandler+0x1d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a51      	ldr	r2, [pc, #324]	@ (8003710 <HAL_DMA_IRQHandler+0x1d8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a50      	ldr	r2, [pc, #320]	@ (8003714 <HAL_DMA_IRQHandler+0x1dc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003718 <HAL_DMA_IRQHandler+0x1e0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a4d      	ldr	r2, [pc, #308]	@ (800371c <HAL_DMA_IRQHandler+0x1e4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_DMA_IRQHandler+0x1e8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_DMA_IRQHandler+0x1ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_IRQHandler+0xd2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a48      	ldr	r2, [pc, #288]	@ (8003728 <HAL_DMA_IRQHandler+0x1f0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_DMA_IRQHandler+0xd6>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_DMA_IRQHandler+0xd8>
 800360e:	2300      	movs	r3, #0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 842b 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a2 	beq.w	8003770 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2e      	ldr	r2, [pc, #184]	@ (80036ec <HAL_DMA_IRQHandler+0x1b4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2d      	ldr	r2, [pc, #180]	@ (80036f0 <HAL_DMA_IRQHandler+0x1b8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a28      	ldr	r2, [pc, #160]	@ (80036fc <HAL_DMA_IRQHandler+0x1c4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a27      	ldr	r2, [pc, #156]	@ (8003700 <HAL_DMA_IRQHandler+0x1c8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a25      	ldr	r2, [pc, #148]	@ (8003704 <HAL_DMA_IRQHandler+0x1cc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a24      	ldr	r2, [pc, #144]	@ (8003708 <HAL_DMA_IRQHandler+0x1d0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a22      	ldr	r2, [pc, #136]	@ (800370c <HAL_DMA_IRQHandler+0x1d4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a21      	ldr	r2, [pc, #132]	@ (8003710 <HAL_DMA_IRQHandler+0x1d8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <HAL_DMA_IRQHandler+0x1dc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1e      	ldr	r2, [pc, #120]	@ (8003718 <HAL_DMA_IRQHandler+0x1e0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	@ (800371c <HAL_DMA_IRQHandler+0x1e4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003720 <HAL_DMA_IRQHandler+0x1e8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	@ (8003724 <HAL_DMA_IRQHandler+0x1ec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_IRQHandler+0x194>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <HAL_DMA_IRQHandler+0x1f0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d12f      	bne.n	800372c <HAL_DMA_IRQHandler+0x1f4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e02e      	b.n	8003740 <HAL_DMA_IRQHandler+0x208>
 80036e2:	bf00      	nop
 80036e4:	24000000 	.word	0x24000000
 80036e8:	1b4e81b5 	.word	0x1b4e81b5
 80036ec:	40020010 	.word	0x40020010
 80036f0:	40020028 	.word	0x40020028
 80036f4:	40020040 	.word	0x40020040
 80036f8:	40020058 	.word	0x40020058
 80036fc:	40020070 	.word	0x40020070
 8003700:	40020088 	.word	0x40020088
 8003704:	400200a0 	.word	0x400200a0
 8003708:	400200b8 	.word	0x400200b8
 800370c:	40020410 	.word	0x40020410
 8003710:	40020428 	.word	0x40020428
 8003714:	40020440 	.word	0x40020440
 8003718:	40020458 	.word	0x40020458
 800371c:	40020470 	.word	0x40020470
 8003720:	40020488 	.word	0x40020488
 8003724:	400204a0 	.word	0x400204a0
 8003728:	400204b8 	.word	0x400204b8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06e      	beq.n	8003864 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a69      	ldr	r2, [pc, #420]	@ (8003930 <HAL_DMA_IRQHandler+0x3f8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04a      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a67      	ldr	r2, [pc, #412]	@ (8003934 <HAL_DMA_IRQHandler+0x3fc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d045      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a66      	ldr	r2, [pc, #408]	@ (8003938 <HAL_DMA_IRQHandler+0x400>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d040      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a64      	ldr	r2, [pc, #400]	@ (800393c <HAL_DMA_IRQHandler+0x404>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d03b      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a63      	ldr	r2, [pc, #396]	@ (8003940 <HAL_DMA_IRQHandler+0x408>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d036      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a61      	ldr	r2, [pc, #388]	@ (8003944 <HAL_DMA_IRQHandler+0x40c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a60      	ldr	r2, [pc, #384]	@ (8003948 <HAL_DMA_IRQHandler+0x410>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d02c      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5e      	ldr	r2, [pc, #376]	@ (800394c <HAL_DMA_IRQHandler+0x414>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d027      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5d      	ldr	r2, [pc, #372]	@ (8003950 <HAL_DMA_IRQHandler+0x418>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5b      	ldr	r2, [pc, #364]	@ (8003954 <HAL_DMA_IRQHandler+0x41c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003958 <HAL_DMA_IRQHandler+0x420>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a58      	ldr	r2, [pc, #352]	@ (800395c <HAL_DMA_IRQHandler+0x424>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a57      	ldr	r2, [pc, #348]	@ (8003960 <HAL_DMA_IRQHandler+0x428>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a55      	ldr	r2, [pc, #340]	@ (8003964 <HAL_DMA_IRQHandler+0x42c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a54      	ldr	r2, [pc, #336]	@ (8003968 <HAL_DMA_IRQHandler+0x430>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_IRQHandler+0x2ee>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a52      	ldr	r2, [pc, #328]	@ (800396c <HAL_DMA_IRQHandler+0x434>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10a      	bne.n	800383c <HAL_DMA_IRQHandler+0x304>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e003      	b.n	8003844 <HAL_DMA_IRQHandler+0x30c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385c:	f043 0202 	orr.w	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2204      	movs	r2, #4
 800386e:	409a      	lsls	r2, r3
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 808f 	beq.w	8003998 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2c      	ldr	r2, [pc, #176]	@ (8003930 <HAL_DMA_IRQHandler+0x3f8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2a      	ldr	r2, [pc, #168]	@ (8003934 <HAL_DMA_IRQHandler+0x3fc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <HAL_DMA_IRQHandler+0x400>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a27      	ldr	r2, [pc, #156]	@ (800393c <HAL_DMA_IRQHandler+0x404>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a26      	ldr	r2, [pc, #152]	@ (8003940 <HAL_DMA_IRQHandler+0x408>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a24      	ldr	r2, [pc, #144]	@ (8003944 <HAL_DMA_IRQHandler+0x40c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <HAL_DMA_IRQHandler+0x410>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a21      	ldr	r2, [pc, #132]	@ (800394c <HAL_DMA_IRQHandler+0x414>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a20      	ldr	r2, [pc, #128]	@ (8003950 <HAL_DMA_IRQHandler+0x418>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_DMA_IRQHandler+0x41c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <HAL_DMA_IRQHandler+0x420>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_DMA_IRQHandler+0x424>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003960 <HAL_DMA_IRQHandler+0x428>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_DMA_IRQHandler+0x42c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <HAL_DMA_IRQHandler+0x430>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_DMA_IRQHandler+0x3e2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a15      	ldr	r2, [pc, #84]	@ (800396c <HAL_DMA_IRQHandler+0x434>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d12a      	bne.n	8003970 <HAL_DMA_IRQHandler+0x438>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e023      	b.n	8003978 <HAL_DMA_IRQHandler+0x440>
 8003930:	40020010 	.word	0x40020010
 8003934:	40020028 	.word	0x40020028
 8003938:	40020040 	.word	0x40020040
 800393c:	40020058 	.word	0x40020058
 8003940:	40020070 	.word	0x40020070
 8003944:	40020088 	.word	0x40020088
 8003948:	400200a0 	.word	0x400200a0
 800394c:	400200b8 	.word	0x400200b8
 8003950:	40020410 	.word	0x40020410
 8003954:	40020428 	.word	0x40020428
 8003958:	40020440 	.word	0x40020440
 800395c:	40020458 	.word	0x40020458
 8003960:	40020470 	.word	0x40020470
 8003964:	40020488 	.word	0x40020488
 8003968:	400204a0 	.word	0x400204a0
 800396c:	400204b8 	.word	0x400204b8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2204      	movs	r2, #4
 8003986:	409a      	lsls	r2, r3
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2210      	movs	r2, #16
 80039a2:	409a      	lsls	r2, r3
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a6 	beq.w	8003afa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a85      	ldr	r2, [pc, #532]	@ (8003bc8 <HAL_DMA_IRQHandler+0x690>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d04a      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a83      	ldr	r2, [pc, #524]	@ (8003bcc <HAL_DMA_IRQHandler+0x694>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d045      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a82      	ldr	r2, [pc, #520]	@ (8003bd0 <HAL_DMA_IRQHandler+0x698>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a80      	ldr	r2, [pc, #512]	@ (8003bd4 <HAL_DMA_IRQHandler+0x69c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03b      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd8 <HAL_DMA_IRQHandler+0x6a0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d036      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7d      	ldr	r2, [pc, #500]	@ (8003bdc <HAL_DMA_IRQHandler+0x6a4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d031      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7c      	ldr	r2, [pc, #496]	@ (8003be0 <HAL_DMA_IRQHandler+0x6a8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d02c      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7a      	ldr	r2, [pc, #488]	@ (8003be4 <HAL_DMA_IRQHandler+0x6ac>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d027      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a79      	ldr	r2, [pc, #484]	@ (8003be8 <HAL_DMA_IRQHandler+0x6b0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a77      	ldr	r2, [pc, #476]	@ (8003bec <HAL_DMA_IRQHandler+0x6b4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a76      	ldr	r2, [pc, #472]	@ (8003bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a74      	ldr	r2, [pc, #464]	@ (8003bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a73      	ldr	r2, [pc, #460]	@ (8003bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a71      	ldr	r2, [pc, #452]	@ (8003bfc <HAL_DMA_IRQHandler+0x6c4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a70      	ldr	r2, [pc, #448]	@ (8003c00 <HAL_DMA_IRQHandler+0x6c8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x516>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6e      	ldr	r2, [pc, #440]	@ (8003c04 <HAL_DMA_IRQHandler+0x6cc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10a      	bne.n	8003a64 <HAL_DMA_IRQHandler+0x52c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e009      	b.n	8003a78 <HAL_DMA_IRQHandler+0x540>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d03e      	beq.n	8003afa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2210      	movs	r2, #16
 8003a86:	409a      	lsls	r2, r3
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d018      	beq.n	8003acc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d108      	bne.n	8003aba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d024      	beq.n	8003afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
 8003ab8:	e01f      	b.n	8003afa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01b      	beq.n	8003afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
 8003aca:	e016      	b.n	8003afa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0208 	bic.w	r2, r2, #8
 8003ae8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2220      	movs	r2, #32
 8003b04:	409a      	lsls	r2, r3
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8110 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <HAL_DMA_IRQHandler+0x690>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d04a      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <HAL_DMA_IRQHandler+0x694>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d045      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <HAL_DMA_IRQHandler+0x698>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d040      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a28      	ldr	r2, [pc, #160]	@ (8003bd4 <HAL_DMA_IRQHandler+0x69c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d03b      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a26      	ldr	r2, [pc, #152]	@ (8003bd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d036      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a25      	ldr	r2, [pc, #148]	@ (8003bdc <HAL_DMA_IRQHandler+0x6a4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d031      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a23      	ldr	r2, [pc, #140]	@ (8003be0 <HAL_DMA_IRQHandler+0x6a8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02c      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a22      	ldr	r2, [pc, #136]	@ (8003be4 <HAL_DMA_IRQHandler+0x6ac>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d027      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a20      	ldr	r2, [pc, #128]	@ (8003be8 <HAL_DMA_IRQHandler+0x6b0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d022      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <HAL_DMA_IRQHandler+0x6b4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01d      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d018      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a19      	ldr	r2, [pc, #100]	@ (8003bfc <HAL_DMA_IRQHandler+0x6c4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a17      	ldr	r2, [pc, #92]	@ (8003c00 <HAL_DMA_IRQHandler+0x6c8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x678>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <HAL_DMA_IRQHandler+0x6cc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d12b      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x6d0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e02a      	b.n	8003c1c <HAL_DMA_IRQHandler+0x6e4>
 8003bc6:	bf00      	nop
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8087 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d139      	bne.n	8003cb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0216 	bic.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x736>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0208 	bic.w	r2, r2, #8
 8003c7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	223f      	movs	r2, #63	@ 0x3f
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 834a 	beq.w	800433c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
          }
          return;
 8003cb0:	e344      	b.n	800433c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02c      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
 8003cde:	e027      	b.n	8003d30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
 8003cf0:	e01e      	b.n	8003d30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10f      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0210 	bic.w	r2, r2, #16
 8003d0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8306 	beq.w	8004346 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8088 	beq.w	8003e58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <HAL_DMA_IRQHandler+0xa08>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d04a      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <HAL_DMA_IRQHandler+0xa0c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d045      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <HAL_DMA_IRQHandler+0xa10>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d040      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_DMA_IRQHandler+0xa14>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d03b      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <HAL_DMA_IRQHandler+0xa18>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d036      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <HAL_DMA_IRQHandler+0xa1c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d031      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <HAL_DMA_IRQHandler+0xa20>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02c      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <HAL_DMA_IRQHandler+0xa24>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d027      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_DMA_IRQHandler+0xa28>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <HAL_DMA_IRQHandler+0xa2c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d01d      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <HAL_DMA_IRQHandler+0xa30>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f6c <HAL_DMA_IRQHandler+0xa34>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <HAL_DMA_IRQHandler+0xa38>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a67      	ldr	r2, [pc, #412]	@ (8003f74 <HAL_DMA_IRQHandler+0xa3c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <HAL_DMA_IRQHandler+0xa40>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x8b8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a64      	ldr	r2, [pc, #400]	@ (8003f7c <HAL_DMA_IRQHandler+0xa44>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <HAL_DMA_IRQHandler+0x8ca>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e007      	b.n	8003e12 <HAL_DMA_IRQHandler+0x8da>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d307      	bcc.n	8003e2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f2      	bne.n	8003e12 <HAL_DMA_IRQHandler+0x8da>
 8003e2c:	e000      	b.n	8003e30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003e46:	e003      	b.n	8003e50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8272 	beq.w	8004346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	4798      	blx	r3
 8003e6a:	e26c      	b.n	8004346 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a43      	ldr	r2, [pc, #268]	@ (8003f80 <HAL_DMA_IRQHandler+0xa48>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d022      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a42      	ldr	r2, [pc, #264]	@ (8003f84 <HAL_DMA_IRQHandler+0xa4c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d01d      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a40      	ldr	r2, [pc, #256]	@ (8003f88 <HAL_DMA_IRQHandler+0xa50>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d018      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f8c <HAL_DMA_IRQHandler+0xa54>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3d      	ldr	r2, [pc, #244]	@ (8003f90 <HAL_DMA_IRQHandler+0xa58>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8003f94 <HAL_DMA_IRQHandler+0xa5c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3a      	ldr	r2, [pc, #232]	@ (8003f98 <HAL_DMA_IRQHandler+0xa60>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x984>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a39      	ldr	r2, [pc, #228]	@ (8003f9c <HAL_DMA_IRQHandler+0xa64>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x988>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x98a>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 823f 	beq.w	8004346 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2204      	movs	r2, #4
 8003eda:	409a      	lsls	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80cd 	beq.w	8004080 <HAL_DMA_IRQHandler+0xb48>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80c7 	beq.w	8004080 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2204      	movs	r2, #4
 8003efc:	409a      	lsls	r2, r3
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d049      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8210 	beq.w	8004340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f28:	e20a      	b.n	8004340 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8206 	beq.w	8004340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f3c:	e200      	b.n	8004340 <HAL_DMA_IRQHandler+0xe08>
 8003f3e:	bf00      	nop
 8003f40:	40020010 	.word	0x40020010
 8003f44:	40020028 	.word	0x40020028
 8003f48:	40020040 	.word	0x40020040
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	40020070 	.word	0x40020070
 8003f54:	40020088 	.word	0x40020088
 8003f58:	400200a0 	.word	0x400200a0
 8003f5c:	400200b8 	.word	0x400200b8
 8003f60:	40020410 	.word	0x40020410
 8003f64:	40020428 	.word	0x40020428
 8003f68:	40020440 	.word	0x40020440
 8003f6c:	40020458 	.word	0x40020458
 8003f70:	40020470 	.word	0x40020470
 8003f74:	40020488 	.word	0x40020488
 8003f78:	400204a0 	.word	0x400204a0
 8003f7c:	400204b8 	.word	0x400204b8
 8003f80:	58025408 	.word	0x58025408
 8003f84:	5802541c 	.word	0x5802541c
 8003f88:	58025430 	.word	0x58025430
 8003f8c:	58025444 	.word	0x58025444
 8003f90:	58025458 	.word	0x58025458
 8003f94:	5802546c 	.word	0x5802546c
 8003f98:	58025480 	.word	0x58025480
 8003f9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d160      	bne.n	800406c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7f      	ldr	r2, [pc, #508]	@ (80041ac <HAL_DMA_IRQHandler+0xc74>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d04a      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80041b0 <HAL_DMA_IRQHandler+0xc78>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d045      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80041b4 <HAL_DMA_IRQHandler+0xc7c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d040      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80041b8 <HAL_DMA_IRQHandler+0xc80>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d03b      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a79      	ldr	r2, [pc, #484]	@ (80041bc <HAL_DMA_IRQHandler+0xc84>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d036      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a77      	ldr	r2, [pc, #476]	@ (80041c0 <HAL_DMA_IRQHandler+0xc88>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d031      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a76      	ldr	r2, [pc, #472]	@ (80041c4 <HAL_DMA_IRQHandler+0xc8c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d02c      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a74      	ldr	r2, [pc, #464]	@ (80041c8 <HAL_DMA_IRQHandler+0xc90>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d027      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a73      	ldr	r2, [pc, #460]	@ (80041cc <HAL_DMA_IRQHandler+0xc94>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a71      	ldr	r2, [pc, #452]	@ (80041d0 <HAL_DMA_IRQHandler+0xc98>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01d      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a70      	ldr	r2, [pc, #448]	@ (80041d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6e      	ldr	r2, [pc, #440]	@ (80041d8 <HAL_DMA_IRQHandler+0xca0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6d      	ldr	r2, [pc, #436]	@ (80041dc <HAL_DMA_IRQHandler+0xca4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6b      	ldr	r2, [pc, #428]	@ (80041e0 <HAL_DMA_IRQHandler+0xca8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6a      	ldr	r2, [pc, #424]	@ (80041e4 <HAL_DMA_IRQHandler+0xcac>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_DMA_IRQHandler+0xb12>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a68      	ldr	r2, [pc, #416]	@ (80041e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d108      	bne.n	800405c <HAL_DMA_IRQHandler+0xb24>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0208 	bic.w	r2, r2, #8
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e007      	b.n	800406c <HAL_DMA_IRQHandler+0xb34>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0204 	bic.w	r2, r2, #4
 800406a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8165 	beq.w	8004340 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800407e:	e15f      	b.n	8004340 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2202      	movs	r2, #2
 800408a:	409a      	lsls	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80c5 	beq.w	8004220 <HAL_DMA_IRQHandler+0xce8>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80bf 	beq.w	8004220 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2202      	movs	r2, #2
 80040ac:	409a      	lsls	r2, r3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d018      	beq.n	80040ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 813a 	beq.w	8004344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d8:	e134      	b.n	8004344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8130 	beq.w	8004344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ec:	e12a      	b.n	8004344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 8089 	bne.w	800420c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2b      	ldr	r2, [pc, #172]	@ (80041ac <HAL_DMA_IRQHandler+0xc74>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04a      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a29      	ldr	r2, [pc, #164]	@ (80041b0 <HAL_DMA_IRQHandler+0xc78>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d045      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a28      	ldr	r2, [pc, #160]	@ (80041b4 <HAL_DMA_IRQHandler+0xc7c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d040      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <HAL_DMA_IRQHandler+0xc80>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d03b      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a25      	ldr	r2, [pc, #148]	@ (80041bc <HAL_DMA_IRQHandler+0xc84>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d036      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <HAL_DMA_IRQHandler+0xc88>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d031      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a22      	ldr	r2, [pc, #136]	@ (80041c4 <HAL_DMA_IRQHandler+0xc8c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d02c      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a20      	ldr	r2, [pc, #128]	@ (80041c8 <HAL_DMA_IRQHandler+0xc90>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d027      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1f      	ldr	r2, [pc, #124]	@ (80041cc <HAL_DMA_IRQHandler+0xc94>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <HAL_DMA_IRQHandler+0xc98>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01d      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1c      	ldr	r2, [pc, #112]	@ (80041d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <HAL_DMA_IRQHandler+0xca0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a19      	ldr	r2, [pc, #100]	@ (80041dc <HAL_DMA_IRQHandler+0xca4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a17      	ldr	r2, [pc, #92]	@ (80041e0 <HAL_DMA_IRQHandler+0xca8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <HAL_DMA_IRQHandler+0xcac>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_DMA_IRQHandler+0xc62>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a14      	ldr	r2, [pc, #80]	@ (80041e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d128      	bne.n	80041ec <HAL_DMA_IRQHandler+0xcb4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0214 	bic.w	r2, r2, #20
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e027      	b.n	80041fc <HAL_DMA_IRQHandler+0xcc4>
 80041ac:	40020010 	.word	0x40020010
 80041b0:	40020028 	.word	0x40020028
 80041b4:	40020040 	.word	0x40020040
 80041b8:	40020058 	.word	0x40020058
 80041bc:	40020070 	.word	0x40020070
 80041c0:	40020088 	.word	0x40020088
 80041c4:	400200a0 	.word	0x400200a0
 80041c8:	400200b8 	.word	0x400200b8
 80041cc:	40020410 	.word	0x40020410
 80041d0:	40020428 	.word	0x40020428
 80041d4:	40020440 	.word	0x40020440
 80041d8:	40020458 	.word	0x40020458
 80041dc:	40020470 	.word	0x40020470
 80041e0:	40020488 	.word	0x40020488
 80041e4:	400204a0 	.word	0x400204a0
 80041e8:	400204b8 	.word	0x400204b8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 020a 	bic.w	r2, r2, #10
 80041fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8097 	beq.w	8004344 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800421e:	e091      	b.n	8004344 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2208      	movs	r2, #8
 800422a:	409a      	lsls	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8088 	beq.w	8004346 <HAL_DMA_IRQHandler+0xe0e>
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8082 	beq.w	8004346 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a41      	ldr	r2, [pc, #260]	@ (800434c <HAL_DMA_IRQHandler+0xe14>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d04a      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3f      	ldr	r2, [pc, #252]	@ (8004350 <HAL_DMA_IRQHandler+0xe18>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d045      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3e      	ldr	r2, [pc, #248]	@ (8004354 <HAL_DMA_IRQHandler+0xe1c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d040      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a3c      	ldr	r2, [pc, #240]	@ (8004358 <HAL_DMA_IRQHandler+0xe20>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d03b      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3b      	ldr	r2, [pc, #236]	@ (800435c <HAL_DMA_IRQHandler+0xe24>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d036      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a39      	ldr	r2, [pc, #228]	@ (8004360 <HAL_DMA_IRQHandler+0xe28>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d031      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a38      	ldr	r2, [pc, #224]	@ (8004364 <HAL_DMA_IRQHandler+0xe2c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d02c      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a36      	ldr	r2, [pc, #216]	@ (8004368 <HAL_DMA_IRQHandler+0xe30>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d027      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a35      	ldr	r2, [pc, #212]	@ (800436c <HAL_DMA_IRQHandler+0xe34>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d022      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a33      	ldr	r2, [pc, #204]	@ (8004370 <HAL_DMA_IRQHandler+0xe38>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01d      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a32      	ldr	r2, [pc, #200]	@ (8004374 <HAL_DMA_IRQHandler+0xe3c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a30      	ldr	r2, [pc, #192]	@ (8004378 <HAL_DMA_IRQHandler+0xe40>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2f      	ldr	r2, [pc, #188]	@ (800437c <HAL_DMA_IRQHandler+0xe44>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004380 <HAL_DMA_IRQHandler+0xe48>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004384 <HAL_DMA_IRQHandler+0xe4c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_IRQHandler+0xdaa>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004388 <HAL_DMA_IRQHandler+0xe50>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <HAL_DMA_IRQHandler+0xdbc>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 021c 	bic.w	r2, r2, #28
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e007      	b.n	8004304 <HAL_DMA_IRQHandler+0xdcc>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 020e 	bic.w	r2, r2, #14
 8004302:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2201      	movs	r2, #1
 800430e:	409a      	lsls	r2, r3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
 800433a:	e004      	b.n	8004346 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800433c:	bf00      	nop
 800433e:	e002      	b.n	8004346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004340:	bf00      	nop
 8004342:	e000      	b.n	8004346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004344:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004346:	3728      	adds	r7, #40	@ 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8

0800438c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a42      	ldr	r2, [pc, #264]	@ (80044a4 <DMA_CalcBaseAndBitshift+0x118>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04a      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a41      	ldr	r2, [pc, #260]	@ (80044a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d045      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3f      	ldr	r2, [pc, #252]	@ (80044ac <DMA_CalcBaseAndBitshift+0x120>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d040      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3e      	ldr	r2, [pc, #248]	@ (80044b0 <DMA_CalcBaseAndBitshift+0x124>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d03b      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3c      	ldr	r2, [pc, #240]	@ (80044b4 <DMA_CalcBaseAndBitshift+0x128>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d036      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3b      	ldr	r2, [pc, #236]	@ (80044b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d031      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a39      	ldr	r2, [pc, #228]	@ (80044bc <DMA_CalcBaseAndBitshift+0x130>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d02c      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a38      	ldr	r2, [pc, #224]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x134>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d027      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a36      	ldr	r2, [pc, #216]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x138>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01d      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a33      	ldr	r2, [pc, #204]	@ (80044cc <DMA_CalcBaseAndBitshift+0x140>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a32      	ldr	r2, [pc, #200]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a30      	ldr	r2, [pc, #192]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2d      	ldr	r2, [pc, #180]	@ (80044dc <DMA_CalcBaseAndBitshift+0x150>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <DMA_CalcBaseAndBitshift+0xa8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2c      	ldr	r2, [pc, #176]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <DMA_CalcBaseAndBitshift+0xac>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <DMA_CalcBaseAndBitshift+0xae>
 8004438:	2300      	movs	r3, #0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d024      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3b10      	subs	r3, #16
 8004446:	4a27      	ldr	r2, [pc, #156]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	4a24      	ldr	r2, [pc, #144]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d908      	bls.n	8004478 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	4b1f      	ldr	r3, [pc, #124]	@ (80044ec <DMA_CalcBaseAndBitshift+0x160>)
 800446e:	4013      	ands	r3, r2
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	659a      	str	r2, [r3, #88]	@ 0x58
 8004476:	e00d      	b.n	8004494 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <DMA_CalcBaseAndBitshift+0x160>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
 8004486:	e005      	b.n	8004494 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
 80044e4:	aaaaaaab 	.word	0xaaaaaaab
 80044e8:	08009b24 	.word	0x08009b24
 80044ec:	fffffc00 	.word	0xfffffc00

080044f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d120      	bne.n	8004546 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	2b03      	cmp	r3, #3
 800450a:	d858      	bhi.n	80045be <DMA_CheckFifoParam+0xce>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <DMA_CheckFifoParam+0x24>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004537 	.word	0x08004537
 800451c:	08004525 	.word	0x08004525
 8004520:	080045bf 	.word	0x080045bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d048      	beq.n	80045c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004534:	e045      	b.n	80045c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800453e:	d142      	bne.n	80045c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004544:	e03f      	b.n	80045c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454e:	d123      	bne.n	8004598 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	2b03      	cmp	r3, #3
 8004556:	d838      	bhi.n	80045ca <DMA_CheckFifoParam+0xda>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <DMA_CheckFifoParam+0x70>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	08004577 	.word	0x08004577
 8004568:	08004571 	.word	0x08004571
 800456c:	08004589 	.word	0x08004589
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
        break;
 8004574:	e030      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d025      	beq.n	80045ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004586:	e022      	b.n	80045ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004590:	d11f      	bne.n	80045d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004596:	e01c      	b.n	80045d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	2b02      	cmp	r3, #2
 800459e:	d902      	bls.n	80045a6 <DMA_CheckFifoParam+0xb6>
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d003      	beq.n	80045ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045a4:	e018      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
        break;
 80045aa:	e015      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
    break;
 80045bc:	e00b      	b.n	80045d6 <DMA_CheckFifoParam+0xe6>
        break;
 80045be:	bf00      	nop
 80045c0:	e00a      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        break;
 80045c2:	bf00      	nop
 80045c4:	e008      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        break;
 80045c6:	bf00      	nop
 80045c8:	e006      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        break;
 80045ca:	bf00      	nop
 80045cc:	e004      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
        break;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
    break;
 80045d6:	bf00      	nop
    }
  }

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a38      	ldr	r2, [pc, #224]	@ (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d022      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a36      	ldr	r2, [pc, #216]	@ (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01d      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a35      	ldr	r2, [pc, #212]	@ (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d018      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a33      	ldr	r2, [pc, #204]	@ (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a32      	ldr	r2, [pc, #200]	@ (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a30      	ldr	r2, [pc, #192]	@ (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2f      	ldr	r2, [pc, #188]	@ (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2d      	ldr	r2, [pc, #180]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01a      	beq.n	8004686 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3b08      	subs	r3, #8
 8004658:	4a28      	ldr	r2, [pc, #160]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4b26      	ldr	r3, [pc, #152]	@ (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a24      	ldr	r2, [pc, #144]	@ (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004674:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2201      	movs	r2, #1
 800467e:	409a      	lsls	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004684:	e024      	b.n	80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3b10      	subs	r3, #16
 800468e:	4a1e      	ldr	r2, [pc, #120]	@ (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a1c      	ldr	r2, [pc, #112]	@ (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d806      	bhi.n	80046ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d902      	bls.n	80046ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3308      	adds	r3, #8
 80046ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4b18      	ldr	r3, [pc, #96]	@ (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a16      	ldr	r2, [pc, #88]	@ (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	58025408 	.word	0x58025408
 80046e0:	5802541c 	.word	0x5802541c
 80046e4:	58025430 	.word	0x58025430
 80046e8:	58025444 	.word	0x58025444
 80046ec:	58025458 	.word	0x58025458
 80046f0:	5802546c 	.word	0x5802546c
 80046f4:	58025480 	.word	0x58025480
 80046f8:	58025494 	.word	0x58025494
 80046fc:	cccccccd 	.word	0xcccccccd
 8004700:	16009600 	.word	0x16009600
 8004704:	58025880 	.word	0x58025880
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	400204b8 	.word	0x400204b8
 8004710:	4002040f 	.word	0x4002040f
 8004714:	10008200 	.word	0x10008200
 8004718:	40020880 	.word	0x40020880

0800471c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d04a      	beq.n	80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d847      	bhi.n	80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a25      	ldr	r2, [pc, #148]	@ (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a24      	ldr	r2, [pc, #144]	@ (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a21      	ldr	r2, [pc, #132]	@ (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1f      	ldr	r2, [pc, #124]	@ (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4b17      	ldr	r3, [pc, #92]	@ (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a15      	ldr	r2, [pc, #84]	@ (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80047a6:	e009      	b.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a11      	ldr	r2, [pc, #68]	@ (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2201      	movs	r2, #1
 80047c2:	409a      	lsls	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	58025408 	.word	0x58025408
 80047d8:	5802541c 	.word	0x5802541c
 80047dc:	58025430 	.word	0x58025430
 80047e0:	58025444 	.word	0x58025444
 80047e4:	58025458 	.word	0x58025458
 80047e8:	5802546c 	.word	0x5802546c
 80047ec:	58025480 	.word	0x58025480
 80047f0:	58025494 	.word	0x58025494
 80047f4:	1600963f 	.word	0x1600963f
 80047f8:	58025940 	.word	0x58025940
 80047fc:	1000823f 	.word	0x1000823f
 8004800:	40020940 	.word	0x40020940

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	@ 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004812:	4b89      	ldr	r3, [pc, #548]	@ (8004a38 <HAL_GPIO_Init+0x234>)
 8004814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004816:	e194      	b.n	8004b42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8186 	beq.w	8004b3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d005      	beq.n	8004848 <HAL_GPIO_Init+0x44>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0201 	and.w	r2, r3, #1
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d017      	beq.n	80048e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2203      	movs	r2, #3
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d123      	bne.n	800493a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	220f      	movs	r2, #15
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	08da      	lsrs	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3208      	adds	r2, #8
 8004934:	69b9      	ldr	r1, [r7, #24]
 8004936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80e0 	beq.w	8004b3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_GPIO_Init+0x238>)
 800497e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004982:	4a2e      	ldr	r2, [pc, #184]	@ (8004a3c <HAL_GPIO_Init+0x238>)
 8004984:	f043 0302 	orr.w	r3, r3, #2
 8004988:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800498c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <HAL_GPIO_Init+0x238>)
 800498e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499a:	4a29      	ldr	r2, [pc, #164]	@ (8004a40 <HAL_GPIO_Init+0x23c>)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	3302      	adds	r3, #2
 80049a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	220f      	movs	r2, #15
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a20      	ldr	r2, [pc, #128]	@ (8004a44 <HAL_GPIO_Init+0x240>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d052      	beq.n	8004a6c <HAL_GPIO_Init+0x268>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a48 <HAL_GPIO_Init+0x244>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d031      	beq.n	8004a32 <HAL_GPIO_Init+0x22e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a4c <HAL_GPIO_Init+0x248>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02b      	beq.n	8004a2e <HAL_GPIO_Init+0x22a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <HAL_GPIO_Init+0x24c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d025      	beq.n	8004a2a <HAL_GPIO_Init+0x226>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <HAL_GPIO_Init+0x250>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_GPIO_Init+0x222>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a58 <HAL_GPIO_Init+0x254>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <HAL_GPIO_Init+0x21e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a5c <HAL_GPIO_Init+0x258>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_GPIO_Init+0x21a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_GPIO_Init+0x25c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00d      	beq.n	8004a1a <HAL_GPIO_Init+0x216>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_GPIO_Init+0x260>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x212>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_GPIO_Init+0x264>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_GPIO_Init+0x20e>
 8004a0e:	2309      	movs	r3, #9
 8004a10:	e02d      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a12:	230a      	movs	r3, #10
 8004a14:	e02b      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a16:	2308      	movs	r3, #8
 8004a18:	e029      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a1a:	2307      	movs	r3, #7
 8004a1c:	e027      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a1e:	2306      	movs	r3, #6
 8004a20:	e025      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a22:	2305      	movs	r3, #5
 8004a24:	e023      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a26:	2304      	movs	r3, #4
 8004a28:	e021      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e01f      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e01d      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e01b      	b.n	8004a6e <HAL_GPIO_Init+0x26a>
 8004a36:	bf00      	nop
 8004a38:	58000080 	.word	0x58000080
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	58000400 	.word	0x58000400
 8004a44:	58020000 	.word	0x58020000
 8004a48:	58020400 	.word	0x58020400
 8004a4c:	58020800 	.word	0x58020800
 8004a50:	58020c00 	.word	0x58020c00
 8004a54:	58021000 	.word	0x58021000
 8004a58:	58021400 	.word	0x58021400
 8004a5c:	58021800 	.word	0x58021800
 8004a60:	58021c00 	.word	0x58021c00
 8004a64:	58022000 	.word	0x58022000
 8004a68:	58022400 	.word	0x58022400
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	f002 0203 	and.w	r2, r2, #3
 8004a74:	0092      	lsls	r2, r2, #2
 8004a76:	4093      	lsls	r3, r2
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a7e:	4938      	ldr	r1, [pc, #224]	@ (8004b60 <HAL_GPIO_Init+0x35c>)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	3302      	adds	r3, #2
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ab2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f47f ae63 	bne.w	8004818 <HAL_GPIO_Init+0x14>
  }
}
 8004b52:	bf00      	nop
 8004b54:	bf00      	nop
 8004b56:	3724      	adds	r7, #36	@ 0x24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	58000400 	.word	0x58000400

08004b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b80:	e003      	b.n	8004b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ba0:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <HAL_PWREx_ConfigSupply+0x70>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00a      	beq.n	8004bc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bac:	4b16      	ldr	r3, [pc, #88]	@ (8004c08 <HAL_PWREx_ConfigSupply+0x70>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e01f      	b.n	8004bfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e01d      	b.n	8004bfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bc2:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <HAL_PWREx_ConfigSupply+0x70>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 0207 	bic.w	r2, r3, #7
 8004bca:	490f      	ldr	r1, [pc, #60]	@ (8004c08 <HAL_PWREx_ConfigSupply+0x70>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bd2:	f7fc fdcf 	bl	8001774 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bd8:	e009      	b.n	8004bee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bda:	f7fc fdcb 	bl	8001774 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004be8:	d901      	bls.n	8004bee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e007      	b.n	8004bfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bee:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <HAL_PWREx_ConfigSupply+0x70>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfa:	d1ee      	bne.n	8004bda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	58024800 	.word	0x58024800

08004c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	@ 0x30
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d102      	bne.n	8004c20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f000 bc48 	b.w	80054b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8088 	beq.w	8004d3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b99      	ldr	r3, [pc, #612]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c38:	4b96      	ldr	r3, [pc, #600]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d007      	beq.n	8004c54 <HAL_RCC_OscConfig+0x48>
 8004c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c46:	2b18      	cmp	r3, #24
 8004c48:	d111      	bne.n	8004c6e <HAL_RCC_OscConfig+0x62>
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c54:	4b8f      	ldr	r3, [pc, #572]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d06d      	beq.n	8004d3c <HAL_RCC_OscConfig+0x130>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d169      	bne.n	8004d3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f000 bc21 	b.w	80054b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x7a>
 8004c78:	4b86      	ldr	r3, [pc, #536]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a85      	ldr	r2, [pc, #532]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e02e      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x9c>
 8004c8e:	4b81      	ldr	r3, [pc, #516]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a80      	ldr	r2, [pc, #512]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b7e      	ldr	r3, [pc, #504]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e01d      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0xc0>
 8004cb2:	4b78      	ldr	r3, [pc, #480]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a77      	ldr	r2, [pc, #476]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b75      	ldr	r3, [pc, #468]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a74      	ldr	r2, [pc, #464]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd8>
 8004ccc:	4b71      	ldr	r3, [pc, #452]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a70      	ldr	r2, [pc, #448]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b6e      	ldr	r3, [pc, #440]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a6d      	ldr	r2, [pc, #436]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fc fd42 	bl	8001774 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fc fd3e 	bl	8001774 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e3d4      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d06:	4b63      	ldr	r3, [pc, #396]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xe8>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc fd2e 	bl	8001774 <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fd2a 	bl	8001774 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	@ 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e3c0      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d2e:	4b59      	ldr	r3, [pc, #356]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x110>
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80ca 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4c:	4b51      	ldr	r3, [pc, #324]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d56:	4b4f      	ldr	r3, [pc, #316]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_RCC_OscConfig+0x166>
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2b18      	cmp	r3, #24
 8004d66:	d156      	bne.n	8004e16 <HAL_RCC_OscConfig+0x20a>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d151      	bne.n	8004e16 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d72:	4b48      	ldr	r3, [pc, #288]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e392      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d8a:	4b42      	ldr	r3, [pc, #264]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 0219 	bic.w	r2, r3, #25
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	493f      	ldr	r1, [pc, #252]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fcea 	bl	8001774 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fc fce6 	bl	8001774 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e37c      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db6:	4b37      	ldr	r3, [pc, #220]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc2:	f7fc fce3 	bl	800178c <HAL_GetREVID>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d817      	bhi.n	8004e00 <HAL_RCC_OscConfig+0x1f4>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d108      	bne.n	8004dea <HAL_RCC_OscConfig+0x1de>
 8004dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004de0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004de6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de8:	e07a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dea:	4b2a      	ldr	r3, [pc, #168]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	031b      	lsls	r3, r3, #12
 8004df8:	4926      	ldr	r1, [pc, #152]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfe:	e06f      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	4921      	ldr	r1, [pc, #132]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e14:	e064      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d047      	beq.n	8004eae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 0219 	bic.w	r2, r3, #25
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	491a      	ldr	r1, [pc, #104]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fc fca0 	bl	8001774 <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fc fc9c 	bl	8001774 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e332      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e56:	f7fc fc99 	bl	800178c <HAL_GetREVID>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d819      	bhi.n	8004e98 <HAL_RCC_OscConfig+0x28c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b40      	cmp	r3, #64	@ 0x40
 8004e6a:	d108      	bne.n	8004e7e <HAL_RCC_OscConfig+0x272>
 8004e6c:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e74:	4a07      	ldr	r2, [pc, #28]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7a:	6053      	str	r3, [r2, #4]
 8004e7c:	e030      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
 8004e7e:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	031b      	lsls	r3, r3, #12
 8004e8c:	4901      	ldr	r1, [pc, #4]	@ (8004e94 <HAL_RCC_OscConfig+0x288>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
 8004e92:	e025      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
 8004e94:	58024400 	.word	0x58024400
 8004e98:	4b9a      	ldr	r3, [pc, #616]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	4997      	ldr	r1, [pc, #604]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	604b      	str	r3, [r1, #4]
 8004eac:	e018      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eae:	4b95      	ldr	r3, [pc, #596]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a94      	ldr	r2, [pc, #592]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fc fc5b 	bl	8001774 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec2:	f7fc fc57 	bl	8001774 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e2ed      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ed4:	4b8b      	ldr	r3, [pc, #556]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80a9 	beq.w	8005040 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eee:	4b85      	ldr	r3, [pc, #532]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ef8:	4b82      	ldr	r3, [pc, #520]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d007      	beq.n	8004f14 <HAL_RCC_OscConfig+0x308>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b18      	cmp	r3, #24
 8004f08:	d13a      	bne.n	8004f80 <HAL_RCC_OscConfig+0x374>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d135      	bne.n	8004f80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f14:	4b7b      	ldr	r3, [pc, #492]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_OscConfig+0x320>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	2b80      	cmp	r3, #128	@ 0x80
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e2c1      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f2c:	f7fc fc2e 	bl	800178c <HAL_GetREVID>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d817      	bhi.n	8004f6a <HAL_RCC_OscConfig+0x35e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x348>
 8004f42:	4b70      	ldr	r3, [pc, #448]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f52:	e075      	b.n	8005040 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f54:	4b6b      	ldr	r3, [pc, #428]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	069b      	lsls	r3, r3, #26
 8004f62:	4968      	ldr	r1, [pc, #416]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f68:	e06a      	b.n	8005040 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f6a:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	4962      	ldr	r1, [pc, #392]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f7e:	e05f      	b.n	8005040 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d042      	beq.n	800500e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f88:	4b5e      	ldr	r3, [pc, #376]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fc fbee 	bl	8001774 <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f9c:	f7fc fbea 	bl	8001774 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e280      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fae:	4b55      	ldr	r3, [pc, #340]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fba:	f7fc fbe7 	bl	800178c <HAL_GetREVID>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d817      	bhi.n	8004ff8 <HAL_RCC_OscConfig+0x3ec>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d108      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3d6>
 8004fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004fda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fde:	6053      	str	r3, [r2, #4]
 8004fe0:	e02e      	b.n	8005040 <HAL_RCC_OscConfig+0x434>
 8004fe2:	4b48      	ldr	r3, [pc, #288]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	069b      	lsls	r3, r3, #26
 8004ff0:	4944      	ldr	r1, [pc, #272]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
 8004ff6:	e023      	b.n	8005040 <HAL_RCC_OscConfig+0x434>
 8004ff8:	4b42      	ldr	r3, [pc, #264]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	493f      	ldr	r1, [pc, #252]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	60cb      	str	r3, [r1, #12]
 800500c:	e018      	b.n	8005040 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800500e:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a3c      	ldr	r2, [pc, #240]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8005014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fc fbab 	bl	8001774 <HAL_GetTick>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005022:	f7fc fba7 	bl	8001774 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e23d      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005034:	4b33      	ldr	r3, [pc, #204]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d036      	beq.n	80050ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d019      	beq.n	8005088 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 8005056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005058:	4a2a      	ldr	r2, [pc, #168]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fc fb88 	bl	8001774 <HAL_GetTick>
 8005064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005068:	f7fc fb84 	bl	8001774 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e21a      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800507a:	4b22      	ldr	r3, [pc, #136]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 800507c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x45c>
 8005086:	e018      	b.n	80050ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005088:	4b1e      	ldr	r3, [pc, #120]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 800508a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508c:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fc fb6e 	bl	8001774 <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509c:	f7fc fb6a 	bl	8001774 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e200      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ae:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 80050b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d039      	beq.n	800513a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01c      	beq.n	8005108 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050da:	f7fc fb4b 	bl	8001774 <HAL_GetTick>
 80050de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e2:	f7fc fb47 	bl	8001774 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e1dd      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050f4:	4b03      	ldr	r3, [pc, #12]	@ (8005104 <HAL_RCC_OscConfig+0x4f8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x4d6>
 8005100:	e01b      	b.n	800513a <HAL_RCC_OscConfig+0x52e>
 8005102:	bf00      	nop
 8005104:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005108:	4b9b      	ldr	r3, [pc, #620]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a9a      	ldr	r2, [pc, #616]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800510e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005112:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005114:	f7fc fb2e 	bl	8001774 <HAL_GetTick>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800511c:	f7fc fb2a 	bl	8001774 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e1c0      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800512e:	4b92      	ldr	r3, [pc, #584]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8081 	beq.w	800524a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005148:	4b8c      	ldr	r3, [pc, #560]	@ (800537c <HAL_RCC_OscConfig+0x770>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a8b      	ldr	r2, [pc, #556]	@ (800537c <HAL_RCC_OscConfig+0x770>)
 800514e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005154:	f7fc fb0e 	bl	8001774 <HAL_GetTick>
 8005158:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515c:	f7fc fb0a 	bl	8001774 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	@ 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1a0      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800516e:	4b83      	ldr	r3, [pc, #524]	@ (800537c <HAL_RCC_OscConfig+0x770>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d106      	bne.n	8005190 <HAL_RCC_OscConfig+0x584>
 8005182:	4b7d      	ldr	r3, [pc, #500]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a7c      	ldr	r2, [pc, #496]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	e02d      	b.n	80051ec <HAL_RCC_OscConfig+0x5e0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10c      	bne.n	80051b2 <HAL_RCC_OscConfig+0x5a6>
 8005198:	4b77      	ldr	r3, [pc, #476]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	4a76      	ldr	r2, [pc, #472]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a4:	4b74      	ldr	r3, [pc, #464]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a73      	ldr	r2, [pc, #460]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	e01c      	b.n	80051ec <HAL_RCC_OscConfig+0x5e0>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x5c8>
 80051ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	4a6e      	ldr	r2, [pc, #440]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051c0:	f043 0304 	orr.w	r3, r3, #4
 80051c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0x5e0>
 80051d4:	4b68      	ldr	r3, [pc, #416]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d8:	4a67      	ldr	r2, [pc, #412]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e0:	4b65      	ldr	r3, [pc, #404]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	4a64      	ldr	r2, [pc, #400]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80051e6:	f023 0304 	bic.w	r3, r3, #4
 80051ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d015      	beq.n	8005220 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fc fabe 	bl	8001774 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fc:	f7fc faba 	bl	8001774 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e14e      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005212:	4b59      	ldr	r3, [pc, #356]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ee      	beq.n	80051fc <HAL_RCC_OscConfig+0x5f0>
 800521e:	e014      	b.n	800524a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005220:	f7fc faa8 	bl	8001774 <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005226:	e00a      	b.n	800523e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005228:	f7fc faa4 	bl	8001774 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e138      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800523e:	4b4e      	ldr	r3, [pc, #312]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ee      	bne.n	8005228 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 812d 	beq.w	80054ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005254:	4b48      	ldr	r3, [pc, #288]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800525c:	2b18      	cmp	r3, #24
 800525e:	f000 80bd 	beq.w	80053dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	2b02      	cmp	r3, #2
 8005268:	f040 809e 	bne.w	80053a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526c:	4b42      	ldr	r3, [pc, #264]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a41      	ldr	r2, [pc, #260]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fc fa7c 	bl	8001774 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc fa78 	bl	8001774 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e10e      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005292:	4b39      	ldr	r3, [pc, #228]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529e:	4b36      	ldr	r3, [pc, #216]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052a2:	4b37      	ldr	r3, [pc, #220]	@ (8005380 <HAL_RCC_OscConfig+0x774>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052ae:	0112      	lsls	r2, r2, #4
 80052b0:	430a      	orrs	r2, r1
 80052b2:	4931      	ldr	r1, [pc, #196]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	3b01      	subs	r3, #1
 80052be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c6:	3b01      	subs	r3, #1
 80052c8:	025b      	lsls	r3, r3, #9
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d2:	3b01      	subs	r3, #1
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e0:	3b01      	subs	r3, #1
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052e8:	4923      	ldr	r1, [pc, #140]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80052ee:	4b22      	ldr	r3, [pc, #136]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052fe:	4b21      	ldr	r3, [pc, #132]	@ (8005384 <HAL_RCC_OscConfig+0x778>)
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005306:	00d2      	lsls	r2, r2, #3
 8005308:	491b      	ldr	r1, [pc, #108]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800530e:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	f023 020c 	bic.w	r2, r3, #12
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	4917      	ldr	r1, [pc, #92]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005320:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	f023 0202 	bic.w	r2, r3, #2
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532c:	4912      	ldr	r1, [pc, #72]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005332:	4b11      	ldr	r3, [pc, #68]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	4a10      	ldr	r2, [pc, #64]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	4a0d      	ldr	r2, [pc, #52]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800534a:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	4a0a      	ldr	r2, [pc, #40]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005356:	4b08      	ldr	r3, [pc, #32]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	4a07      	ldr	r2, [pc, #28]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005362:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <HAL_RCC_OscConfig+0x76c>)
 8005368:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fc fa01 	bl	8001774 <HAL_GetTick>
 8005372:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005374:	e011      	b.n	800539a <HAL_RCC_OscConfig+0x78e>
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
 800537c:	58024800 	.word	0x58024800
 8005380:	fffffc0c 	.word	0xfffffc0c
 8005384:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005388:	f7fc f9f4 	bl	8001774 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e08a      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800539a:	4b47      	ldr	r3, [pc, #284]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x77c>
 80053a6:	e082      	b.n	80054ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a8:	4b43      	ldr	r3, [pc, #268]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a42      	ldr	r2, [pc, #264]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80053ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fc f9de 	bl	8001774 <HAL_GetTick>
 80053b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fc f9da 	bl	8001774 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e070      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ce:	4b3a      	ldr	r3, [pc, #232]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x7b0>
 80053da:	e068      	b.n	80054ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053dc:	4b36      	ldr	r3, [pc, #216]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053e2:	4b35      	ldr	r3, [pc, #212]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d031      	beq.n	8005454 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0203 	and.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d12a      	bne.n	8005454 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d122      	bne.n	8005454 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d11a      	bne.n	8005454 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	0a5b      	lsrs	r3, r3, #9
 8005422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d111      	bne.n	8005454 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	0c1b      	lsrs	r3, r3, #16
 8005434:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d108      	bne.n	8005454 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	0e1b      	lsrs	r3, r3, #24
 8005446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e02b      	b.n	80054b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005458:	4b17      	ldr	r3, [pc, #92]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 800545a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545c:	08db      	lsrs	r3, r3, #3
 800545e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005462:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d01f      	beq.n	80054ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800546e:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800547a:	f7fc f97b 	bl	8001774 <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005480:	bf00      	nop
 8005482:	f7fc f977 	bl	8001774 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	4293      	cmp	r3, r2
 800548c:	d0f9      	beq.n	8005482 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800548e:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 8005490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005492:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <HAL_RCC_OscConfig+0x8b0>)
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800549a:	00d2      	lsls	r2, r2, #3
 800549c:	4906      	ldr	r1, [pc, #24]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054a2:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	4a04      	ldr	r2, [pc, #16]	@ (80054b8 <HAL_RCC_OscConfig+0x8ac>)
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3730      	adds	r7, #48	@ 0x30
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	ffff0007 	.word	0xffff0007

080054c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e19c      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d910      	bls.n	8005504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b87      	ldr	r3, [pc, #540]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 020f 	bic.w	r2, r3, #15
 80054ea:	4985      	ldr	r1, [pc, #532]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	4b83      	ldr	r3, [pc, #524]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e184      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d010      	beq.n	8005532 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	4b7b      	ldr	r3, [pc, #492]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800551c:	429a      	cmp	r2, r3
 800551e:	d908      	bls.n	8005532 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005520:	4b78      	ldr	r3, [pc, #480]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	4975      	ldr	r1, [pc, #468]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 800552e:	4313      	orrs	r3, r2
 8005530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	4b70      	ldr	r3, [pc, #448]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800554a:	429a      	cmp	r2, r3
 800554c:	d908      	bls.n	8005560 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800554e:	4b6d      	ldr	r3, [pc, #436]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	496a      	ldr	r1, [pc, #424]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 800555c:	4313      	orrs	r3, r2
 800555e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d010      	beq.n	800558e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	4b64      	ldr	r3, [pc, #400]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005578:	429a      	cmp	r2, r3
 800557a:	d908      	bls.n	800558e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800557c:	4b61      	ldr	r3, [pc, #388]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	495e      	ldr	r1, [pc, #376]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 800558a:	4313      	orrs	r3, r2
 800558c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d010      	beq.n	80055bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	4b59      	ldr	r3, [pc, #356]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d908      	bls.n	80055bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055aa:	4b56      	ldr	r3, [pc, #344]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4953      	ldr	r1, [pc, #332]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d010      	beq.n	80055ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d908      	bls.n	80055ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f023 020f 	bic.w	r2, r3, #15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4947      	ldr	r1, [pc, #284]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d055      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055f6:	4b43      	ldr	r3, [pc, #268]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	4940      	ldr	r1, [pc, #256]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005604:	4313      	orrs	r3, r2
 8005606:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d107      	bne.n	8005620 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005610:	4b3c      	ldr	r3, [pc, #240]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d121      	bne.n	8005660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0f6      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d107      	bne.n	8005638 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005628:	4b36      	ldr	r3, [pc, #216]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d115      	bne.n	8005660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0ea      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005640:	4b30      	ldr	r3, [pc, #192]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0de      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005650:	4b2c      	ldr	r3, [pc, #176]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0d6      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005660:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f023 0207 	bic.w	r2, r3, #7
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4925      	ldr	r1, [pc, #148]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005672:	f7fc f87f 	bl	8001774 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005678:	e00a      	b.n	8005690 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567a:	f7fc f87b 	bl	8001774 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0be      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005690:	4b1c      	ldr	r3, [pc, #112]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	429a      	cmp	r2, r3
 80056a0:	d1eb      	bne.n	800567a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	4b14      	ldr	r3, [pc, #80]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d208      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056be:	4b11      	ldr	r3, [pc, #68]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f023 020f 	bic.w	r2, r3, #15
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	490e      	ldr	r1, [pc, #56]	@ (8005704 <HAL_RCC_ClockConfig+0x244>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d214      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 020f 	bic.w	r2, r3, #15
 80056e6:	4906      	ldr	r1, [pc, #24]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ee:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <HAL_RCC_ClockConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d005      	beq.n	8005708 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e086      	b.n	800580e <HAL_RCC_ClockConfig+0x34e>
 8005700:	52002000 	.word	0x52002000
 8005704:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	4b3f      	ldr	r3, [pc, #252]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005720:	429a      	cmp	r2, r3
 8005722:	d208      	bcs.n	8005736 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005724:	4b3c      	ldr	r3, [pc, #240]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	4939      	ldr	r1, [pc, #228]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005732:	4313      	orrs	r3, r2
 8005734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695a      	ldr	r2, [r3, #20]
 8005746:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800574e:	429a      	cmp	r2, r3
 8005750:	d208      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005752:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	492e      	ldr	r1, [pc, #184]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005760:	4313      	orrs	r3, r2
 8005762:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	4b28      	ldr	r3, [pc, #160]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800577c:	429a      	cmp	r2, r3
 800577e:	d208      	bcs.n	8005792 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005780:	4b25      	ldr	r3, [pc, #148]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4922      	ldr	r1, [pc, #136]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 800578e:	4313      	orrs	r3, r2
 8005790:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d010      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d208      	bcs.n	80057c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4917      	ldr	r1, [pc, #92]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057c0:	f000 f834 	bl	800582c <HAL_RCC_GetSysClockFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b14      	ldr	r3, [pc, #80]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	4912      	ldr	r1, [pc, #72]	@ (800581c <HAL_RCC_ClockConfig+0x35c>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <HAL_RCC_ClockConfig+0x358>)
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	4a0d      	ldr	r2, [pc, #52]	@ (800581c <HAL_RCC_ClockConfig+0x35c>)
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
 80057f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <HAL_RCC_ClockConfig+0x360>)
 80057f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005824 <HAL_RCC_ClockConfig+0x364>)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80057fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <HAL_RCC_ClockConfig+0x368>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7fb ff6c 	bl	80016e0 <HAL_InitTick>
 8005808:	4603      	mov	r3, r0
 800580a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	58024400 	.word	0x58024400
 800581c:	08009b14 	.word	0x08009b14
 8005820:	24000004 	.word	0x24000004
 8005824:	24000000 	.word	0x24000000
 8005828:	24000008 	.word	0x24000008

0800582c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	@ 0x24
 8005830:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005832:	4bb3      	ldr	r3, [pc, #716]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800583a:	2b18      	cmp	r3, #24
 800583c:	f200 8155 	bhi.w	8005aea <HAL_RCC_GetSysClockFreq+0x2be>
 8005840:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	080058ad 	.word	0x080058ad
 800584c:	08005aeb 	.word	0x08005aeb
 8005850:	08005aeb 	.word	0x08005aeb
 8005854:	08005aeb 	.word	0x08005aeb
 8005858:	08005aeb 	.word	0x08005aeb
 800585c:	08005aeb 	.word	0x08005aeb
 8005860:	08005aeb 	.word	0x08005aeb
 8005864:	08005aeb 	.word	0x08005aeb
 8005868:	080058d3 	.word	0x080058d3
 800586c:	08005aeb 	.word	0x08005aeb
 8005870:	08005aeb 	.word	0x08005aeb
 8005874:	08005aeb 	.word	0x08005aeb
 8005878:	08005aeb 	.word	0x08005aeb
 800587c:	08005aeb 	.word	0x08005aeb
 8005880:	08005aeb 	.word	0x08005aeb
 8005884:	08005aeb 	.word	0x08005aeb
 8005888:	080058d9 	.word	0x080058d9
 800588c:	08005aeb 	.word	0x08005aeb
 8005890:	08005aeb 	.word	0x08005aeb
 8005894:	08005aeb 	.word	0x08005aeb
 8005898:	08005aeb 	.word	0x08005aeb
 800589c:	08005aeb 	.word	0x08005aeb
 80058a0:	08005aeb 	.word	0x08005aeb
 80058a4:	08005aeb 	.word	0x08005aeb
 80058a8:	080058df 	.word	0x080058df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ac:	4b94      	ldr	r3, [pc, #592]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b8:	4b91      	ldr	r3, [pc, #580]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a90      	ldr	r2, [pc, #576]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80058ca:	e111      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058cc:	4b8d      	ldr	r3, [pc, #564]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058ce:	61bb      	str	r3, [r7, #24]
      break;
 80058d0:	e10e      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80058d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058d4:	61bb      	str	r3, [r7, #24]
      break;
 80058d6:	e10b      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80058d8:	4b8c      	ldr	r3, [pc, #560]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058da:	61bb      	str	r3, [r7, #24]
      break;
 80058dc:	e108      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058de:	4b88      	ldr	r3, [pc, #544]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80058e8:	4b85      	ldr	r3, [pc, #532]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058f4:	4b82      	ldr	r3, [pc, #520]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80058fe:	4b80      	ldr	r3, [pc, #512]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80e1 	beq.w	8005ae4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b02      	cmp	r3, #2
 8005926:	f000 8083 	beq.w	8005a30 <HAL_RCC_GetSysClockFreq+0x204>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b02      	cmp	r3, #2
 800592e:	f200 80a1 	bhi.w	8005a74 <HAL_RCC_GetSysClockFreq+0x248>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x114>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d056      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800593e:	e099      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005940:	4b6f      	ldr	r3, [pc, #444]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d02d      	beq.n	80059a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800594c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	4a6b      	ldr	r2, [pc, #428]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
 800595c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005976:	4b62      	ldr	r3, [pc, #392]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005986:	ed97 6a02 	vldr	s12, [r7, #8]
 800598a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800598e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800599a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059a6:	e087      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b14 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ba:	4b51      	ldr	r3, [pc, #324]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ea:	e065      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b40      	ldr	r3, [pc, #256]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a2e:	e043      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b2f      	ldr	r3, [pc, #188]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a72:	e021      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b1e      	ldr	r3, [pc, #120]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ab6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abc:	0a5b      	lsrs	r3, r3, #9
 8005abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005adc:	ee17 3a90 	vmov	r3, s15
 8005ae0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ae2:	e005      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
      break;
 8005ae8:	e002      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005aea:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005aec:	61bb      	str	r3, [r7, #24]
      break;
 8005aee:	bf00      	nop
  }

  return sysclockfreq;
 8005af0:	69bb      	ldr	r3, [r7, #24]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3724      	adds	r7, #36	@ 0x24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	58024400 	.word	0x58024400
 8005b04:	03d09000 	.word	0x03d09000
 8005b08:	003d0900 	.word	0x003d0900
 8005b0c:	007a1200 	.word	0x007a1200
 8005b10:	46000000 	.word	0x46000000
 8005b14:	4c742400 	.word	0x4c742400
 8005b18:	4a742400 	.word	0x4a742400
 8005b1c:	4af42400 	.word	0x4af42400

08005b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b26:	f7ff fe81 	bl	800582c <HAL_RCC_GetSysClockFreq>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b10      	ldr	r3, [pc, #64]	@ (8005b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	0a1b      	lsrs	r3, r3, #8
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	490f      	ldr	r1, [pc, #60]	@ (8005b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	4a09      	ldr	r2, [pc, #36]	@ (8005b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b4e:	5cd3      	ldrb	r3, [r2, r3]
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	4a07      	ldr	r2, [pc, #28]	@ (8005b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b5e:	4a07      	ldr	r2, [pc, #28]	@ (8005b7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	58024400 	.word	0x58024400
 8005b74:	08009b14 	.word	0x08009b14
 8005b78:	24000004 	.word	0x24000004
 8005b7c:	24000000 	.word	0x24000000

08005b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b84:	f7ff ffcc 	bl	8005b20 <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4904      	ldr	r1, [pc, #16]	@ (8005ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	58024400 	.word	0x58024400
 8005ba8:	08009b14 	.word	0x08009b14

08005bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005bb0:	f7ff ffb6 	bl	8005b20 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4904      	ldr	r1, [pc, #16]	@ (8005bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	08009b14 	.word	0x08009b14

08005bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bdc:	b0ca      	sub	sp, #296	@ 0x128
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005bfc:	2500      	movs	r5, #0
 8005bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8005c02:	d049      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c0e:	d02f      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c14:	d828      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c1a:	d01a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c20:	d822      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c2a:	d007      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c2c:	e01c      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c2e:	4bb8      	ldr	r3, [pc, #736]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	4ab7      	ldr	r2, [pc, #732]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c3a:	e01a      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	3308      	adds	r3, #8
 8005c42:	2102      	movs	r1, #2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f002 fb61 	bl	800830c <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c50:	e00f      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	3328      	adds	r3, #40	@ 0x28
 8005c58:	2102      	movs	r1, #2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f002 fc08 	bl	8008470 <RCCEx_PLL3_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c66:	e004      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c7a:	4ba5      	ldr	r3, [pc, #660]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c88:	4aa1      	ldr	r2, [pc, #644]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c8e:	e003      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ca4:	f04f 0900 	mov.w	r9, #0
 8005ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8005cac:	d047      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d82a      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd5 	.word	0x08005cd5
 8005cc4:	08005ce3 	.word	0x08005ce3
 8005cc8:	08005cf9 	.word	0x08005cf9
 8005ccc:	08005d17 	.word	0x08005d17
 8005cd0:	08005d17 	.word	0x08005d17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	4a8d      	ldr	r2, [pc, #564]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce0:	e01a      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f002 fb0e 	bl	800830c <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cf6:	e00f      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	3328      	adds	r3, #40	@ 0x28
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f002 fbb5 	bl	8008470 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d0c:	e004      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d14:	e000      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d20:	4b7b      	ldr	r3, [pc, #492]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d24:	f023 0107 	bic.w	r1, r3, #7
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	4a78      	ldr	r2, [pc, #480]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d34:	e003      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005d4a:	f04f 0b00 	mov.w	fp, #0
 8005d4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d52:	d04c      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d5e:	d030      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d64:	d829      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d68:	d02d      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d6c:	d825      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d6e:	2b80      	cmp	r3, #128	@ 0x80
 8005d70:	d018      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d72:	2b80      	cmp	r3, #128	@ 0x80
 8005d74:	d821      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005d7a:	2b40      	cmp	r3, #64	@ 0x40
 8005d7c:	d007      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005d7e:	e01c      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d80:	4b63      	ldr	r3, [pc, #396]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	4a62      	ldr	r2, [pc, #392]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d8c:	e01c      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d92:	3308      	adds	r3, #8
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f002 fab8 	bl	800830c <RCCEx_PLL2_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005da2:	e011      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da8:	3328      	adds	r3, #40	@ 0x28
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f002 fb5f 	bl	8008470 <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005db8:	e006      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dc0:	e002      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005dd0:	4b4f      	ldr	r3, [pc, #316]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dde:	4a4c      	ldr	r2, [pc, #304]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005de4:	e003      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005dfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	d053      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e1a:	d035      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e20:	d82e      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e26:	d031      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e2c:	d828      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e32:	d01a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e38:	d822      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005e3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e42:	d007      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005e44:	e01c      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e46:	4b32      	ldr	r3, [pc, #200]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	4a31      	ldr	r2, [pc, #196]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e52:	e01c      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f002 fa55 	bl	800830c <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e68:	e011      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	3328      	adds	r3, #40	@ 0x28
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f002 fafc 	bl	8008470 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e006      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e86:	e002      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e88:	bf00      	nop
 8005e8a:	e000      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e96:	4b1e      	ldr	r3, [pc, #120]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eac:	e003      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ec2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ecc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	d056      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ee2:	d038      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ee8:	d831      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005eee:	d034      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ef4:	d82b      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005efa:	d01d      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f00:	d825      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f0c:	e01f      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f14:	4ba2      	ldr	r3, [pc, #648]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	4aa1      	ldr	r2, [pc, #644]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f20:	e01c      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	3308      	adds	r3, #8
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f002 f9ee 	bl	800830c <RCCEx_PLL2_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f36:	e011      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	3328      	adds	r3, #40	@ 0x28
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f002 fa95 	bl	8008470 <RCCEx_PLL3_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e006      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f54:	e002      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f64:	4b8e      	ldr	r3, [pc, #568]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f74:	4a8a      	ldr	r2, [pc, #552]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f76:	430b      	orrs	r3, r1
 8005f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f7a:	e003      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	d03a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005faa:	2b30      	cmp	r3, #48	@ 0x30
 8005fac:	d01f      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005fae:	2b30      	cmp	r3, #48	@ 0x30
 8005fb0:	d819      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d815      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d019      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d111      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc2:	4b77      	ldr	r3, [pc, #476]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	4a76      	ldr	r2, [pc, #472]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005fce:	e011      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f002 f997 	bl	800830c <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005fe4:	e006      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fec:	e002      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ffc:	4b68      	ldr	r3, [pc, #416]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006000:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600a:	4a65      	ldr	r2, [pc, #404]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800600c:	430b      	orrs	r3, r1
 800600e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006010:	e003      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006026:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800602a:	2300      	movs	r3, #0
 800602c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006030:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006034:	460b      	mov	r3, r1
 8006036:	4313      	orrs	r3, r2
 8006038:	d051      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006044:	d035      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800604a:	d82e      	bhi.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800604c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006050:	d031      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006052:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006056:	d828      	bhi.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800605c:	d01a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006062:	d822      	bhi.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606c:	d007      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800606e:	e01c      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006070:	4b4b      	ldr	r3, [pc, #300]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	4a4a      	ldr	r2, [pc, #296]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800607a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800607c:	e01c      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	3308      	adds	r3, #8
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f002 f940 	bl	800830c <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006092:	e011      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	3328      	adds	r3, #40	@ 0x28
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f002 f9e7 	bl	8008470 <RCCEx_PLL3_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060a8:	e006      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060b0:	e002      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060b2:	bf00      	nop
 80060b4:	e000      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060c0:	4b37      	ldr	r3, [pc, #220]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ce:	4a34      	ldr	r2, [pc, #208]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060d4:	e003      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80060ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80060f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80060f8:	460b      	mov	r3, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	d056      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006108:	d033      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800610a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800610e:	d82c      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006110:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006114:	d02f      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006116:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800611a:	d826      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800611c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006120:	d02b      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006122:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006126:	d820      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800612c:	d012      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800612e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006132:	d81a      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d022      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613c:	d115      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	3308      	adds	r3, #8
 8006144:	2101      	movs	r1, #1
 8006146:	4618      	mov	r0, r3
 8006148:	f002 f8e0 	bl	800830c <RCCEx_PLL2_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006152:	e015      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	3328      	adds	r3, #40	@ 0x28
 800615a:	2101      	movs	r1, #1
 800615c:	4618      	mov	r0, r3
 800615e:	f002 f987 	bl	8008470 <RCCEx_PLL3_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006168:	e00a      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006170:	e006      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006172:	bf00      	nop
 8006174:	e004      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006176:	bf00      	nop
 8006178:	e002      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800617a:	bf00      	nop
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800617e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10d      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006188:	4b05      	ldr	r3, [pc, #20]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800618a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006196:	4a02      	ldr	r2, [pc, #8]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6513      	str	r3, [r2, #80]	@ 0x50
 800619c:	e006      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800619e:	bf00      	nop
 80061a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	d055      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061d8:	d033      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80061da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061de:	d82c      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e4:	d02f      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ea:	d826      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061f0:	d02b      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80061f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061f6:	d820      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061fc:	d012      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80061fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006202:	d81a      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d022      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800620c:	d115      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006212:	3308      	adds	r3, #8
 8006214:	2101      	movs	r1, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f002 f878 	bl	800830c <RCCEx_PLL2_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006222:	e015      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006228:	3328      	adds	r3, #40	@ 0x28
 800622a:	2101      	movs	r1, #1
 800622c:	4618      	mov	r0, r3
 800622e:	f002 f91f 	bl	8008470 <RCCEx_PLL3_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006238:	e00a      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006242:	bf00      	nop
 8006244:	e004      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006246:	bf00      	nop
 8006248:	e002      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800624a:	bf00      	nop
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800624e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10b      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006258:	4ba3      	ldr	r3, [pc, #652]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800625a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006268:	4a9f      	ldr	r2, [pc, #636]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626a:	430b      	orrs	r3, r1
 800626c:	6593      	str	r3, [r2, #88]	@ 0x58
 800626e:	e003      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006284:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800628e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006292:	460b      	mov	r3, r1
 8006294:	4313      	orrs	r3, r2
 8006296:	d037      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a2:	d00e      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80062a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a8:	d816      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d018      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80062ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062b2:	d111      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b4:	4b8c      	ldr	r3, [pc, #560]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	4a8b      	ldr	r2, [pc, #556]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062c0:	e00f      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	3308      	adds	r3, #8
 80062c8:	2101      	movs	r1, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 f81e 	bl	800830c <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062d6:	e004      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80062e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062ea:	4b7f      	ldr	r3, [pc, #508]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f8:	4a7b      	ldr	r2, [pc, #492]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80062fe:	e003      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006318:	2300      	movs	r3, #0
 800631a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800631e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006322:	460b      	mov	r3, r1
 8006324:	4313      	orrs	r3, r2
 8006326:	d039      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800632e:	2b03      	cmp	r3, #3
 8006330:	d81c      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006332:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	08006375 	.word	0x08006375
 800633c:	08006349 	.word	0x08006349
 8006340:	08006357 	.word	0x08006357
 8006344:	08006375 	.word	0x08006375
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4b67      	ldr	r3, [pc, #412]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	4a66      	ldr	r2, [pc, #408]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006354:	e00f      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	3308      	adds	r3, #8
 800635c:	2102      	movs	r1, #2
 800635e:	4618      	mov	r0, r3
 8006360:	f001 ffd4 	bl	800830c <RCCEx_PLL2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800636a:	e004      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006372:	e000      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800637e:	4b5a      	ldr	r3, [pc, #360]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006382:	f023 0103 	bic.w	r1, r3, #3
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	4a56      	ldr	r2, [pc, #344]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800638e:	430b      	orrs	r3, r1
 8006390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006392:	e003      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80063b6:	460b      	mov	r3, r1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f000 809f 	beq.w	80064fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063be:	4b4b      	ldr	r3, [pc, #300]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4a      	ldr	r2, [pc, #296]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ca:	f7fb f9d3 	bl	8001774 <HAL_GetTick>
 80063ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d2:	e00b      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d4:	f7fb f9ce 	bl	8001774 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b64      	cmp	r3, #100	@ 0x64
 80063e2:	d903      	bls.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ea:	e005      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ec:	4b3f      	ldr	r3, [pc, #252]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ed      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80063f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d179      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006400:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006402:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800640c:	4053      	eors	r3, r2
 800640e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006412:	2b00      	cmp	r3, #0
 8006414:	d015      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006416:	4b34      	ldr	r3, [pc, #208]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800641e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006422:	4b31      	ldr	r3, [pc, #196]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	4a30      	ldr	r2, [pc, #192]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800642e:	4b2e      	ldr	r3, [pc, #184]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	4a2d      	ldr	r2, [pc, #180]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006438:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800643a:	4a2b      	ldr	r2, [pc, #172]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800643c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006440:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800644a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800644e:	d118      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fb f990 	bl	8001774 <HAL_GetTick>
 8006454:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006458:	e00d      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fb f98b 	bl	8001774 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	f241 3388 	movw	r3, #5000	@ 0x1388
 800646a:	429a      	cmp	r2, r3
 800646c:	d903      	bls.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006474:	e005      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006476:	4b1c      	ldr	r3, [pc, #112]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0eb      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006486:	2b00      	cmp	r3, #0
 8006488:	d129      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800649a:	d10e      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800649c:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064ac:	091a      	lsrs	r2, r3, #4
 80064ae:	4b10      	ldr	r3, [pc, #64]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	4a0d      	ldr	r2, [pc, #52]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6113      	str	r3, [r2, #16]
 80064b8:	e005      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80064ba:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	4a0a      	ldr	r2, [pc, #40]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064c4:	6113      	str	r3, [r2, #16]
 80064c6:	4b08      	ldr	r3, [pc, #32]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d6:	4a04      	ldr	r2, [pc, #16]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064d8:	430b      	orrs	r3, r1
 80064da:	6713      	str	r3, [r2, #112]	@ 0x70
 80064dc:	e00e      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80064e6:	e009      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80064e8:	58024400 	.word	0x58024400
 80064ec:	58024800 	.word	0x58024800
 80064f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f002 0301 	and.w	r3, r2, #1
 8006508:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800650c:	2300      	movs	r3, #0
 800650e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006512:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	f000 8089 	beq.w	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006524:	2b28      	cmp	r3, #40	@ 0x28
 8006526:	d86b      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006528:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006609 	.word	0x08006609
 8006534:	08006601 	.word	0x08006601
 8006538:	08006601 	.word	0x08006601
 800653c:	08006601 	.word	0x08006601
 8006540:	08006601 	.word	0x08006601
 8006544:	08006601 	.word	0x08006601
 8006548:	08006601 	.word	0x08006601
 800654c:	08006601 	.word	0x08006601
 8006550:	080065d5 	.word	0x080065d5
 8006554:	08006601 	.word	0x08006601
 8006558:	08006601 	.word	0x08006601
 800655c:	08006601 	.word	0x08006601
 8006560:	08006601 	.word	0x08006601
 8006564:	08006601 	.word	0x08006601
 8006568:	08006601 	.word	0x08006601
 800656c:	08006601 	.word	0x08006601
 8006570:	080065eb 	.word	0x080065eb
 8006574:	08006601 	.word	0x08006601
 8006578:	08006601 	.word	0x08006601
 800657c:	08006601 	.word	0x08006601
 8006580:	08006601 	.word	0x08006601
 8006584:	08006601 	.word	0x08006601
 8006588:	08006601 	.word	0x08006601
 800658c:	08006601 	.word	0x08006601
 8006590:	08006609 	.word	0x08006609
 8006594:	08006601 	.word	0x08006601
 8006598:	08006601 	.word	0x08006601
 800659c:	08006601 	.word	0x08006601
 80065a0:	08006601 	.word	0x08006601
 80065a4:	08006601 	.word	0x08006601
 80065a8:	08006601 	.word	0x08006601
 80065ac:	08006601 	.word	0x08006601
 80065b0:	08006609 	.word	0x08006609
 80065b4:	08006601 	.word	0x08006601
 80065b8:	08006601 	.word	0x08006601
 80065bc:	08006601 	.word	0x08006601
 80065c0:	08006601 	.word	0x08006601
 80065c4:	08006601 	.word	0x08006601
 80065c8:	08006601 	.word	0x08006601
 80065cc:	08006601 	.word	0x08006601
 80065d0:	08006609 	.word	0x08006609
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	3308      	adds	r3, #8
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fe95 	bl	800830c <RCCEx_PLL2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065e8:	e00f      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	3328      	adds	r3, #40	@ 0x28
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 ff3c 	bl	8008470 <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065fe:	e004      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006606:	e000      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800660a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006612:	4bbf      	ldr	r3, [pc, #764]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006616:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006620:	4abb      	ldr	r2, [pc, #748]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006622:	430b      	orrs	r3, r1
 8006624:	6553      	str	r3, [r2, #84]	@ 0x54
 8006626:	e003      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f002 0302 	and.w	r3, r2, #2
 800663c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006646:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	d041      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006656:	2b05      	cmp	r3, #5
 8006658:	d824      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800665a:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	080066ad 	.word	0x080066ad
 8006664:	08006679 	.word	0x08006679
 8006668:	0800668f 	.word	0x0800668f
 800666c:	080066ad 	.word	0x080066ad
 8006670:	080066ad 	.word	0x080066ad
 8006674:	080066ad 	.word	0x080066ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667c:	3308      	adds	r3, #8
 800667e:	2101      	movs	r1, #1
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fe43 	bl	800830c <RCCEx_PLL2_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800668c:	e00f      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006692:	3328      	adds	r3, #40	@ 0x28
 8006694:	2101      	movs	r1, #1
 8006696:	4618      	mov	r0, r3
 8006698:	f001 feea 	bl	8008470 <RCCEx_PLL3_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066a2:	e004      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80066ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066b6:	4b96      	ldr	r3, [pc, #600]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ba:	f023 0107 	bic.w	r1, r3, #7
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066c4:	4a92      	ldr	r2, [pc, #584]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066c6:	430b      	orrs	r3, r1
 80066c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80066ca:	e003      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f002 0304 	and.w	r3, r2, #4
 80066e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066e4:	2300      	movs	r3, #0
 80066e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	d044      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d825      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006700:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	08006755 	.word	0x08006755
 800670c:	08006721 	.word	0x08006721
 8006710:	08006737 	.word	0x08006737
 8006714:	08006755 	.word	0x08006755
 8006718:	08006755 	.word	0x08006755
 800671c:	08006755 	.word	0x08006755
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006724:	3308      	adds	r3, #8
 8006726:	2101      	movs	r1, #1
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fdef 	bl	800830c <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006734:	e00f      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	3328      	adds	r3, #40	@ 0x28
 800673c:	2101      	movs	r1, #1
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fe96 	bl	8008470 <RCCEx_PLL3_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800675e:	4b6c      	ldr	r3, [pc, #432]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006762:	f023 0107 	bic.w	r1, r3, #7
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800676e:	4a68      	ldr	r2, [pc, #416]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006770:	430b      	orrs	r3, r1
 8006772:	6593      	str	r3, [r2, #88]	@ 0x58
 8006774:	e003      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f002 0320 	and.w	r3, r2, #32
 800678a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800678e:	2300      	movs	r3, #0
 8006790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006798:	460b      	mov	r3, r1
 800679a:	4313      	orrs	r3, r2
 800679c:	d055      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067aa:	d033      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80067ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067b0:	d82c      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067b6:	d02f      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067bc:	d826      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067c2:	d02b      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80067c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067c8:	d820      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ce:	d012      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80067d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d4:	d81a      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d022      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80067da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067de:	d115      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	3308      	adds	r3, #8
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 fd8f 	bl	800830c <RCCEx_PLL2_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067f4:	e015      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	3328      	adds	r3, #40	@ 0x28
 80067fc:	2102      	movs	r1, #2
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fe36 	bl	8008470 <RCCEx_PLL3_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800680a:	e00a      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006812:	e006      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006814:	bf00      	nop
 8006816:	e004      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006818:	bf00      	nop
 800681a:	e002      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800681c:	bf00      	nop
 800681e:	e000      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800682a:	4b39      	ldr	r3, [pc, #228]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800682c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683a:	4a35      	ldr	r2, [pc, #212]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800683c:	430b      	orrs	r3, r1
 800683e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006840:	e003      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800685a:	2300      	movs	r3, #0
 800685c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006860:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006864:	460b      	mov	r3, r1
 8006866:	4313      	orrs	r3, r2
 8006868:	d058      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006872:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006876:	d033      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006878:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800687c:	d82c      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006882:	d02f      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006888:	d826      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800688a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800688e:	d02b      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006890:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006894:	d820      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800689a:	d012      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800689c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a0:	d81a      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d022      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80068a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068aa:	d115      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b0:	3308      	adds	r3, #8
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 fd29 	bl	800830c <RCCEx_PLL2_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068c0:	e015      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	3328      	adds	r3, #40	@ 0x28
 80068c8:	2102      	movs	r1, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fdd0 	bl	8008470 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068d6:	e00a      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068de:	e006      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068e0:	bf00      	nop
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068e4:	bf00      	nop
 80068e6:	e002      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068e8:	bf00      	nop
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10e      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068f6:	4b06      	ldr	r3, [pc, #24]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006906:	4a02      	ldr	r2, [pc, #8]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006908:	430b      	orrs	r3, r1
 800690a:	6593      	str	r3, [r2, #88]	@ 0x58
 800690c:	e006      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006932:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006936:	460b      	mov	r3, r1
 8006938:	4313      	orrs	r3, r2
 800693a:	d055      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800693c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006940:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006944:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006948:	d033      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800694a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800694e:	d82c      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006954:	d02f      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800695a:	d826      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800695c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006960:	d02b      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006962:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006966:	d820      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800696c:	d012      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800696e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006972:	d81a      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d022      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800697c:	d115      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	3308      	adds	r3, #8
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fcc0 	bl	800830c <RCCEx_PLL2_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006992:	e015      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006998:	3328      	adds	r3, #40	@ 0x28
 800699a:	2102      	movs	r1, #2
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fd67 	bl	8008470 <RCCEx_PLL3_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069a8:	e00a      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069b0:	e006      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069b2:	bf00      	nop
 80069b4:	e004      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80069d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069d8:	4a9d      	ldr	r2, [pc, #628]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069da:	430b      	orrs	r3, r1
 80069dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80069de:	e003      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f002 0308 	and.w	r3, r2, #8
 80069f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a02:	460b      	mov	r3, r1
 8006a04:	4313      	orrs	r3, r2
 8006a06:	d01e      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a14:	d10c      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	3328      	adds	r3, #40	@ 0x28
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fd26 	bl	8008470 <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a30:	4b87      	ldr	r3, [pc, #540]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a40:	4a83      	ldr	r2, [pc, #524]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a42:	430b      	orrs	r3, r1
 8006a44:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f002 0310 	and.w	r3, r2, #16
 8006a52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a56:	2300      	movs	r3, #0
 8006a58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a60:	460b      	mov	r3, r1
 8006a62:	4313      	orrs	r3, r2
 8006a64:	d01e      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a72:	d10c      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	3328      	adds	r3, #40	@ 0x28
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fcf7 	bl	8008470 <RCCEx_PLL3_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a8e:	4b70      	ldr	r3, [pc, #448]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006aba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d03e      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad0:	d022      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad6:	d81b      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae0:	d00b      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006ae2:	e015      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	3308      	adds	r3, #8
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fc0d 	bl	800830c <RCCEx_PLL2_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006af8:	e00f      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	3328      	adds	r3, #40	@ 0x28
 8006b00:	2102      	movs	r1, #2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 fcb4 	bl	8008470 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b0e:	e004      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b22:	4b4b      	ldr	r3, [pc, #300]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b32:	4a47      	ldr	r2, [pc, #284]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b50:	2300      	movs	r3, #0
 8006b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	d03b      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b6a:	d01f      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006b6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b70:	d818      	bhi.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b76:	d003      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006b78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b7c:	d007      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006b7e:	e011      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b80:	4b33      	ldr	r3, [pc, #204]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	4a32      	ldr	r2, [pc, #200]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00f      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b92:	3328      	adds	r3, #40	@ 0x28
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 fc6a 	bl	8008470 <RCCEx_PLL3_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bb6:	4b26      	ldr	r3, [pc, #152]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc6:	4a22      	ldr	r2, [pc, #136]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006be2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006be4:	2300      	movs	r3, #0
 8006be6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006be8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006bec:	460b      	mov	r3, r1
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	d034      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c00:	d007      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c02:	e011      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c04:	4b12      	ldr	r3, [pc, #72]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	4a11      	ldr	r2, [pc, #68]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c10:	e00e      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	3308      	adds	r3, #8
 8006c18:	2102      	movs	r1, #2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fb76 	bl	800830c <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c26:	e003      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10d      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c38:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c46:	4a02      	ldr	r2, [pc, #8]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c4c:	e006      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006c4e:	bf00      	nop
 8006c50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006c72:	460b      	mov	r3, r1
 8006c74:	4313      	orrs	r3, r2
 8006c76:	d00c      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7c:	3328      	adds	r3, #40	@ 0x28
 8006c7e:	2102      	movs	r1, #2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 fbf5 	bl	8008470 <RCCEx_PLL3_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ca4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4313      	orrs	r3, r2
 8006cac:	d038      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cba:	d018      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc0:	d811      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc6:	d014      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ccc:	d80b      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d011      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd8:	4bc3      	ldr	r3, [pc, #780]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	4ac2      	ldr	r2, [pc, #776]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cec:	e004      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d00:	4bb9      	ldr	r3, [pc, #740]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d10:	4ab5      	ldr	r2, [pc, #724]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d16:	e003      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d2e:	2300      	movs	r3, #0
 8006d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d36:	460b      	mov	r3, r1
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d3c:	4baa      	ldr	r3, [pc, #680]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d4a:	4aa7      	ldr	r2, [pc, #668]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d5e:	2300      	movs	r3, #0
 8006d60:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d6c:	4b9e      	ldr	r3, [pc, #632]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d7c:	4a9a      	ldr	r2, [pc, #616]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d90:	2300      	movs	r3, #0
 8006d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d9e:	4b92      	ldr	r3, [pc, #584]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dac:	4a8e      	ldr	r2, [pc, #568]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dae:	430b      	orrs	r3, r1
 8006db0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dce:	4b86      	ldr	r3, [pc, #536]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	4a85      	ldr	r2, [pc, #532]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dd8:	6113      	str	r3, [r2, #16]
 8006dda:	4b83      	ldr	r3, [pc, #524]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ddc:	6919      	ldr	r1, [r3, #16]
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006de6:	4a80      	ldr	r2, [pc, #512]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006df8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e02:	460b      	mov	r3, r1
 8006e04:	4313      	orrs	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e08:	4b77      	ldr	r3, [pc, #476]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e0c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e16:	4a74      	ldr	r2, [pc, #464]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d00a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e38:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e48:	4a67      	ldr	r2, [pc, #412]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	2100      	movs	r1, #0
 8006e58:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e64:	460b      	mov	r3, r1
 8006e66:	4313      	orrs	r3, r2
 8006e68:	d011      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	3308      	adds	r3, #8
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fa4a 	bl	800830c <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	2100      	movs	r1, #0
 8006e98:	6239      	str	r1, [r7, #32]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	d011      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	3308      	adds	r3, #8
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fa2a 	bl	800830c <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	61b9      	str	r1, [r7, #24]
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	d011      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fa0a 	bl	800830c <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	2100      	movs	r1, #0
 8006f18:	6139      	str	r1, [r7, #16]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d011      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	3328      	adds	r3, #40	@ 0x28
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fa9c 	bl	8008470 <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	2100      	movs	r1, #0
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f64:	460b      	mov	r3, r1
 8006f66:	4313      	orrs	r3, r2
 8006f68:	d011      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	3328      	adds	r3, #40	@ 0x28
 8006f70:	2101      	movs	r1, #1
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fa7c 	bl	8008470 <RCCEx_PLL3_Config>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	2100      	movs	r1, #0
 8006f98:	6039      	str	r1, [r7, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d011      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	3328      	adds	r3, #40	@ 0x28
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 fa5c 	bl	8008470 <RCCEx_PLL3_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006fce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e000      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe8:	58024400 	.word	0x58024400

08006fec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b090      	sub	sp, #64	@ 0x40
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006ffe:	430b      	orrs	r3, r1
 8007000:	f040 8094 	bne.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007004:	4b9e      	ldr	r3, [pc, #632]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	2b04      	cmp	r3, #4
 8007012:	f200 8087 	bhi.w	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007016:	a201      	add	r2, pc, #4	@ (adr r2, 800701c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007031 	.word	0x08007031
 8007020:	08007059 	.word	0x08007059
 8007024:	08007081 	.word	0x08007081
 8007028:	0800711d 	.word	0x0800711d
 800702c:	080070a9 	.word	0x080070a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007030:	4b93      	ldr	r3, [pc, #588]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800703c:	d108      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800703e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007042:	4618      	mov	r0, r3
 8007044:	f001 f810 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800704c:	f000 bd45 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007054:	f000 bd41 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007058:	4b89      	ldr	r3, [pc, #548]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007064:	d108      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007066:	f107 0318 	add.w	r3, r7, #24
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fd54 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007074:	f000 bd31 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800707c:	f000 bd2d 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007080:	4b7f      	ldr	r3, [pc, #508]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800708c:	d108      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800708e:	f107 030c 	add.w	r3, r7, #12
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fe94 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800709c:	f000 bd1d 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a4:	f000 bd19 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070a8:	4b75      	ldr	r3, [pc, #468]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070b2:	4b73      	ldr	r3, [pc, #460]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	4a6d      	ldr	r2, [pc, #436]	@ (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d6:	e01f      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070d8:	4b69      	ldr	r3, [pc, #420]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e4:	d106      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80070e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070ec:	d102      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070ee:	4b66      	ldr	r3, [pc, #408]	@ (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f2:	e011      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070f4:	4b62      	ldr	r3, [pc, #392]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007100:	d106      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007108:	d102      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800710a:	4b60      	ldr	r3, [pc, #384]	@ (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800710e:	e003      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007114:	f000 bce1 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007118:	f000 bcdf 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800711c:	4b5c      	ldr	r3, [pc, #368]	@ (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007120:	f000 bcdb 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007128:	f000 bcd7 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800712c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007130:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007134:	430b      	orrs	r3, r1
 8007136:	f040 80ad 	bne.w	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800713a:	4b51      	ldr	r3, [pc, #324]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800713c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800714a:	d056      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007152:	f200 8090 	bhi.w	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	2bc0      	cmp	r3, #192	@ 0xc0
 800715a:	f000 8088 	beq.w	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	2bc0      	cmp	r3, #192	@ 0xc0
 8007162:	f200 8088 	bhi.w	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	2b80      	cmp	r3, #128	@ 0x80
 800716a:	d032      	beq.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	2b80      	cmp	r3, #128	@ 0x80
 8007170:	f200 8081 	bhi.w	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	2b40      	cmp	r3, #64	@ 0x40
 800717e:	d014      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007180:	e079      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007182:	4b3f      	ldr	r3, [pc, #252]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800718a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800718e:	d108      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007194:	4618      	mov	r0, r3
 8007196:	f000 ff67 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800719e:	f000 bc9c 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a6:	f000 bc98 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071aa:	4b35      	ldr	r3, [pc, #212]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071b6:	d108      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071b8:	f107 0318 	add.w	r3, r7, #24
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fcab 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c6:	f000 bc88 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ce:	f000 bc84 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071de:	d108      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fdeb 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ee:	f000 bc74 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f6:	f000 bc70 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071fa:	4b21      	ldr	r3, [pc, #132]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007204:	4b1e      	ldr	r3, [pc, #120]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b04      	cmp	r3, #4
 800720e:	d10c      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007216:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	08db      	lsrs	r3, r3, #3
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	4a18      	ldr	r2, [pc, #96]	@ (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007222:	fa22 f303 	lsr.w	r3, r2, r3
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007228:	e01f      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800722a:	4b15      	ldr	r3, [pc, #84]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007236:	d106      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800723e:	d102      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007240:	4b11      	ldr	r3, [pc, #68]	@ (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007244:	e011      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007246:	4b0e      	ldr	r3, [pc, #56]	@ (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007252:	d106      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725a:	d102      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800725c:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007260:	e003      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007266:	f000 bc38 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800726a:	f000 bc36 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800726e:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007272:	f000 bc32 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727a:	f000 bc2e 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
 8007284:	03d09000 	.word	0x03d09000
 8007288:	003d0900 	.word	0x003d0900
 800728c:	007a1200 	.word	0x007a1200
 8007290:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007298:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800729c:	430b      	orrs	r3, r1
 800729e:	f040 809c 	bne.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80072a2:	4b9e      	ldr	r3, [pc, #632]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80072aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072b2:	d054      	beq.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072ba:	f200 808b 	bhi.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072c4:	f000 8083 	beq.w	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072ce:	f200 8081 	bhi.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d8:	d02f      	beq.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e0:	d878      	bhi.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ee:	d012      	beq.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80072f0:	e070      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072f2:	4b8a      	ldr	r3, [pc, #552]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072fe:	d107      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007304:	4618      	mov	r0, r3
 8007306:	f000 feaf 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800730a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800730e:	e3e4      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007314:	e3e1      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007316:	4b81      	ldr	r3, [pc, #516]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800731e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007322:	d107      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007324:	f107 0318 	add.w	r3, r7, #24
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fbf5 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007332:	e3d2      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007338:	e3cf      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800733a:	4b78      	ldr	r3, [pc, #480]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007346:	d107      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007348:	f107 030c 	add.w	r3, r7, #12
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fd37 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007356:	e3c0      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800735c:	e3bd      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800735e:	4b6f      	ldr	r3, [pc, #444]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007362:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007368:	4b6c      	ldr	r3, [pc, #432]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b04      	cmp	r3, #4
 8007372:	d10c      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800737a:	4b68      	ldr	r3, [pc, #416]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	08db      	lsrs	r3, r3, #3
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	4a66      	ldr	r2, [pc, #408]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007386:	fa22 f303 	lsr.w	r3, r2, r3
 800738a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800738c:	e01e      	b.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800738e:	4b63      	ldr	r3, [pc, #396]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800739a:	d106      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073a2:	d102      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073a4:	4b5f      	ldr	r3, [pc, #380]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80073a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a8:	e010      	b.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073aa:	4b5c      	ldr	r3, [pc, #368]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073b6:	d106      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073be:	d102      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073c0:	4b59      	ldr	r3, [pc, #356]	@ (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c4:	e002      	b.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073ca:	e386      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073cc:	e385      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073ce:	4b57      	ldr	r3, [pc, #348]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d2:	e382      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d8:	e37f      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80073da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80073e2:	430b      	orrs	r3, r1
 80073e4:	f040 80a7 	bne.w	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80073e8:	4b4c      	ldr	r3, [pc, #304]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80073f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073f8:	d055      	beq.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007400:	f200 8096 	bhi.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800740a:	f000 8084 	beq.w	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007414:	f200 808c 	bhi.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800741e:	d030      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007426:	f200 8083 	bhi.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007436:	d012      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007438:	e07a      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800743a:	4b38      	ldr	r3, [pc, #224]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007446:	d107      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fe0b 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007456:	e340      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745c:	e33d      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800745e:	4b2f      	ldr	r3, [pc, #188]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800746a:	d107      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746c:	f107 0318 	add.w	r3, r7, #24
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fb51 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800747a:	e32e      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007480:	e32b      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007482:	4b26      	ldr	r3, [pc, #152]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800748a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748e:	d107      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fc93 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800749e:	e31c      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a4:	e319      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074a6:	4b1d      	ldr	r3, [pc, #116]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074b0:	4b1a      	ldr	r3, [pc, #104]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d10c      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074c2:	4b16      	ldr	r3, [pc, #88]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	08db      	lsrs	r3, r3, #3
 80074c8:	f003 0303 	and.w	r3, r3, #3
 80074cc:	4a14      	ldr	r2, [pc, #80]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80074ce:	fa22 f303 	lsr.w	r3, r2, r3
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d4:	e01e      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074d6:	4b11      	ldr	r3, [pc, #68]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e2:	d106      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80074e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ea:	d102      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80074ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f0:	e010      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074f2:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074fe:	d106      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007506:	d102      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007508:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800750c:	e002      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007512:	e2e2      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007514:	e2e1      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007516:	4b05      	ldr	r3, [pc, #20]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751a:	e2de      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800751c:	58024400 	.word	0x58024400
 8007520:	03d09000 	.word	0x03d09000
 8007524:	003d0900 	.word	0x003d0900
 8007528:	007a1200 	.word	0x007a1200
 800752c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007534:	e2d1      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800753a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800753e:	430b      	orrs	r3, r1
 8007540:	f040 809c 	bne.w	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007544:	4b93      	ldr	r3, [pc, #588]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007548:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800754c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800754e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007554:	d054      	beq.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800755c:	f200 808b 	bhi.w	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007566:	f000 8083 	beq.w	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007570:	f200 8081 	bhi.w	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800757a:	d02f      	beq.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007582:	d878      	bhi.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800758a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007590:	d012      	beq.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007592:	e070      	b.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007594:	4b7f      	ldr	r3, [pc, #508]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075a0:	d107      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fd5e 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b0:	e293      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b6:	e290      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075b8:	4b76      	ldr	r3, [pc, #472]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075c4:	d107      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c6:	f107 0318 	add.w	r3, r7, #24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 faa4 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d4:	e281      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075da:	e27e      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e8:	d107      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ea:	f107 030c 	add.w	r3, r7, #12
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fbe6 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f8:	e26f      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075fe:	e26c      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007600:	4b64      	ldr	r3, [pc, #400]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800760a:	4b62      	ldr	r3, [pc, #392]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b04      	cmp	r3, #4
 8007614:	d10c      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007618:	2b00      	cmp	r3, #0
 800761a:	d109      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800761c:	4b5d      	ldr	r3, [pc, #372]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	4a5c      	ldr	r2, [pc, #368]	@ (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800762e:	e01e      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007630:	4b58      	ldr	r3, [pc, #352]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763c:	d106      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800763e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007644:	d102      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007646:	4b55      	ldr	r3, [pc, #340]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800764a:	e010      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800764c:	4b51      	ldr	r3, [pc, #324]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007658:	d106      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800765a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007660:	d102      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007662:	4b4f      	ldr	r3, [pc, #316]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007666:	e002      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800766c:	e235      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800766e:	e234      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007670:	4b4c      	ldr	r3, [pc, #304]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007674:	e231      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767a:	e22e      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800767c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007680:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007684:	430b      	orrs	r3, r1
 8007686:	f040 808f 	bne.w	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800768a:	4b42      	ldr	r3, [pc, #264]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800768c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007692:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800769a:	d06b      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076a2:	d874      	bhi.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076aa:	d056      	beq.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076b2:	d86c      	bhi.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076ba:	d03b      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076c2:	d864      	bhi.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ca:	d021      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d2:	d85c      	bhi.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e0:	d004      	beq.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80076e2:	e054      	b.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80076e4:	f7fe fa4c 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 80076e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076ea:	e1f6      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076ec:	4b29      	ldr	r3, [pc, #164]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f8:	d107      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fa:	f107 0318 	add.w	r3, r7, #24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fa0a 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007708:	e1e7      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770e:	e1e4      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007710:	4b20      	ldr	r3, [pc, #128]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771c:	d107      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800771e:	f107 030c 	add.w	r3, r7, #12
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fb4c 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772c:	e1d5      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007732:	e1d2      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007734:	4b17      	ldr	r3, [pc, #92]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d109      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007740:	4b14      	ldr	r3, [pc, #80]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	08db      	lsrs	r3, r3, #3
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	4a13      	ldr	r2, [pc, #76]	@ (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
 8007750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007752:	e1c2      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007758:	e1bf      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800775a:	4b0e      	ldr	r3, [pc, #56]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007766:	d102      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007768:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800776c:	e1b5      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007772:	e1b2      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007774:	4b07      	ldr	r3, [pc, #28]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007780:	d102      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007782:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007786:	e1a8      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800778c:	e1a5      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007792:	e1a2      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	003d0900 	.word	0x003d0900
 80077a0:	007a1200 	.word	0x007a1200
 80077a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80077a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80077b0:	430b      	orrs	r3, r1
 80077b2:	d173      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80077b4:	4b9c      	ldr	r3, [pc, #624]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80077bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077c4:	d02f      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077cc:	d863      	bhi.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80077ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077da:	d012      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80077dc:	e05b      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077de:	4b92      	ldr	r3, [pc, #584]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077ea:	d107      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ec:	f107 0318 	add.w	r3, r7, #24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f991 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fa:	e16e      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007800:	e16b      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007802:	4b89      	ldr	r3, [pc, #548]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800780a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800780e:	d107      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007810:	f107 030c 	add.w	r3, r7, #12
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fad3 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800781e:	e15c      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007824:	e159      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007826:	4b80      	ldr	r3, [pc, #512]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007830:	4b7d      	ldr	r3, [pc, #500]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b04      	cmp	r3, #4
 800783a:	d10c      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800783c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783e:	2b00      	cmp	r3, #0
 8007840:	d109      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007842:	4b79      	ldr	r3, [pc, #484]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	08db      	lsrs	r3, r3, #3
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	4a77      	ldr	r2, [pc, #476]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800784e:	fa22 f303 	lsr.w	r3, r2, r3
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007854:	e01e      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007856:	4b74      	ldr	r3, [pc, #464]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800785e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007862:	d106      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800786a:	d102      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800786c:	4b70      	ldr	r3, [pc, #448]	@ (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007870:	e010      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007872:	4b6d      	ldr	r3, [pc, #436]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800787a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800787e:	d106      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007886:	d102      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007888:	4b6a      	ldr	r3, [pc, #424]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800788c:	e002      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007892:	e122      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007894:	e121      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789a:	e11e      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800789c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80078a4:	430b      	orrs	r3, r1
 80078a6:	d133      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80078a8:	4b5f      	ldr	r3, [pc, #380]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80078b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078be:	d012      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80078c0:	e023      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078c2:	4b59      	ldr	r3, [pc, #356]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ce:	d107      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fbc7 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078de:	e0fc      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e4:	e0f9      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078e6:	4b50      	ldr	r3, [pc, #320]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078f2:	d107      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f4:	f107 0318 	add.w	r3, r7, #24
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 f90d 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007902:	e0ea      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007908:	e0e7      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790e:	e0e4      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007914:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007918:	430b      	orrs	r3, r1
 800791a:	f040 808d 	bne.w	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800791e:	4b42      	ldr	r3, [pc, #264]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007922:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007926:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800792e:	d06b      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007936:	d874      	bhi.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793e:	d056      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007946:	d86c      	bhi.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800794e:	d03b      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007956:	d864      	bhi.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800795e:	d021      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007966:	d85c      	bhi.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007974:	d004      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007976:	e054      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007978:	f000 f8b8 	bl	8007aec <HAL_RCCEx_GetD3PCLK1Freq>
 800797c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800797e:	e0ac      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007980:	4b29      	ldr	r3, [pc, #164]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800798c:	d107      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800798e:	f107 0318 	add.w	r3, r7, #24
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f8c0 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800799c:	e09d      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a2:	e09a      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079a4:	4b20      	ldr	r3, [pc, #128]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d107      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fa02 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c0:	e08b      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c6:	e088      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079c8:	4b17      	ldr	r3, [pc, #92]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d109      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d4:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	08db      	lsrs	r3, r3, #3
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	4a13      	ldr	r2, [pc, #76]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80079e0:	fa22 f303 	lsr.w	r3, r2, r3
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e6:	e078      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ec:	e075      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80079ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079fa:	d102      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80079fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80079fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a00:	e06b      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a06:	e068      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a08:	4b07      	ldr	r3, [pc, #28]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007a16:	4b07      	ldr	r3, [pc, #28]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a1a:	e05e      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a20:	e05b      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a26:	e058      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	03d09000 	.word	0x03d09000
 8007a30:	003d0900 	.word	0x003d0900
 8007a34:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007a40:	430b      	orrs	r3, r1
 8007a42:	d148      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007a44:	4b27      	ldr	r3, [pc, #156]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a54:	d02a      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a5c:	d838      	bhi.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6a:	d00d      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007a6c:	e030      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7a:	d102      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a80:	e02b      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a86:	e028      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a88:	4b16      	ldr	r3, [pc, #88]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a94:	d107      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fae4 	bl	8008068 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa4:	e019      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aaa:	e016      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ab8:	d107      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f82a 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ac8:	e007      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ace:	e004      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad4:	e001      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3740      	adds	r7, #64	@ 0x40
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	007a1200 	.word	0x007a1200

08007aec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007af0:	f7fe f816 	bl	8005b20 <HAL_RCC_GetHCLKFreq>
 8007af4:	4602      	mov	r2, r0
 8007af6:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	4904      	ldr	r1, [pc, #16]	@ (8007b14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b02:	5ccb      	ldrb	r3, [r1, r3]
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	58024400 	.word	0x58024400
 8007b14:	08009b14 	.word	0x08009b14

08007b18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b089      	sub	sp, #36	@ 0x24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b20:	4ba1      	ldr	r3, [pc, #644]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b2a:	4b9f      	ldr	r3, [pc, #636]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2e:	0b1b      	lsrs	r3, r3, #12
 8007b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b36:	4b9c      	ldr	r3, [pc, #624]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3a:	091b      	lsrs	r3, r3, #4
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007b42:	4b99      	ldr	r3, [pc, #612]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8111 	beq.w	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f000 8083 	beq.w	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	f200 80a1 	bhi.w	8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d056      	beq.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b82:	e099      	b.n	8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b84:	4b88      	ldr	r3, [pc, #544]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d02d      	beq.n	8007bec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b90:	4b85      	ldr	r3, [pc, #532]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	08db      	lsrs	r3, r3, #3
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	4a84      	ldr	r2, [pc, #528]	@ (8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bba:	4b7b      	ldr	r3, [pc, #492]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bea:	e087      	b.n	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2e:	e065      	b.n	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c42:	4b59      	ldr	r3, [pc, #356]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c72:	e043      	b.n	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	4b48      	ldr	r3, [pc, #288]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb6:	e021      	b.n	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cca:	4b37      	ldr	r3, [pc, #220]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d00:	0a5b      	lsrs	r3, r3, #9
 8007d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d22:	ee17 2a90 	vmov	r2, s15
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2e:	0c1b      	lsrs	r3, r3, #16
 8007d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d50:	ee17 2a90 	vmov	r2, s15
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d58:	4b13      	ldr	r3, [pc, #76]	@ (8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d7e:	ee17 2a90 	vmov	r2, s15
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d86:	e008      	b.n	8007d9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	609a      	str	r2, [r3, #8]
}
 8007d9a:	bf00      	nop
 8007d9c:	3724      	adds	r7, #36	@ 0x24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	58024400 	.word	0x58024400
 8007dac:	03d09000 	.word	0x03d09000
 8007db0:	46000000 	.word	0x46000000
 8007db4:	4c742400 	.word	0x4c742400
 8007db8:	4a742400 	.word	0x4a742400
 8007dbc:	4af42400 	.word	0x4af42400

08007dc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b089      	sub	sp, #36	@ 0x24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dc8:	4ba1      	ldr	r3, [pc, #644]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd6:	0d1b      	lsrs	r3, r3, #20
 8007dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ddc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dde:	4b9c      	ldr	r3, [pc, #624]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007dea:	4b99      	ldr	r3, [pc, #612]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dee:	08db      	lsrs	r3, r3, #3
 8007df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8111 	beq.w	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	f000 8083 	beq.w	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	f200 80a1 	bhi.w	8007f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d056      	beq.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e2a:	e099      	b.n	8007f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e2c:	4b88      	ldr	r3, [pc, #544]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d02d      	beq.n	8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e38:	4b85      	ldr	r3, [pc, #532]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	08db      	lsrs	r3, r3, #3
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	4a84      	ldr	r2, [pc, #528]	@ (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e44:	fa22 f303 	lsr.w	r3, r2, r3
 8007e48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	ee07 3a90 	vmov	s15, r3
 8007e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e62:	4b7b      	ldr	r3, [pc, #492]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e92:	e087      	b.n	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ed6:	e065      	b.n	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eea:	4b59      	ldr	r3, [pc, #356]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f1a:	e043      	b.n	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2e:	4b48      	ldr	r3, [pc, #288]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f5e:	e021      	b.n	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f72:	4b37      	ldr	r3, [pc, #220]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa8:	0a5b      	lsrs	r3, r3, #9
 8007faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fca:	ee17 2a90 	vmov	r2, s15
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff8:	ee17 2a90 	vmov	r2, s15
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008000:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800801a:	edd7 6a07 	vldr	s13, [r7, #28]
 800801e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008026:	ee17 2a90 	vmov	r2, s15
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800802e:	e008      	b.n	8008042 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	609a      	str	r2, [r3, #8]
}
 8008042:	bf00      	nop
 8008044:	3724      	adds	r7, #36	@ 0x24
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	58024400 	.word	0x58024400
 8008054:	03d09000 	.word	0x03d09000
 8008058:	46000000 	.word	0x46000000
 800805c:	4c742400 	.word	0x4c742400
 8008060:	4a742400 	.word	0x4a742400
 8008064:	4af42400 	.word	0x4af42400

08008068 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008068:	b480      	push	{r7}
 800806a:	b089      	sub	sp, #36	@ 0x24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008070:	4ba0      	ldr	r3, [pc, #640]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008074:	f003 0303 	and.w	r3, r3, #3
 8008078:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800807a:	4b9e      	ldr	r3, [pc, #632]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008084:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008086:	4b9b      	ldr	r3, [pc, #620]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008090:	4b98      	ldr	r3, [pc, #608]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008094:	08db      	lsrs	r3, r3, #3
 8008096:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	fb02 f303 	mul.w	r3, r2, r3
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8111 	beq.w	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	f000 8083 	beq.w	80081c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	f200 80a1 	bhi.w	8008206 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d056      	beq.n	800817e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80080d0:	e099      	b.n	8008206 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d2:	4b88      	ldr	r3, [pc, #544]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d02d      	beq.n	800813a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080de:	4b85      	ldr	r3, [pc, #532]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	4a83      	ldr	r2, [pc, #524]	@ (80082f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80080ea:	fa22 f303 	lsr.w	r3, r2, r3
 80080ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008108:	4b7a      	ldr	r3, [pc, #488]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008118:	ed97 6a03 	vldr	s12, [r7, #12]
 800811c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800812c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008134:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008138:	e087      	b.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	ee07 3a90 	vmov	s15, r3
 8008140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008144:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814c:	4b69      	ldr	r3, [pc, #420]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800814e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008154:	ee07 3a90 	vmov	s15, r3
 8008158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008160:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008178:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800817c:	e065      	b.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	ee07 3a90 	vmov	s15, r3
 8008184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008188:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008304 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800818c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008190:	4b58      	ldr	r3, [pc, #352]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081c0:	e043      	b.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	ee07 3a90 	vmov	s15, r3
 80081c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081cc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80081d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d4:	4b47      	ldr	r3, [pc, #284]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008200:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008204:	e021      	b.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008210:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008300 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008218:	4b36      	ldr	r3, [pc, #216]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008228:	ed97 6a03 	vldr	s12, [r7, #12]
 800822c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008238:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800823c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008248:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800824a:	4b2a      	ldr	r3, [pc, #168]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	0a5b      	lsrs	r3, r3, #9
 8008250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008264:	edd7 6a07 	vldr	s13, [r7, #28]
 8008268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800826c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008270:	ee17 2a90 	vmov	r2, s15
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008278:	4b1e      	ldr	r3, [pc, #120]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800827a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800828e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008292:	edd7 6a07 	vldr	s13, [r7, #28]
 8008296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800829a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800829e:	ee17 2a90 	vmov	r2, s15
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80082a6:	4b13      	ldr	r3, [pc, #76]	@ (80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082aa:	0e1b      	lsrs	r3, r3, #24
 80082ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082cc:	ee17 2a90 	vmov	r2, s15
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80082d4:	e008      	b.n	80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	609a      	str	r2, [r3, #8]
}
 80082e8:	bf00      	nop
 80082ea:	3724      	adds	r7, #36	@ 0x24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	58024400 	.word	0x58024400
 80082f8:	03d09000 	.word	0x03d09000
 80082fc:	46000000 	.word	0x46000000
 8008300:	4c742400 	.word	0x4c742400
 8008304:	4a742400 	.word	0x4a742400
 8008308:	4af42400 	.word	0x4af42400

0800830c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800831a:	4b53      	ldr	r3, [pc, #332]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 800831c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d101      	bne.n	800832a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e099      	b.n	800845e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800832a:	4b4f      	ldr	r3, [pc, #316]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a4e      	ldr	r2, [pc, #312]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008330:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008336:	f7f9 fa1d 	bl	8001774 <HAL_GetTick>
 800833a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800833c:	e008      	b.n	8008350 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800833e:	f7f9 fa19 	bl	8001774 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e086      	b.n	800845e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008350:	4b45      	ldr	r3, [pc, #276]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f0      	bne.n	800833e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800835c:	4b42      	ldr	r3, [pc, #264]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 800835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008360:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	031b      	lsls	r3, r3, #12
 800836a:	493f      	ldr	r1, [pc, #252]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	3b01      	subs	r3, #1
 8008376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	3b01      	subs	r3, #1
 8008380:	025b      	lsls	r3, r3, #9
 8008382:	b29b      	uxth	r3, r3
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	3b01      	subs	r3, #1
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	3b01      	subs	r3, #1
 800839a:	061b      	lsls	r3, r3, #24
 800839c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083a0:	4931      	ldr	r1, [pc, #196]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083a6:	4b30      	ldr	r3, [pc, #192]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	492d      	ldr	r1, [pc, #180]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083bc:	f023 0220 	bic.w	r2, r3, #32
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	4928      	ldr	r1, [pc, #160]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083ca:	4b27      	ldr	r3, [pc, #156]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	4a26      	ldr	r2, [pc, #152]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083d0:	f023 0310 	bic.w	r3, r3, #16
 80083d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083d6:	4b24      	ldr	r3, [pc, #144]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083da:	4b24      	ldr	r3, [pc, #144]	@ (800846c <RCCEx_PLL2_Config+0x160>)
 80083dc:	4013      	ands	r3, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	69d2      	ldr	r2, [r2, #28]
 80083e2:	00d2      	lsls	r2, r2, #3
 80083e4:	4920      	ldr	r1, [pc, #128]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083f0:	f043 0310 	orr.w	r3, r3, #16
 80083f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	4a19      	ldr	r2, [pc, #100]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008402:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008406:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008408:	e00f      	b.n	800842a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d106      	bne.n	800841e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008410:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	4a14      	ldr	r2, [pc, #80]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800841a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800841c:	e005      	b.n	800842a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	4a11      	ldr	r2, [pc, #68]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008424:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008428:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800842a:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a0e      	ldr	r2, [pc, #56]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008430:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008436:	f7f9 f99d 	bl	8001774 <HAL_GetTick>
 800843a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800843c:	e008      	b.n	8008450 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800843e:	f7f9 f999 	bl	8001774 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e006      	b.n	800845e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008450:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <RCCEx_PLL2_Config+0x15c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f0      	beq.n	800843e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	58024400 	.word	0x58024400
 800846c:	ffff0007 	.word	0xffff0007

08008470 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800847e:	4b53      	ldr	r3, [pc, #332]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	2b03      	cmp	r3, #3
 8008488:	d101      	bne.n	800848e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e099      	b.n	80085c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800848e:	4b4f      	ldr	r3, [pc, #316]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a4e      	ldr	r2, [pc, #312]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800849a:	f7f9 f96b 	bl	8001774 <HAL_GetTick>
 800849e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084a0:	e008      	b.n	80084b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084a2:	f7f9 f967 	bl	8001774 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e086      	b.n	80085c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084b4:	4b45      	ldr	r3, [pc, #276]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f0      	bne.n	80084a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084c0:	4b42      	ldr	r3, [pc, #264]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 80084c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	051b      	lsls	r3, r3, #20
 80084ce:	493f      	ldr	r1, [pc, #252]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	3b01      	subs	r3, #1
 80084da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	025b      	lsls	r3, r3, #9
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	041b      	lsls	r3, r3, #16
 80084f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	061b      	lsls	r3, r3, #24
 8008500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008504:	4931      	ldr	r1, [pc, #196]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008506:	4313      	orrs	r3, r2
 8008508:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800850a:	4b30      	ldr	r3, [pc, #192]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 800850c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	492d      	ldr	r1, [pc, #180]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008518:	4313      	orrs	r3, r2
 800851a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800851c:	4b2b      	ldr	r3, [pc, #172]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	4928      	ldr	r1, [pc, #160]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 800852a:	4313      	orrs	r3, r2
 800852c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800852e:	4b27      	ldr	r3, [pc, #156]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008532:	4a26      	ldr	r2, [pc, #152]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800853a:	4b24      	ldr	r3, [pc, #144]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 800853c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800853e:	4b24      	ldr	r3, [pc, #144]	@ (80085d0 <RCCEx_PLL3_Config+0x160>)
 8008540:	4013      	ands	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	69d2      	ldr	r2, [r2, #28]
 8008546:	00d2      	lsls	r2, r2, #3
 8008548:	4920      	ldr	r1, [pc, #128]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 800854a:	4313      	orrs	r3, r2
 800854c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800854e:	4b1f      	ldr	r3, [pc, #124]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008552:	4a1e      	ldr	r2, [pc, #120]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d106      	bne.n	800856e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008560:	4b1a      	ldr	r3, [pc, #104]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008564:	4a19      	ldr	r2, [pc, #100]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008566:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800856a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800856c:	e00f      	b.n	800858e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d106      	bne.n	8008582 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008574:	4b15      	ldr	r3, [pc, #84]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4a14      	ldr	r2, [pc, #80]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 800857a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800857e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008580:	e005      	b.n	800858e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008582:	4b12      	ldr	r3, [pc, #72]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008586:	4a11      	ldr	r2, [pc, #68]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008588:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800858c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800858e:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a0e      	ldr	r2, [pc, #56]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 8008594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800859a:	f7f9 f8eb 	bl	8001774 <HAL_GetTick>
 800859e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085a0:	e008      	b.n	80085b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085a2:	f7f9 f8e7 	bl	8001774 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d901      	bls.n	80085b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e006      	b.n	80085c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <RCCEx_PLL3_Config+0x15c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f0      	beq.n	80085a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400
 80085d0:	ffff0007 	.word	0xffff0007

080085d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e049      	b.n	800867a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7f8 fe72 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f000 f836 	bl	8008684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a46      	ldr	r2, [pc, #280]	@ (80087b0 <TIM_Base_SetConfig+0x12c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d013      	beq.n	80086c4 <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a2:	d00f      	beq.n	80086c4 <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a43      	ldr	r2, [pc, #268]	@ (80087b4 <TIM_Base_SetConfig+0x130>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00b      	beq.n	80086c4 <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a42      	ldr	r2, [pc, #264]	@ (80087b8 <TIM_Base_SetConfig+0x134>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d007      	beq.n	80086c4 <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a41      	ldr	r2, [pc, #260]	@ (80087bc <TIM_Base_SetConfig+0x138>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_Base_SetConfig+0x40>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a40      	ldr	r2, [pc, #256]	@ (80087c0 <TIM_Base_SetConfig+0x13c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d108      	bne.n	80086d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a35      	ldr	r2, [pc, #212]	@ (80087b0 <TIM_Base_SetConfig+0x12c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d01f      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e4:	d01b      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a32      	ldr	r2, [pc, #200]	@ (80087b4 <TIM_Base_SetConfig+0x130>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d017      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a31      	ldr	r2, [pc, #196]	@ (80087b8 <TIM_Base_SetConfig+0x134>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d013      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a30      	ldr	r2, [pc, #192]	@ (80087bc <TIM_Base_SetConfig+0x138>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00f      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a2f      	ldr	r2, [pc, #188]	@ (80087c0 <TIM_Base_SetConfig+0x13c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00b      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a2e      	ldr	r2, [pc, #184]	@ (80087c4 <TIM_Base_SetConfig+0x140>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2d      	ldr	r2, [pc, #180]	@ (80087c8 <TIM_Base_SetConfig+0x144>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_Base_SetConfig+0x9a>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2c      	ldr	r2, [pc, #176]	@ (80087cc <TIM_Base_SetConfig+0x148>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d108      	bne.n	8008730 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a16      	ldr	r2, [pc, #88]	@ (80087b0 <TIM_Base_SetConfig+0x12c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00f      	beq.n	800877c <TIM_Base_SetConfig+0xf8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a18      	ldr	r2, [pc, #96]	@ (80087c0 <TIM_Base_SetConfig+0x13c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d00b      	beq.n	800877c <TIM_Base_SetConfig+0xf8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a17      	ldr	r2, [pc, #92]	@ (80087c4 <TIM_Base_SetConfig+0x140>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d007      	beq.n	800877c <TIM_Base_SetConfig+0xf8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a16      	ldr	r2, [pc, #88]	@ (80087c8 <TIM_Base_SetConfig+0x144>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d003      	beq.n	800877c <TIM_Base_SetConfig+0xf8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a15      	ldr	r2, [pc, #84]	@ (80087cc <TIM_Base_SetConfig+0x148>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d103      	bne.n	8008784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b01      	cmp	r3, #1
 8008794:	d105      	bne.n	80087a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f023 0201 	bic.w	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	611a      	str	r2, [r3, #16]
  }
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	40010000 	.word	0x40010000
 80087b4:	40000400 	.word	0x40000400
 80087b8:	40000800 	.word	0x40000800
 80087bc:	40000c00 	.word	0x40000c00
 80087c0:	40010400 	.word	0x40010400
 80087c4:	40014000 	.word	0x40014000
 80087c8:	40014400 	.word	0x40014400
 80087cc:	40014800 	.word	0x40014800

080087d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d101      	bne.n	80087e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e06d      	b.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a30      	ldr	r2, [pc, #192]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2f      	ldr	r2, [pc, #188]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d108      	bne.n	800882e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008822:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a20      	ldr	r2, [pc, #128]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d022      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800885a:	d01d      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1d      	ldr	r2, [pc, #116]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a1c      	ldr	r2, [pc, #112]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1a      	ldr	r2, [pc, #104]	@ (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a15      	ldr	r2, [pc, #84]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a15      	ldr	r2, [pc, #84]	@ (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d10c      	bne.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800889e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40000400 	.word	0x40000400
 80088dc:	40000800 	.word	0x40000800
 80088e0:	40000c00 	.word	0x40000c00
 80088e4:	40001800 	.word	0x40001800
 80088e8:	40014000 	.word	0x40014000

080088ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e042      	b.n	8008984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7f8 fd09 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2224      	movs	r2, #36	@ 0x24
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0201 	bic.w	r2, r2, #1
 800892c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fd90 	bl	800945c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f825 	bl	800898c <UART_SetConfig>
 8008942:	4603      	mov	r3, r0
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e01b      	b.n	8008984 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800895a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800896a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fe0f 	bl	80095a0 <UART_CheckIdleState>
 8008982:	4603      	mov	r3, r0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800898c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008990:	b092      	sub	sp, #72	@ 0x48
 8008992:	af00      	add	r7, sp, #0
 8008994:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	431a      	orrs	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4bbe      	ldr	r3, [pc, #760]	@ (8008cb4 <UART_SetConfig+0x328>)
 80089bc:	4013      	ands	r3, r2
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089c4:	430b      	orrs	r3, r1
 80089c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4ab3      	ldr	r2, [pc, #716]	@ (8008cb8 <UART_SetConfig+0x32c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d004      	beq.n	80089f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089f4:	4313      	orrs	r3, r2
 80089f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	4baf      	ldr	r3, [pc, #700]	@ (8008cbc <UART_SetConfig+0x330>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a12:	f023 010f 	bic.w	r1, r3, #15
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4aa6      	ldr	r2, [pc, #664]	@ (8008cc0 <UART_SetConfig+0x334>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d177      	bne.n	8008b1c <UART_SetConfig+0x190>
 8008a2c:	4ba5      	ldr	r3, [pc, #660]	@ (8008cc4 <UART_SetConfig+0x338>)
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a34:	2b28      	cmp	r3, #40	@ 0x28
 8008a36:	d86d      	bhi.n	8008b14 <UART_SetConfig+0x188>
 8008a38:	a201      	add	r2, pc, #4	@ (adr r2, 8008a40 <UART_SetConfig+0xb4>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008ae5 	.word	0x08008ae5
 8008a44:	08008b15 	.word	0x08008b15
 8008a48:	08008b15 	.word	0x08008b15
 8008a4c:	08008b15 	.word	0x08008b15
 8008a50:	08008b15 	.word	0x08008b15
 8008a54:	08008b15 	.word	0x08008b15
 8008a58:	08008b15 	.word	0x08008b15
 8008a5c:	08008b15 	.word	0x08008b15
 8008a60:	08008aed 	.word	0x08008aed
 8008a64:	08008b15 	.word	0x08008b15
 8008a68:	08008b15 	.word	0x08008b15
 8008a6c:	08008b15 	.word	0x08008b15
 8008a70:	08008b15 	.word	0x08008b15
 8008a74:	08008b15 	.word	0x08008b15
 8008a78:	08008b15 	.word	0x08008b15
 8008a7c:	08008b15 	.word	0x08008b15
 8008a80:	08008af5 	.word	0x08008af5
 8008a84:	08008b15 	.word	0x08008b15
 8008a88:	08008b15 	.word	0x08008b15
 8008a8c:	08008b15 	.word	0x08008b15
 8008a90:	08008b15 	.word	0x08008b15
 8008a94:	08008b15 	.word	0x08008b15
 8008a98:	08008b15 	.word	0x08008b15
 8008a9c:	08008b15 	.word	0x08008b15
 8008aa0:	08008afd 	.word	0x08008afd
 8008aa4:	08008b15 	.word	0x08008b15
 8008aa8:	08008b15 	.word	0x08008b15
 8008aac:	08008b15 	.word	0x08008b15
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008b15 	.word	0x08008b15
 8008ab8:	08008b15 	.word	0x08008b15
 8008abc:	08008b15 	.word	0x08008b15
 8008ac0:	08008b05 	.word	0x08008b05
 8008ac4:	08008b15 	.word	0x08008b15
 8008ac8:	08008b15 	.word	0x08008b15
 8008acc:	08008b15 	.word	0x08008b15
 8008ad0:	08008b15 	.word	0x08008b15
 8008ad4:	08008b15 	.word	0x08008b15
 8008ad8:	08008b15 	.word	0x08008b15
 8008adc:	08008b15 	.word	0x08008b15
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e222      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008aec:	2304      	movs	r3, #4
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e21e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008af4:	2308      	movs	r3, #8
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e21a      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008afc:	2310      	movs	r3, #16
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b02:	e216      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b04:	2320      	movs	r3, #32
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0a:	e212      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b0c:	2340      	movs	r3, #64	@ 0x40
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b12:	e20e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b14:	2380      	movs	r3, #128	@ 0x80
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1a:	e20a      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a69      	ldr	r2, [pc, #420]	@ (8008cc8 <UART_SetConfig+0x33c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d130      	bne.n	8008b88 <UART_SetConfig+0x1fc>
 8008b26:	4b67      	ldr	r3, [pc, #412]	@ (8008cc4 <UART_SetConfig+0x338>)
 8008b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d826      	bhi.n	8008b80 <UART_SetConfig+0x1f4>
 8008b32:	a201      	add	r2, pc, #4	@ (adr r2, 8008b38 <UART_SetConfig+0x1ac>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b51 	.word	0x08008b51
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	08008b61 	.word	0x08008b61
 8008b44:	08008b69 	.word	0x08008b69
 8008b48:	08008b71 	.word	0x08008b71
 8008b4c:	08008b79 	.word	0x08008b79
 8008b50:	2300      	movs	r3, #0
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e1ec      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e1e8      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b60:	2308      	movs	r3, #8
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e1e4      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6e:	e1e0      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b70:	2320      	movs	r3, #32
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b76:	e1dc      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b78:	2340      	movs	r3, #64	@ 0x40
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7e:	e1d8      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b80:	2380      	movs	r3, #128	@ 0x80
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e1d4      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8008ccc <UART_SetConfig+0x340>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d130      	bne.n	8008bf4 <UART_SetConfig+0x268>
 8008b92:	4b4c      	ldr	r3, [pc, #304]	@ (8008cc4 <UART_SetConfig+0x338>)
 8008b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d826      	bhi.n	8008bec <UART_SetConfig+0x260>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0x218>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bbd 	.word	0x08008bbd
 8008ba8:	08008bc5 	.word	0x08008bc5
 8008bac:	08008bcd 	.word	0x08008bcd
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bdd 	.word	0x08008bdd
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e1b6      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e1b2      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e1ae      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bda:	e1aa      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e1a6      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008be4:	2340      	movs	r3, #64	@ 0x40
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bea:	e1a2      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008bec:	2380      	movs	r3, #128	@ 0x80
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e19e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a35      	ldr	r2, [pc, #212]	@ (8008cd0 <UART_SetConfig+0x344>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d130      	bne.n	8008c60 <UART_SetConfig+0x2d4>
 8008bfe:	4b31      	ldr	r3, [pc, #196]	@ (8008cc4 <UART_SetConfig+0x338>)
 8008c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	d826      	bhi.n	8008c58 <UART_SetConfig+0x2cc>
 8008c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <UART_SetConfig+0x284>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c29 	.word	0x08008c29
 8008c14:	08008c31 	.word	0x08008c31
 8008c18:	08008c39 	.word	0x08008c39
 8008c1c:	08008c41 	.word	0x08008c41
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	08008c51 	.word	0x08008c51
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e180      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c30:	2304      	movs	r3, #4
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e17c      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c38:	2308      	movs	r3, #8
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e178      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c40:	2310      	movs	r3, #16
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e174      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c48:	2320      	movs	r3, #32
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e170      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c50:	2340      	movs	r3, #64	@ 0x40
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e16c      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c58:	2380      	movs	r3, #128	@ 0x80
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e168      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd4 <UART_SetConfig+0x348>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d142      	bne.n	8008cf0 <UART_SetConfig+0x364>
 8008c6a:	4b16      	ldr	r3, [pc, #88]	@ (8008cc4 <UART_SetConfig+0x338>)
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d838      	bhi.n	8008ce8 <UART_SetConfig+0x35c>
 8008c76:	a201      	add	r2, pc, #4	@ (adr r2, 8008c7c <UART_SetConfig+0x2f0>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c95 	.word	0x08008c95
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	08008ca5 	.word	0x08008ca5
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008cd9 	.word	0x08008cd9
 8008c90:	08008ce1 	.word	0x08008ce1
 8008c94:	2300      	movs	r3, #0
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e14a      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e146      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e142      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008cac:	2310      	movs	r3, #16
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e13e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008cb4:	cfff69f3 	.word	0xcfff69f3
 8008cb8:	58000c00 	.word	0x58000c00
 8008cbc:	11fff4ff 	.word	0x11fff4ff
 8008cc0:	40011000 	.word	0x40011000
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	40004400 	.word	0x40004400
 8008ccc:	40004800 	.word	0x40004800
 8008cd0:	40004c00 	.word	0x40004c00
 8008cd4:	40005000 	.word	0x40005000
 8008cd8:	2320      	movs	r3, #32
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e128      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008ce0:	2340      	movs	r3, #64	@ 0x40
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e124      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008ce8:	2380      	movs	r3, #128	@ 0x80
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e120      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4acb      	ldr	r2, [pc, #812]	@ (8009024 <UART_SetConfig+0x698>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d176      	bne.n	8008de8 <UART_SetConfig+0x45c>
 8008cfa:	4bcb      	ldr	r3, [pc, #812]	@ (8009028 <UART_SetConfig+0x69c>)
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d02:	2b28      	cmp	r3, #40	@ 0x28
 8008d04:	d86c      	bhi.n	8008de0 <UART_SetConfig+0x454>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <UART_SetConfig+0x380>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008db1 	.word	0x08008db1
 8008d10:	08008de1 	.word	0x08008de1
 8008d14:	08008de1 	.word	0x08008de1
 8008d18:	08008de1 	.word	0x08008de1
 8008d1c:	08008de1 	.word	0x08008de1
 8008d20:	08008de1 	.word	0x08008de1
 8008d24:	08008de1 	.word	0x08008de1
 8008d28:	08008de1 	.word	0x08008de1
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008de1 	.word	0x08008de1
 8008d34:	08008de1 	.word	0x08008de1
 8008d38:	08008de1 	.word	0x08008de1
 8008d3c:	08008de1 	.word	0x08008de1
 8008d40:	08008de1 	.word	0x08008de1
 8008d44:	08008de1 	.word	0x08008de1
 8008d48:	08008de1 	.word	0x08008de1
 8008d4c:	08008dc1 	.word	0x08008dc1
 8008d50:	08008de1 	.word	0x08008de1
 8008d54:	08008de1 	.word	0x08008de1
 8008d58:	08008de1 	.word	0x08008de1
 8008d5c:	08008de1 	.word	0x08008de1
 8008d60:	08008de1 	.word	0x08008de1
 8008d64:	08008de1 	.word	0x08008de1
 8008d68:	08008de1 	.word	0x08008de1
 8008d6c:	08008dc9 	.word	0x08008dc9
 8008d70:	08008de1 	.word	0x08008de1
 8008d74:	08008de1 	.word	0x08008de1
 8008d78:	08008de1 	.word	0x08008de1
 8008d7c:	08008de1 	.word	0x08008de1
 8008d80:	08008de1 	.word	0x08008de1
 8008d84:	08008de1 	.word	0x08008de1
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008dd1 	.word	0x08008dd1
 8008d90:	08008de1 	.word	0x08008de1
 8008d94:	08008de1 	.word	0x08008de1
 8008d98:	08008de1 	.word	0x08008de1
 8008d9c:	08008de1 	.word	0x08008de1
 8008da0:	08008de1 	.word	0x08008de1
 8008da4:	08008de1 	.word	0x08008de1
 8008da8:	08008de1 	.word	0x08008de1
 8008dac:	08008dd9 	.word	0x08008dd9
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e0bc      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008db8:	2304      	movs	r3, #4
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e0b8      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e0b4      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e0b0      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008dd0:	2320      	movs	r3, #32
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e0ac      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008dd8:	2340      	movs	r3, #64	@ 0x40
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e0a8      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008de0:	2380      	movs	r3, #128	@ 0x80
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e0a4      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a8f      	ldr	r2, [pc, #572]	@ (800902c <UART_SetConfig+0x6a0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d130      	bne.n	8008e54 <UART_SetConfig+0x4c8>
 8008df2:	4b8d      	ldr	r3, [pc, #564]	@ (8009028 <UART_SetConfig+0x69c>)
 8008df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d826      	bhi.n	8008e4c <UART_SetConfig+0x4c0>
 8008dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <UART_SetConfig+0x478>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e1d 	.word	0x08008e1d
 8008e08:	08008e25 	.word	0x08008e25
 8008e0c:	08008e2d 	.word	0x08008e2d
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e3d 	.word	0x08008e3d
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e086      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e24:	2304      	movs	r3, #4
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e082      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e07e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e34:	2310      	movs	r3, #16
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e07a      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e076      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e44:	2340      	movs	r3, #64	@ 0x40
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e072      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e4c:	2380      	movs	r3, #128	@ 0x80
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e06e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a75      	ldr	r2, [pc, #468]	@ (8009030 <UART_SetConfig+0x6a4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d130      	bne.n	8008ec0 <UART_SetConfig+0x534>
 8008e5e:	4b72      	ldr	r3, [pc, #456]	@ (8009028 <UART_SetConfig+0x69c>)
 8008e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b05      	cmp	r3, #5
 8008e68:	d826      	bhi.n	8008eb8 <UART_SetConfig+0x52c>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <UART_SetConfig+0x4e4>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e89 	.word	0x08008e89
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008ea1 	.word	0x08008ea1
 8008e80:	08008ea9 	.word	0x08008ea9
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e050      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e04c      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e048      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e044      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e040      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008eb0:	2340      	movs	r3, #64	@ 0x40
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e03c      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e038      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a5b      	ldr	r2, [pc, #364]	@ (8009034 <UART_SetConfig+0x6a8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d130      	bne.n	8008f2c <UART_SetConfig+0x5a0>
 8008eca:	4b57      	ldr	r3, [pc, #348]	@ (8009028 <UART_SetConfig+0x69c>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d826      	bhi.n	8008f24 <UART_SetConfig+0x598>
 8008ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <UART_SetConfig+0x550>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008ef5 	.word	0x08008ef5
 8008ee0:	08008efd 	.word	0x08008efd
 8008ee4:	08008f05 	.word	0x08008f05
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f1d 	.word	0x08008f1d
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e01a      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008efc:	2304      	movs	r3, #4
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e016      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008f04:	2308      	movs	r3, #8
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e012      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e00e      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008f14:	2320      	movs	r3, #32
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e00a      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e006      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008f24:	2380      	movs	r3, #128	@ 0x80
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e002      	b.n	8008f32 <UART_SetConfig+0x5a6>
 8008f2c:	2380      	movs	r3, #128	@ 0x80
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a3f      	ldr	r2, [pc, #252]	@ (8009034 <UART_SetConfig+0x6a8>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	f040 80f8 	bne.w	800912e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	dc46      	bgt.n	8008fd4 <UART_SetConfig+0x648>
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	f2c0 8082 	blt.w	8009050 <UART_SetConfig+0x6c4>
 8008f4c:	3b02      	subs	r3, #2
 8008f4e:	2b1e      	cmp	r3, #30
 8008f50:	d87e      	bhi.n	8009050 <UART_SetConfig+0x6c4>
 8008f52:	a201      	add	r2, pc, #4	@ (adr r2, 8008f58 <UART_SetConfig+0x5cc>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008fdb 	.word	0x08008fdb
 8008f5c:	08009051 	.word	0x08009051
 8008f60:	08008fe3 	.word	0x08008fe3
 8008f64:	08009051 	.word	0x08009051
 8008f68:	08009051 	.word	0x08009051
 8008f6c:	08009051 	.word	0x08009051
 8008f70:	08008ff3 	.word	0x08008ff3
 8008f74:	08009051 	.word	0x08009051
 8008f78:	08009051 	.word	0x08009051
 8008f7c:	08009051 	.word	0x08009051
 8008f80:	08009051 	.word	0x08009051
 8008f84:	08009051 	.word	0x08009051
 8008f88:	08009051 	.word	0x08009051
 8008f8c:	08009051 	.word	0x08009051
 8008f90:	08009003 	.word	0x08009003
 8008f94:	08009051 	.word	0x08009051
 8008f98:	08009051 	.word	0x08009051
 8008f9c:	08009051 	.word	0x08009051
 8008fa0:	08009051 	.word	0x08009051
 8008fa4:	08009051 	.word	0x08009051
 8008fa8:	08009051 	.word	0x08009051
 8008fac:	08009051 	.word	0x08009051
 8008fb0:	08009051 	.word	0x08009051
 8008fb4:	08009051 	.word	0x08009051
 8008fb8:	08009051 	.word	0x08009051
 8008fbc:	08009051 	.word	0x08009051
 8008fc0:	08009051 	.word	0x08009051
 8008fc4:	08009051 	.word	0x08009051
 8008fc8:	08009051 	.word	0x08009051
 8008fcc:	08009051 	.word	0x08009051
 8008fd0:	08009043 	.word	0x08009043
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	d037      	beq.n	8009048 <UART_SetConfig+0x6bc>
 8008fd8:	e03a      	b.n	8009050 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fda:	f7fe fd87 	bl	8007aec <HAL_RCCEx_GetD3PCLK1Freq>
 8008fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fe0:	e03c      	b.n	800905c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fd96 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff0:	e034      	b.n	800905c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff2:	f107 0318 	add.w	r3, r7, #24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fee2 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009000:	e02c      	b.n	800905c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009002:	4b09      	ldr	r3, [pc, #36]	@ (8009028 <UART_SetConfig+0x69c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d016      	beq.n	800903c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800900e:	4b06      	ldr	r3, [pc, #24]	@ (8009028 <UART_SetConfig+0x69c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	4a07      	ldr	r2, [pc, #28]	@ (8009038 <UART_SetConfig+0x6ac>)
 800901a:	fa22 f303 	lsr.w	r3, r2, r3
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009020:	e01c      	b.n	800905c <UART_SetConfig+0x6d0>
 8009022:	bf00      	nop
 8009024:	40011400 	.word	0x40011400
 8009028:	58024400 	.word	0x58024400
 800902c:	40007800 	.word	0x40007800
 8009030:	40007c00 	.word	0x40007c00
 8009034:	58000c00 	.word	0x58000c00
 8009038:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800903c:	4b9d      	ldr	r3, [pc, #628]	@ (80092b4 <UART_SetConfig+0x928>)
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009040:	e00c      	b.n	800905c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009042:	4b9d      	ldr	r3, [pc, #628]	@ (80092b8 <UART_SetConfig+0x92c>)
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009046:	e009      	b.n	800905c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800904c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800904e:	e005      	b.n	800905c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800905a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800905c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 81de 	beq.w	8009420 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009068:	4a94      	ldr	r2, [pc, #592]	@ (80092bc <UART_SetConfig+0x930>)
 800906a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800906e:	461a      	mov	r2, r3
 8009070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009072:	fbb3 f3f2 	udiv	r3, r3, r2
 8009076:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	4613      	mov	r3, r2
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	4413      	add	r3, r2
 8009082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009084:	429a      	cmp	r2, r3
 8009086:	d305      	bcc.n	8009094 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800908e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009090:	429a      	cmp	r2, r3
 8009092:	d903      	bls.n	800909c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800909a:	e1c1      	b.n	8009420 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800909c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909e:	2200      	movs	r2, #0
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	60fa      	str	r2, [r7, #12]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	4a84      	ldr	r2, [pc, #528]	@ (80092bc <UART_SetConfig+0x930>)
 80090aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2200      	movs	r2, #0
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	607a      	str	r2, [r7, #4]
 80090b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090be:	f7f7 f90b 	bl	80002d8 <__aeabi_uldivmod>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	020b      	lsls	r3, r1, #8
 80090d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090d8:	0202      	lsls	r2, r0, #8
 80090da:	6979      	ldr	r1, [r7, #20]
 80090dc:	6849      	ldr	r1, [r1, #4]
 80090de:	0849      	lsrs	r1, r1, #1
 80090e0:	2000      	movs	r0, #0
 80090e2:	460c      	mov	r4, r1
 80090e4:	4605      	mov	r5, r0
 80090e6:	eb12 0804 	adds.w	r8, r2, r4
 80090ea:	eb43 0905 	adc.w	r9, r3, r5
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	469a      	mov	sl, r3
 80090f6:	4693      	mov	fp, r2
 80090f8:	4652      	mov	r2, sl
 80090fa:	465b      	mov	r3, fp
 80090fc:	4640      	mov	r0, r8
 80090fe:	4649      	mov	r1, r9
 8009100:	f7f7 f8ea 	bl	80002d8 <__aeabi_uldivmod>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4613      	mov	r3, r2
 800910a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009112:	d308      	bcc.n	8009126 <UART_SetConfig+0x79a>
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800911a:	d204      	bcs.n	8009126 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009122:	60da      	str	r2, [r3, #12]
 8009124:	e17c      	b.n	8009420 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800912c:	e178      	b.n	8009420 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009136:	f040 80c5 	bne.w	80092c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800913a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800913e:	2b20      	cmp	r3, #32
 8009140:	dc48      	bgt.n	80091d4 <UART_SetConfig+0x848>
 8009142:	2b00      	cmp	r3, #0
 8009144:	db7b      	blt.n	800923e <UART_SetConfig+0x8b2>
 8009146:	2b20      	cmp	r3, #32
 8009148:	d879      	bhi.n	800923e <UART_SetConfig+0x8b2>
 800914a:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <UART_SetConfig+0x7c4>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	080091db 	.word	0x080091db
 8009154:	080091e3 	.word	0x080091e3
 8009158:	0800923f 	.word	0x0800923f
 800915c:	0800923f 	.word	0x0800923f
 8009160:	080091eb 	.word	0x080091eb
 8009164:	0800923f 	.word	0x0800923f
 8009168:	0800923f 	.word	0x0800923f
 800916c:	0800923f 	.word	0x0800923f
 8009170:	080091fb 	.word	0x080091fb
 8009174:	0800923f 	.word	0x0800923f
 8009178:	0800923f 	.word	0x0800923f
 800917c:	0800923f 	.word	0x0800923f
 8009180:	0800923f 	.word	0x0800923f
 8009184:	0800923f 	.word	0x0800923f
 8009188:	0800923f 	.word	0x0800923f
 800918c:	0800923f 	.word	0x0800923f
 8009190:	0800920b 	.word	0x0800920b
 8009194:	0800923f 	.word	0x0800923f
 8009198:	0800923f 	.word	0x0800923f
 800919c:	0800923f 	.word	0x0800923f
 80091a0:	0800923f 	.word	0x0800923f
 80091a4:	0800923f 	.word	0x0800923f
 80091a8:	0800923f 	.word	0x0800923f
 80091ac:	0800923f 	.word	0x0800923f
 80091b0:	0800923f 	.word	0x0800923f
 80091b4:	0800923f 	.word	0x0800923f
 80091b8:	0800923f 	.word	0x0800923f
 80091bc:	0800923f 	.word	0x0800923f
 80091c0:	0800923f 	.word	0x0800923f
 80091c4:	0800923f 	.word	0x0800923f
 80091c8:	0800923f 	.word	0x0800923f
 80091cc:	0800923f 	.word	0x0800923f
 80091d0:	08009231 	.word	0x08009231
 80091d4:	2b40      	cmp	r3, #64	@ 0x40
 80091d6:	d02e      	beq.n	8009236 <UART_SetConfig+0x8aa>
 80091d8:	e031      	b.n	800923e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091da:	f7fc fcd1 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 80091de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091e0:	e033      	b.n	800924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e2:	f7fc fce3 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
 80091e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091e8:	e02f      	b.n	800924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fc92 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f8:	e027      	b.n	800924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091fa:	f107 0318 	add.w	r3, r7, #24
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fdde 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009208:	e01f      	b.n	800924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800920a:	4b2d      	ldr	r3, [pc, #180]	@ (80092c0 <UART_SetConfig+0x934>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009216:	4b2a      	ldr	r3, [pc, #168]	@ (80092c0 <UART_SetConfig+0x934>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	08db      	lsrs	r3, r3, #3
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	4a24      	ldr	r2, [pc, #144]	@ (80092b4 <UART_SetConfig+0x928>)
 8009222:	fa22 f303 	lsr.w	r3, r2, r3
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009228:	e00f      	b.n	800924a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800922a:	4b22      	ldr	r3, [pc, #136]	@ (80092b4 <UART_SetConfig+0x928>)
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922e:	e00c      	b.n	800924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009230:	4b21      	ldr	r3, [pc, #132]	@ (80092b8 <UART_SetConfig+0x92c>)
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e009      	b.n	800924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923c:	e005      	b.n	800924a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80e7 	beq.w	8009420 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009256:	4a19      	ldr	r2, [pc, #100]	@ (80092bc <UART_SetConfig+0x930>)
 8009258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800925c:	461a      	mov	r2, r3
 800925e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009260:	fbb3 f3f2 	udiv	r3, r3, r2
 8009264:	005a      	lsls	r2, r3, #1
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	441a      	add	r2, r3
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	fbb2 f3f3 	udiv	r3, r2, r3
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	2b0f      	cmp	r3, #15
 800927c:	d916      	bls.n	80092ac <UART_SetConfig+0x920>
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009284:	d212      	bcs.n	80092ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009288:	b29b      	uxth	r3, r3
 800928a:	f023 030f 	bic.w	r3, r3, #15
 800928e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	b29b      	uxth	r3, r3
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	b29a      	uxth	r2, r3
 800929c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800929e:	4313      	orrs	r3, r2
 80092a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	e0b9      	b.n	8009420 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092b2:	e0b5      	b.n	8009420 <UART_SetConfig+0xa94>
 80092b4:	03d09000 	.word	0x03d09000
 80092b8:	003d0900 	.word	0x003d0900
 80092bc:	08009b2c 	.word	0x08009b2c
 80092c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80092c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	dc49      	bgt.n	8009360 <UART_SetConfig+0x9d4>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db7c      	blt.n	80093ca <UART_SetConfig+0xa3e>
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	d87a      	bhi.n	80093ca <UART_SetConfig+0xa3e>
 80092d4:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <UART_SetConfig+0x950>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009367 	.word	0x08009367
 80092e0:	0800936f 	.word	0x0800936f
 80092e4:	080093cb 	.word	0x080093cb
 80092e8:	080093cb 	.word	0x080093cb
 80092ec:	08009377 	.word	0x08009377
 80092f0:	080093cb 	.word	0x080093cb
 80092f4:	080093cb 	.word	0x080093cb
 80092f8:	080093cb 	.word	0x080093cb
 80092fc:	08009387 	.word	0x08009387
 8009300:	080093cb 	.word	0x080093cb
 8009304:	080093cb 	.word	0x080093cb
 8009308:	080093cb 	.word	0x080093cb
 800930c:	080093cb 	.word	0x080093cb
 8009310:	080093cb 	.word	0x080093cb
 8009314:	080093cb 	.word	0x080093cb
 8009318:	080093cb 	.word	0x080093cb
 800931c:	08009397 	.word	0x08009397
 8009320:	080093cb 	.word	0x080093cb
 8009324:	080093cb 	.word	0x080093cb
 8009328:	080093cb 	.word	0x080093cb
 800932c:	080093cb 	.word	0x080093cb
 8009330:	080093cb 	.word	0x080093cb
 8009334:	080093cb 	.word	0x080093cb
 8009338:	080093cb 	.word	0x080093cb
 800933c:	080093cb 	.word	0x080093cb
 8009340:	080093cb 	.word	0x080093cb
 8009344:	080093cb 	.word	0x080093cb
 8009348:	080093cb 	.word	0x080093cb
 800934c:	080093cb 	.word	0x080093cb
 8009350:	080093cb 	.word	0x080093cb
 8009354:	080093cb 	.word	0x080093cb
 8009358:	080093cb 	.word	0x080093cb
 800935c:	080093bd 	.word	0x080093bd
 8009360:	2b40      	cmp	r3, #64	@ 0x40
 8009362:	d02e      	beq.n	80093c2 <UART_SetConfig+0xa36>
 8009364:	e031      	b.n	80093ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009366:	f7fc fc0b 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 800936a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800936c:	e033      	b.n	80093d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800936e:	f7fc fc1d 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
 8009372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009374:	e02f      	b.n	80093d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fbcc 	bl	8007b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009384:	e027      	b.n	80093d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fd18 	bl	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e01f      	b.n	80093d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009396:	4b2d      	ldr	r3, [pc, #180]	@ (800944c <UART_SetConfig+0xac0>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093a2:	4b2a      	ldr	r3, [pc, #168]	@ (800944c <UART_SetConfig+0xac0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	4a28      	ldr	r2, [pc, #160]	@ (8009450 <UART_SetConfig+0xac4>)
 80093ae:	fa22 f303 	lsr.w	r3, r2, r3
 80093b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b4:	e00f      	b.n	80093d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80093b6:	4b26      	ldr	r3, [pc, #152]	@ (8009450 <UART_SetConfig+0xac4>)
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ba:	e00c      	b.n	80093d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093bc:	4b25      	ldr	r3, [pc, #148]	@ (8009454 <UART_SetConfig+0xac8>)
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c0:	e009      	b.n	80093d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c8:	e005      	b.n	80093d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093d4:	bf00      	nop
    }

    if (pclk != 0U)
 80093d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d021      	beq.n	8009420 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009458 <UART_SetConfig+0xacc>)
 80093e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e6:	461a      	mov	r2, r3
 80093e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	441a      	add	r2, r3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	2b0f      	cmp	r3, #15
 8009404:	d909      	bls.n	800941a <UART_SetConfig+0xa8e>
 8009406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800940c:	d205      	bcs.n	800941a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009410:	b29a      	uxth	r2, r3
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60da      	str	r2, [r3, #12]
 8009418:	e002      	b.n	8009420 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2201      	movs	r2, #1
 8009424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2201      	movs	r2, #1
 800942c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2200      	movs	r2, #0
 8009434:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2200      	movs	r2, #0
 800943a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800943c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009440:	4618      	mov	r0, r3
 8009442:	3748      	adds	r7, #72	@ 0x48
 8009444:	46bd      	mov	sp, r7
 8009446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800944a:	bf00      	nop
 800944c:	58024400 	.word	0x58024400
 8009450:	03d09000 	.word	0x03d09000
 8009454:	003d0900 	.word	0x003d0900
 8009458:	08009b2c 	.word	0x08009b2c

0800945c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00a      	beq.n	80094ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01a      	beq.n	8009572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800955a:	d10a      	bne.n	8009572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	605a      	str	r2, [r3, #4]
  }
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b098      	sub	sp, #96	@ 0x60
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095b0:	f7f8 f8e0 	bl	8001774 <HAL_GetTick>
 80095b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d12f      	bne.n	8009624 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095cc:	2200      	movs	r2, #0
 80095ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f88e 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d022      	beq.n	8009624 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80095fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800960a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e063      	b.n	80096ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b04      	cmp	r3, #4
 8009630:	d149      	bne.n	80096c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009632:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963a:	2200      	movs	r2, #0
 800963c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f857 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d03c      	beq.n	80096c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	623b      	str	r3, [r7, #32]
   return(result);
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800966a:	633b      	str	r3, [r7, #48]	@ 0x30
 800966c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e6      	bne.n	800964c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	60fb      	str	r3, [r7, #12]
   return(result);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800969e:	61fa      	str	r2, [r7, #28]
 80096a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	617b      	str	r3, [r7, #20]
   return(result);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e5      	bne.n	800967e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e012      	b.n	80096ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3758      	adds	r7, #88	@ 0x58
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	4613      	mov	r3, r2
 8009702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009704:	e04f      	b.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d04b      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970e:	f7f8 f831 	bl	8001774 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	429a      	cmp	r2, r3
 800971c:	d302      	bcc.n	8009724 <UART_WaitOnFlagUntilTimeout+0x30>
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e04e      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	d037      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b80      	cmp	r3, #128	@ 0x80
 800973a:	d034      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b40      	cmp	r3, #64	@ 0x40
 8009740:	d031      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d110      	bne.n	8009772 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2208      	movs	r2, #8
 8009756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f839 	bl	80097d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2208      	movs	r2, #8
 8009762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e029      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800977c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009780:	d111      	bne.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800978a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f81f 	bl	80097d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e00f      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4013      	ands	r3, r2
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	bf0c      	ite	eq
 80097b6:	2301      	moveq	r3, #1
 80097b8:	2300      	movne	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d0a0      	beq.n	8009706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b095      	sub	sp, #84	@ 0x54
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80097f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e6      	bne.n	80097d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3308      	adds	r3, #8
 8009810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	61fb      	str	r3, [r7, #28]
   return(result);
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	4b1e      	ldr	r3, [pc, #120]	@ (8009898 <UART_EndRxTransfer+0xc8>)
 800981e:	4013      	ands	r3, r2
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3308      	adds	r3, #8
 8009828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800982c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e5      	bne.n	800980a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009842:	2b01      	cmp	r3, #1
 8009844:	d118      	bne.n	8009878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	60bb      	str	r3, [r7, #8]
   return(result);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f023 0310 	bic.w	r3, r3, #16
 800985a:	647b      	str	r3, [r7, #68]	@ 0x44
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009864:	61bb      	str	r3, [r7, #24]
 8009866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6979      	ldr	r1, [r7, #20]
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	613b      	str	r3, [r7, #16]
   return(result);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e6      	bne.n	8009846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2220      	movs	r2, #32
 800987c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800988c:	bf00      	nop
 800988e:	3754      	adds	r7, #84	@ 0x54
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	effffffe 	.word	0xeffffffe

0800989c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e027      	b.n	8009902 <HAL_UARTEx_DisableFifoMode+0x66>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2224      	movs	r2, #36	@ 0x24
 80098be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0201 	bic.w	r2, r2, #1
 80098d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009922:	2302      	movs	r3, #2
 8009924:	e02d      	b.n	8009982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2224      	movs	r2, #36	@ 0x24
 8009932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0201 	bic.w	r2, r2, #1
 800994c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f850 	bl	8009a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800999e:	2302      	movs	r3, #2
 80099a0:	e02d      	b.n	80099fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2224      	movs	r2, #36	@ 0x24
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0201 	bic.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f812 	bl	8009a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d108      	bne.n	8009a2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a28:	e031      	b.n	8009a8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a2e:	2310      	movs	r3, #16
 8009a30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	0e5b      	lsrs	r3, r3, #25
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	0f5b      	lsrs	r3, r3, #29
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	7b3a      	ldrb	r2, [r7, #12]
 8009a56:	4911      	ldr	r1, [pc, #68]	@ (8009a9c <UARTEx_SetNbDataToProcess+0x94>)
 8009a58:	5c8a      	ldrb	r2, [r1, r2]
 8009a5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a5e:	7b3a      	ldrb	r2, [r7, #12]
 8009a60:	490f      	ldr	r1, [pc, #60]	@ (8009aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8009a62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	7b7a      	ldrb	r2, [r7, #13]
 8009a74:	4909      	ldr	r1, [pc, #36]	@ (8009a9c <UARTEx_SetNbDataToProcess+0x94>)
 8009a76:	5c8a      	ldrb	r2, [r1, r2]
 8009a78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a7c:	7b7a      	ldrb	r2, [r7, #13]
 8009a7e:	4908      	ldr	r1, [pc, #32]	@ (8009aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8009a80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	08009b44 	.word	0x08009b44
 8009aa0:	08009b4c 	.word	0x08009b4c

08009aa4 <memset>:
 8009aa4:	4402      	add	r2, r0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d100      	bne.n	8009aae <memset+0xa>
 8009aac:	4770      	bx	lr
 8009aae:	f803 1b01 	strb.w	r1, [r3], #1
 8009ab2:	e7f9      	b.n	8009aa8 <memset+0x4>

08009ab4 <__libc_init_array>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8009aec <__libc_init_array+0x38>)
 8009ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8009af0 <__libc_init_array+0x3c>)
 8009aba:	1b64      	subs	r4, r4, r5
 8009abc:	10a4      	asrs	r4, r4, #2
 8009abe:	2600      	movs	r6, #0
 8009ac0:	42a6      	cmp	r6, r4
 8009ac2:	d109      	bne.n	8009ad8 <__libc_init_array+0x24>
 8009ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8009af4 <__libc_init_array+0x40>)
 8009ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8009af8 <__libc_init_array+0x44>)
 8009ac8:	f000 f818 	bl	8009afc <_init>
 8009acc:	1b64      	subs	r4, r4, r5
 8009ace:	10a4      	asrs	r4, r4, #2
 8009ad0:	2600      	movs	r6, #0
 8009ad2:	42a6      	cmp	r6, r4
 8009ad4:	d105      	bne.n	8009ae2 <__libc_init_array+0x2e>
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009adc:	4798      	blx	r3
 8009ade:	3601      	adds	r6, #1
 8009ae0:	e7ee      	b.n	8009ac0 <__libc_init_array+0xc>
 8009ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae6:	4798      	blx	r3
 8009ae8:	3601      	adds	r6, #1
 8009aea:	e7f2      	b.n	8009ad2 <__libc_init_array+0x1e>
 8009aec:	08009b5c 	.word	0x08009b5c
 8009af0:	08009b5c 	.word	0x08009b5c
 8009af4:	08009b5c 	.word	0x08009b5c
 8009af8:	08009b60 	.word	0x08009b60

08009afc <_init>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr

08009b08 <_fini>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr
