
Signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a570  0800a570  0000b570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a828  0800a828  0000b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a830  0800a830  0000b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a834  0800a834  0000b834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800a838  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000944  24000010  0800a848  0000c010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000954  0800a848  0000c954  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019def  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bba  00000000  00000000  00025e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001420  00000000  00000000  000289e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fd5  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038cd5  00000000  00000000  0002addd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f130  00000000  00000000  00063ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001764be  00000000  00000000  00082be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f90a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005664  00000000  00000000  001f90e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000081  00000000  00000000  001fe748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a558 	.word	0x0800a558

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800a558 	.word	0x0800a558

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <adc3_init>:

uint16_t data_buffer[1000]={0};
int data_buffer_write_index = 0;
bool reading = false;

void adc3_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b36      	ldr	r3, [pc, #216]	@ (80006a8 <adc3_init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <adc3_init+0xe0>)
 80005d4:	4a34      	ldr	r2, [pc, #208]	@ (80006a8 <adc3_init+0xe0>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b33      	ldr	r3, [pc, #204]	@ (80006a8 <adc3_init+0xe0>)
 80005dc:	4a32      	ldr	r2, [pc, #200]	@ (80006a8 <adc3_init+0xe0>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <adc3_init+0xe0>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a30      	ldr	r2, [pc, #192]	@ (80006a8 <adc3_init+0xe0>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
	//	ADC3->CR &= ~ADC_CR_DEEPPWD;
	//	ADC3->CR |= ADC_CR_ADVREGEN;
	//	while((ADC3->ISR & ADC_ISR_LDORDY) != 1){}

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <adc3_init+0xe0>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2d      	ldr	r2, [pc, #180]	@ (80006a8 <adc3_init+0xe0>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <adc3_init+0xe0>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <adc3_init+0xe0>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <adc3_init+0xe0>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <adc3_init+0xe0>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <adc3_init+0xe0>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a24      	ldr	r2, [pc, #144]	@ (80006a8 <adc3_init+0xe0>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <adc3_init+0xe0>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <adc3_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <adc3_init+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <adc3_init+0xe0>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <adc3_init+0xe0>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <adc3_init+0xe0>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <adc3_init+0xe0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <adc3_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <adc3_init+0xe0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <adc3_init+0xe0>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 48;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <adc3_init+0xe4>)
 800065c:	2230      	movs	r2, #48	@ 0x30
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 10;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <adc3_init+0xe4>)
 8000662:	220a      	movs	r2, #10
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <adc3_init+0xe4>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER |= TIM_DIER_UIE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <adc3_init+0xe4>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <adc3_init+0xe4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <adc3_init+0xe4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <adc3_init+0xe4>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <adc3_init+0xe0>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <adc3_init+0xe0>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <adc3_init+0xe0>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <adc3_init+0xe0>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6093      	str	r3, [r2, #8]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	58026000 	.word	0x58026000
 80006ac:	40001000 	.word	0x40001000

080006b0 <adc3_interrupt>:




void adc3_interrupt(){
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

	extern int data_buffer_write_index;
	extern uint16_t data_buffer[1000];

	if((ADC3->ISR & ADC_ISR_EOC) && !reading){
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <adc3_interrupt+0x70>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d022      	beq.n	8000706 <adc3_interrupt+0x56>
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <adc3_interrupt+0x74>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d01b      	beq.n	8000706 <adc3_interrupt+0x56>

		if(data_buffer_write_index < 1000){
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <adc3_interrupt+0x78>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006d6:	da0d      	bge.n	80006f4 <adc3_interrupt+0x44>

			data_buffer[data_buffer_write_index] = ADC3->DR;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <adc3_interrupt+0x70>)
 80006da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <adc3_interrupt+0x78>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	b291      	uxth	r1, r2
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <adc3_interrupt+0x7c>)
 80006e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			++data_buffer_write_index;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <adc3_interrupt+0x78>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <adc3_interrupt+0x78>)
 80006f0:	6013      	str	r3, [r2, #0]
		if(data_buffer_write_index < 1000){
 80006f2:	e00f      	b.n	8000714 <adc3_interrupt+0x64>

		}else{
			data_buffer[0] = ADC3->DR;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <adc3_interrupt+0x70>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <adc3_interrupt+0x7c>)
 80006fc:	801a      	strh	r2, [r3, #0]
			data_buffer_write_index=0;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <adc3_interrupt+0x78>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
		if(data_buffer_write_index < 1000){
 8000704:	e006      	b.n	8000714 <adc3_interrupt+0x64>
		}
	}else{
		ADC3->ISR |= ADC_ISR_EOC;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <adc3_interrupt+0x70>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a05      	ldr	r2, [pc, #20]	@ (8000720 <adc3_interrupt+0x70>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6013      	str	r3, [r2, #0]
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	58026000 	.word	0x58026000
 8000724:	24000800 	.word	0x24000800
 8000728:	240007fc 	.word	0x240007fc
 800072c:	2400002c 	.word	0x2400002c

08000730 <usart3_init>:
#include <custom_usart.h>

unsigned char* data_buffer_char = 0;
int data_buffer_read_index=0;

void usart3_init(){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <usart3_init+0x4c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a10      	ldr	r2, [pc, #64]	@ (800077c <usart3_init+0x4c>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <usart3_init+0x4c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <usart3_init+0x4c>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <usart3_init+0x4c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <usart3_init+0x4c>)
 8000752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000756:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <usart3_init+0x4c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	@ (800077c <usart3_init+0x4c>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <usart3_init+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <usart3_init+0x4c>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40004800 	.word	0x40004800

08000780 <usart3_interrupt>:

void usart3_interrupt(){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0

	extern uint16_t data_buffer[1000];
	extern bool reading;

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 8000786:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <usart3_interrupt+0xe0>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	2b00      	cmp	r3, #0
 8000790:	d020      	beq.n	80007d4 <usart3_interrupt+0x54>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <usart3_interrupt+0xe0>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01a      	beq.n	80007d4 <usart3_interrupt+0x54>

			char received_data = USART3->RDR;
 800079e:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <usart3_interrupt+0xe0>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a2:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 &= ~USART_CR1_TXEIE;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <usart3_interrupt+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000860 <usart3_interrupt+0xe0>)
 80007aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007ae:	6013      	str	r3, [r2, #0]

			if(received_data=='e'){
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b65      	cmp	r3, #101	@ 0x65
 80007b4:	d10e      	bne.n	80007d4 <usart3_interrupt+0x54>
				data_buffer_read_index=0;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <usart3_interrupt+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
				reading = true;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <usart3_interrupt+0xe8>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
                data_buffer_char = (unsigned char *)data_buffer;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <usart3_interrupt+0xec>)
 80007c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000870 <usart3_interrupt+0xf0>)
 80007c6:	601a      	str	r2, [r3, #0]

                USART3->CR1 |= USART_CR1_TXEIE;
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <usart3_interrupt+0xe0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <usart3_interrupt+0xe0>)
 80007ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d2:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <usart3_interrupt+0xe0>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d027      	beq.n	8000830 <usart3_interrupt+0xb0>
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <usart3_interrupt+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d021      	beq.n	8000830 <usart3_interrupt+0xb0>
 80007ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <usart3_interrupt+0xe0>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11b      	bne.n	8000830 <usart3_interrupt+0xb0>

		if(data_buffer_read_index < sizeof(data_buffer)){
 80007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <usart3_interrupt+0xe4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000800:	d20d      	bcs.n	800081e <usart3_interrupt+0x9e>

            USART3->TDR = data_buffer_char[data_buffer_read_index];
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <usart3_interrupt+0xec>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <usart3_interrupt+0xe4>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	4413      	add	r3, r2
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <usart3_interrupt+0xe0>)
 8000810:	629a      	str	r2, [r3, #40]	@ 0x28
            ++data_buffer_read_index;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <usart3_interrupt+0xe4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <usart3_interrupt+0xe4>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e008      	b.n	8000830 <usart3_interrupt+0xb0>
        }else{
            USART3->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <usart3_interrupt+0xe0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a0f      	ldr	r2, [pc, #60]	@ (8000860 <usart3_interrupt+0xe0>)
 8000824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000828:	6013      	str	r3, [r2, #0]
            reading = false;
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <usart3_interrupt+0xe8>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
        }
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <usart3_interrupt+0xe0>)
 8000832:	6a1b      	ldr	r3, [r3, #32]
 8000834:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <usart3_interrupt+0xe0>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <usart3_interrupt+0xe0>)
 800083e:	6a1b      	ldr	r3, [r3, #32]
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <usart3_interrupt+0xe0>)
 8000842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000846:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <usart3_interrupt+0xe0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <usart3_interrupt+0xe0>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40004800 	.word	0x40004800
 8000864:	24000808 	.word	0x24000808
 8000868:	24000800 	.word	0x24000800
 800086c:	24000804 	.word	0x24000804
 8000870:	2400002c 	.word	0x2400002c

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fd0c 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f80e 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f9ac 	bl	8000bdc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000884:	f000 f8b8 	bl	80009f8 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000888:	f000 f926 	bl	8000ad8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800088c:	f000 f95a 	bl	8000b44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  usart3_init();	// da eseguire prima di adcx_init()
 8000890:	f7ff ff4e 	bl	8000730 <usart3_init>
  adc3_init();
 8000894:	f7ff fe98 	bl	80005c8 <adc3_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <main+0x24>

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09e      	sub	sp, #120	@ 0x78
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a6:	224c      	movs	r2, #76	@ 0x4c
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 fe28 	bl	800a500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f009 fe21 	bl	800a500 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008be:	2002      	movs	r0, #2
 80008c0:	f003 f95a 	bl	8003b78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b48      	ldr	r3, [pc, #288]	@ (80009ec <SystemClock_Config+0x150>)
 80008ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008cc:	4a47      	ldr	r2, [pc, #284]	@ (80009ec <SystemClock_Config+0x150>)
 80008ce:	f023 0301 	bic.w	r3, r3, #1
 80008d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008d4:	4b45      	ldr	r3, [pc, #276]	@ (80009ec <SystemClock_Config+0x150>)
 80008d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b44      	ldr	r3, [pc, #272]	@ (80009f0 <SystemClock_Config+0x154>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a43      	ldr	r2, [pc, #268]	@ (80009f0 <SystemClock_Config+0x154>)
 80008e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b41      	ldr	r3, [pc, #260]	@ (80009f0 <SystemClock_Config+0x154>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f6:	bf00      	nop
 80008f8:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <SystemClock_Config+0x154>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000904:	d1f8      	bne.n	80008f8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b3b      	ldr	r3, [pc, #236]	@ (80009f4 <SystemClock_Config+0x158>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800090c:	4a39      	ldr	r2, [pc, #228]	@ (80009f4 <SystemClock_Config+0x158>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000916:	4b37      	ldr	r3, [pc, #220]	@ (80009f4 <SystemClock_Config+0x158>)
 8000918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <SystemClock_Config+0x154>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a30      	ldr	r2, [pc, #192]	@ (80009f0 <SystemClock_Config+0x154>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <SystemClock_Config+0x154>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <SystemClock_Config+0x150>)
 8000940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000942:	4a2a      	ldr	r2, [pc, #168]	@ (80009ec <SystemClock_Config+0x150>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800094a:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <SystemClock_Config+0x150>)
 800094c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000956:	bf00      	nop
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SystemClock_Config+0x154>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000964:	d1f8      	bne.n	8000958 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000966:	2301      	movs	r3, #1
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000974:	2302      	movs	r3, #2
 8000976:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800097c:	2378      	movs	r3, #120	@ 0x78
 800097e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000984:	2303      	movs	r3, #3
 8000986:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098c:	230c      	movs	r3, #12
 800098e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000990:	2300      	movs	r3, #0
 8000992:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099c:	4618      	mov	r0, r3
 800099e:	f003 f931 	bl	8003c04 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x110>
  {
    Error_Handler();
 80009a8:	f000 fa48 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	233f      	movs	r3, #63	@ 0x3f
 80009ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2303      	movs	r3, #3
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b8:	2308      	movs	r3, #8
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c0:	2340      	movs	r3, #64	@ 0x40
 80009c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2104      	movs	r1, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fec5 	bl	8004764 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80009e0:	f000 fa2c 	bl	8000e3c <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3778      	adds	r7, #120	@ 0x78
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800
 80009f4:	58024400 	.word	0x58024400

080009f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a12:	4a30      	ldr	r2, [pc, #192]	@ (8000ad4 <MX_ADC3_Init+0xdc>)
 8000a14:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a42:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000a46:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a70:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a72:	f000 fecf 	bl	8001814 <HAL_ADC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000a7c:	f000 f9de 	bl	8000e3c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a86:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000a88:	f000 fec4 	bl	8001814 <HAL_ADC_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000a92:	f000 f9d3 	bl	8000e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a96:	2301      	movs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9a:	2306      	movs	r3, #6
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aa2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000aa6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_ADC3_Init+0xd8>)
 8000aba:	f001 fcf9 	bl	80024b0 <HAL_ADC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000ac4:	f000 f9ba 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2400080c 	.word	0x2400080c
 8000ad4:	58026000 	.word	0x58026000

08000ad8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <MX_TIM6_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000b0a:	f007 fc79 	bl	8008400 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b14:	f000 f992 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_TIM6_Init+0x64>)
 8000b26:	f007 ff6b 	bl	8008a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b30:	f000 f984 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000870 	.word	0x24000870
 8000b40:	40001000 	.word	0x40001000

08000b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <MX_USART3_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f008 f8bb 	bl	8008d08 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f950 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000ba0:	f009 fb2c 	bl	800a1fc <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f947 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f009 fbbd 	bl	800a330 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f93e 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_USART3_UART_Init+0x90>)
 8000bc2:	f009 faa5 	bl	800a110 <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f936 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240008bc 	.word	0x240008bc
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	4a89      	ldr	r2, [pc, #548]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c02:	4b87      	ldr	r3, [pc, #540]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b83      	ldr	r3, [pc, #524]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	4a82      	ldr	r2, [pc, #520]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c20:	4b7f      	ldr	r3, [pc, #508]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	4a7a      	ldr	r2, [pc, #488]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3e:	4b78      	ldr	r3, [pc, #480]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b74      	ldr	r3, [pc, #464]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c52:	4a73      	ldr	r2, [pc, #460]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5c:	4b70      	ldr	r3, [pc, #448]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c70:	4a6b      	ldr	r2, [pc, #428]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7a:	4b69      	ldr	r3, [pc, #420]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4b65      	ldr	r3, [pc, #404]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	4a64      	ldr	r2, [pc, #400]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c98:	4b61      	ldr	r3, [pc, #388]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a5c      	ldr	r2, [pc, #368]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000cca:	4856      	ldr	r0, [pc, #344]	@ (8000e24 <MX_GPIO_Init+0x248>)
 8000ccc:	f002 ff28 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd6:	4854      	ldr	r0, [pc, #336]	@ (8000e28 <MX_GPIO_Init+0x24c>)
 8000cd8:	f002 ff22 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4852      	ldr	r0, [pc, #328]	@ (8000e2c <MX_GPIO_Init+0x250>)
 8000ce2:	f002 ff1d 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	484d      	ldr	r0, [pc, #308]	@ (8000e30 <MX_GPIO_Init+0x254>)
 8000cfc:	f002 fc66 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d00:	2332      	movs	r3, #50	@ 0x32
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d10:	230b      	movs	r3, #11
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4845      	ldr	r0, [pc, #276]	@ (8000e30 <MX_GPIO_Init+0x254>)
 8000d1c:	f002 fc56 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d20:	2386      	movs	r3, #134	@ 0x86
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d30:	230b      	movs	r3, #11
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	483e      	ldr	r0, [pc, #248]	@ (8000e34 <MX_GPIO_Init+0x258>)
 8000d3c:	f002 fc46 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d40:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4832      	ldr	r0, [pc, #200]	@ (8000e24 <MX_GPIO_Init+0x248>)
 8000d5a:	f002 fc37 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d70:	230b      	movs	r3, #11
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482a      	ldr	r0, [pc, #168]	@ (8000e24 <MX_GPIO_Init+0x248>)
 8000d7c:	f002 fc26 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <MX_GPIO_Init+0x24c>)
 8000d9a:	f002 fc17 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4821      	ldr	r0, [pc, #132]	@ (8000e38 <MX_GPIO_Init+0x25c>)
 8000db4:	f002 fc0a 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000db8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <MX_GPIO_Init+0x258>)
 8000dd6:	f002 fbf9 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000dda:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dec:	230b      	movs	r3, #11
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4810      	ldr	r0, [pc, #64]	@ (8000e38 <MX_GPIO_Init+0x25c>)
 8000df8:	f002 fbe8 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_GPIO_Init+0x250>)
 8000e14:	f002 fbda 	bl	80035cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	@ 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58020c00 	.word	0x58020c00
 8000e2c:	58021000 	.word	0x58021000
 8000e30:	58020800 	.word	0x58020800
 8000e34:	58020000 	.word	0x58020000
 8000e38:	58021800 	.word	0x58021800

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_MspInit+0x30>)
 8000e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e6c:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <HAL_MspInit+0x30>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_MspInit+0x30>)
 8000e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	58024400 	.word	0x58024400

08000e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b4      	sub	sp, #208	@ 0xd0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	22c0      	movs	r2, #192	@ 0xc0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fb2b 	bl	800a500 <memset>
  if(hadc->Instance==ADC3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a2b      	ldr	r2, [pc, #172]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d14e      	bne.n	8000f52 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eb4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000ec4:	2314      	movs	r3, #20
 8000ec6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ed4:	23c0      	movs	r3, #192	@ 0xc0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f980 	bl	80051f0 <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000ef6:	f7ff ffa1 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000f36:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000f3a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000f3e:	f000 fa47 	bl	80013d0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	207f      	movs	r0, #127	@ 0x7f
 8000f48:	f002 faf2 	bl	8003530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f4c:	207f      	movs	r0, #127	@ 0x7f
 8000f4e:	f002 fb19 	bl	8003584 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000f52:	bf00      	nop
 8000f54:	37d0      	adds	r7, #208	@ 0xd0
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	58026000 	.word	0x58026000
 8000f60:	58024400 	.word	0x58024400

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d116      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2036      	movs	r0, #54	@ 0x36
 8000f9a:	f002 fac9 	bl	8003530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9e:	2036      	movs	r0, #54	@ 0x36
 8000fa0:	f002 faf0 	bl	8003584 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40001000 	.word	0x40001000
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	22c0      	movs	r2, #192	@ 0xc0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 fa93 	bl	800a500 <memset>
  if(huart->Instance==USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a2b      	ldr	r2, [pc, #172]	@ (800108c <HAL_UART_MspInit+0xd8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d14e      	bne.n	8001082 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe4:	f04f 0202 	mov.w	r2, #2
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f8f8 	bl	80051f0 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001006:	f7ff ff19 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <HAL_UART_MspInit+0xdc>)
 800100c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001010:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <HAL_UART_MspInit+0xdc>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001016:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_UART_MspInit+0xdc>)
 800101c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_UART_MspInit+0xdc>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	4a18      	ldr	r2, [pc, #96]	@ (8001090 <HAL_UART_MspInit+0xdc>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001038:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_UART_MspInit+0xdc>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <HAL_UART_MspInit+0xe0>)
 800106e:	f002 faad 	bl	80035cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2027      	movs	r0, #39	@ 0x27
 8001078:	f002 fa5a 	bl	8003530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800107c:	2027      	movs	r0, #39	@ 0x27
 800107e:	f002 fa81 	bl	8003584 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001082:	bf00      	nop
 8001084:	37e8      	adds	r7, #232	@ 0xe8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004800 	.word	0x40004800
 8001090:	58024400 	.word	0x58024400
 8001094:	58020c00 	.word	0x58020c00

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ee:	f000 f943 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 80010fa:	f7ff fb41 	bl	8000780 <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <TIM6_DAC_IRQHandler+0x10>)
 800110a:	f007 fa99 	bl	8008640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	24000870 	.word	0x24000870

08001118 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	adc3_interrupt();
 800111c:	f7ff fac8 	bl	80006b0 <adc3_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <ADC3_IRQHandler+0x14>)
 8001122:	f000 ff49 	bl	8001fb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2400080c 	.word	0x2400080c

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001134:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <SystemInit+0xe4>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113a:	4a36      	ldr	r2, [pc, #216]	@ (8001214 <SystemInit+0xe4>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001144:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <SystemInit+0xe8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	2b06      	cmp	r3, #6
 800114e:	d807      	bhi.n	8001160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <SystemInit+0xe8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <SystemInit+0xe8>)
 800115a:	f043 0307 	orr.w	r3, r3, #7
 800115e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001160:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <SystemInit+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a2d      	ldr	r2, [pc, #180]	@ (800121c <SystemInit+0xec>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800116c:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <SystemInit+0xec>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <SystemInit+0xec>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4929      	ldr	r1, [pc, #164]	@ (800121c <SystemInit+0xec>)
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <SystemInit+0xf0>)
 800117a:	4013      	ands	r3, r2
 800117c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <SystemInit+0xe8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <SystemInit+0xe8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 030f 	bic.w	r3, r3, #15
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <SystemInit+0xe8>)
 8001194:	f043 0307 	orr.w	r3, r3, #7
 8001198:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <SystemInit+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <SystemInit+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <SystemInit+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <SystemInit+0xec>)
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <SystemInit+0xf4>)
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <SystemInit+0xec>)
 80011b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <SystemInit+0xf8>)
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <SystemInit+0xec>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <SystemInit+0xfc>)
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <SystemInit+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <SystemInit+0xec>)
 80011c6:	4a19      	ldr	r2, [pc, #100]	@ (800122c <SystemInit+0xfc>)
 80011c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <SystemInit+0xec>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <SystemInit+0xec>)
 80011d2:	4a16      	ldr	r2, [pc, #88]	@ (800122c <SystemInit+0xfc>)
 80011d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <SystemInit+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <SystemInit+0xec>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <SystemInit+0xec>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <SystemInit+0xec>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <SystemInit+0x100>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <SystemInit+0x104>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011fa:	d202      	bcs.n	8001202 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <SystemInit+0x108>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <SystemInit+0x10c>)
 8001204:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001208:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	52002000 	.word	0x52002000
 800121c:	58024400 	.word	0x58024400
 8001220:	eaf6ed7f 	.word	0xeaf6ed7f
 8001224:	02020200 	.word	0x02020200
 8001228:	01ff0000 	.word	0x01ff0000
 800122c:	01010280 	.word	0x01010280
 8001230:	5c001000 	.word	0x5c001000
 8001234:	ffff0000 	.word	0xffff0000
 8001238:	51008108 	.word	0x51008108
 800123c:	52004000 	.word	0x52004000

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff ff74 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f009 f94f 	bl	800a510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff faff 	bl	8000874 <main>
  bx  lr
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800127c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001280:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001284:	0800a838 	.word	0x0800a838
  ldr r2, =_sbss
 8001288:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800128c:	24000954 	.word	0x24000954

08001290 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f002 f928 	bl	80034f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a0:	f003 fdd0 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4913      	ldr	r1, [pc, #76]	@ (8001300 <HAL_Init+0x6c>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_Init+0x6c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_Init+0x70>)
 80012d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <HAL_Init+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f814 	bl	800130c <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e002      	b.n	80012f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fdb7 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	0800a7f0 	.word	0x0800a7f0
 8001304:	24000004 	.word	0x24000004
 8001308:	24000000 	.word	0x24000000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f002 f93c 	bl	80035b4 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f002 f8ec 	bl	8003530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2400000c 	.word	0x2400000c
 8001370:	24000000 	.word	0x24000000
 8001374:	24000008 	.word	0x24000008

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c
 800139c:	24000950 	.word	0x24000950

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	24000950 	.word	0x24000950

080013b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_GetREVID+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0c1b      	lsrs	r3, r3, #16
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	5c001000 	.word	0x5c001000

080013d0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d113      	bne.n	800140c <HAL_SYSCFG_AnalogSwitchConfig+0x3c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <HAL_SYSCFG_AnalogSwitchConfig+0x3c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_SYSCFG_AnalogSwitchConfig+0x3c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d104      	bne.n	800140c <HAL_SYSCFG_AnalogSwitchConfig+0x3c>
 8001402:	f240 217a 	movw	r1, #634	@ 0x27a
 8001406:	4808      	ldr	r0, [pc, #32]	@ (8001428 <HAL_SYSCFG_AnalogSwitchConfig+0x58>)
 8001408:	f7ff fd1e 	bl	8000e48 <assert_failed>
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_SYSCFG_AnalogSwitchConfig+0x5c>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	4905      	ldr	r1, [pc, #20]	@ (800142c <HAL_SYSCFG_AnalogSwitchConfig+0x5c>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	0800a570 	.word	0x0800a570
 800142c:	58000400 	.word	0x58000400

08001430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_6B  (2)
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC3
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
    }
  }

#else  /* ADC_VER_V5_V90 */
  if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <LL_ADC_GetResolution+0x44>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014ac:	d104      	bne.n	80014b8 <LL_ADC_GetResolution+0x20>
  {
    return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 031c 	and.w	r3, r3, #28
 80014b6:	e00b      	b.n	80014d0 <LL_ADC_GetResolution+0x38>
  }
  else /* Rev.V */
  {
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 031c 	and.w	r3, r3, #28
 80014c0:	2b1c      	cmp	r3, #28
 80014c2:	d101      	bne.n	80014c8 <LL_ADC_GetResolution+0x30>
    {
      return (LL_ADC_RESOLUTION_8B);
 80014c4:	2310      	movs	r3, #16
 80014c6:	e003      	b.n	80014d0 <LL_ADC_GetResolution+0x38>
    }
    else
    {
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 031c 	and.w	r3, r3, #28
    }
  }

#endif /* ADC_VER_V5_X */
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	5c001000 	.word	0x5c001000

080014e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3360      	adds	r3, #96	@ 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	431a      	orrs	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	611a      	str	r2, [r3, #16]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001552:	b480      	push	{r7}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3360      	adds	r3, #96	@ 0x60
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	431a      	orrs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
  }
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3330      	adds	r3, #48	@ 0x30
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	211f      	movs	r1, #31
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 011f 	and.w	r1, r3, #31
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3314      	adds	r3, #20
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	0e5b      	lsrs	r3, r3, #25
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	0d1b      	lsrs	r3, r3, #20
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2107      	movs	r1, #7
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	401a      	ands	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	0d1b      	lsrs	r3, r3, #20
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	431a      	orrs	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001676:	bf00      	nop
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0318 	and.w	r3, r3, #24
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016a8:	40d9      	lsrs	r1, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	400b      	ands	r3, r1
 80016ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016b2:	431a      	orrs	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	000fffff 	.word	0x000fffff

080016cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 031f 	and.w	r3, r3, #31
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6093      	str	r3, [r2, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	5fffffc0 	.word	0x5fffffc0

08001728 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800173c:	d101      	bne.n	8001742 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <LL_ADC_EnableInternalRegulator+0x24>)
 800175e:	4013      	ands	r3, r2
 8001760:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	6fffffc0 	.word	0x6fffffc0

08001778 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800178c:	d101      	bne.n	8001792 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <LL_ADC_IsEnabled+0x18>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <LL_ADC_IsEnabled+0x1a>
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d101      	bne.n	80017de <LL_ADC_REG_IsConversionOngoing+0x18>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d101      	bne.n	8001804 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e3bf      	b.n	8001fae <HAL_ADC_Init+0x79a>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a5a      	ldr	r2, [pc, #360]	@ (800199c <HAL_ADC_Init+0x188>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00e      	beq.n	8001856 <HAL_ADC_Init+0x42>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a58      	ldr	r2, [pc, #352]	@ (80019a0 <HAL_ADC_Init+0x18c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d009      	beq.n	8001856 <HAL_ADC_Init+0x42>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a57      	ldr	r2, [pc, #348]	@ (80019a4 <HAL_ADC_Init+0x190>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_ADC_Init+0x42>
 800184c:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8001850:	4855      	ldr	r0, [pc, #340]	@ (80019a8 <HAL_ADC_Init+0x194>)
 8001852:	f7ff faf9 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185e:	d049      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001868:	d044      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001872:	d03f      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d03b      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001884:	d036      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800188e:	d031      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001898:	d02c      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018a2:	d027      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80018ac:	d022      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80018b6:	d01d      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80018c0:	d018      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018ca:	d013      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80018d4:	d00e      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80018de:	d009      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_Init+0xe0>
 80018ea:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 80018ee:	482e      	ldr	r0, [pc, #184]	@ (80019a8 <HAL_ADC_Init+0x194>)
 80018f0:	f7ff faaa 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_ADC_Init+0x122>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d018      	beq.n	8001936 <HAL_ADC_Init+0x122>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b14      	cmp	r3, #20
 800190a:	d014      	beq.n	8001936 <HAL_ADC_Init+0x122>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d010      	beq.n	8001936 <HAL_ADC_Init+0x122>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b18      	cmp	r3, #24
 800191a:	d00c      	beq.n	8001936 <HAL_ADC_Init+0x122>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d008      	beq.n	8001936 <HAL_ADC_Init+0x122>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b10      	cmp	r3, #16
 800192a:	d004      	beq.n	8001936 <HAL_ADC_Init+0x122>
 800192c:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8001930:	481d      	ldr	r0, [pc, #116]	@ (80019a8 <HAL_ADC_Init+0x194>)
 8001932:	f7ff fa89 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_ADC_Init+0x13c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d004      	beq.n	8001950 <HAL_ADC_Init+0x13c>
 8001946:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800194a:	4817      	ldr	r0, [pc, #92]	@ (80019a8 <HAL_ADC_Init+0x194>)
 800194c:	f7ff fa7c 	bl	8000e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7d5b      	ldrb	r3, [r3, #21]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_ADC_Init+0x156>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7d5b      	ldrb	r3, [r3, #21]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0x156>
 8001960:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001964:	4810      	ldr	r0, [pc, #64]	@ (80019a8 <HAL_ADC_Init+0x194>)
 8001966:	f7ff fa6f 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01c      	beq.n	80019ac <HAL_ADC_Init+0x198>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197a:	d017      	beq.n	80019ac <HAL_ADC_Init+0x198>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001984:	d012      	beq.n	80019ac <HAL_ADC_Init+0x198>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800198e:	d00d      	beq.n	80019ac <HAL_ADC_Init+0x198>
 8001990:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <HAL_ADC_Init+0x194>)
 8001996:	f7ff fa57 	bl	8000e48 <assert_failed>
 800199a:	e007      	b.n	80019ac <HAL_ADC_Init+0x198>
 800199c:	40022000 	.word	0x40022000
 80019a0:	40022100 	.word	0x40022100
 80019a4:	58026000 	.word	0x58026000
 80019a8:	0800a5a4 	.word	0x0800a5a4
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b4:	d06c      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 80019be:	d067      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 80019c8:	d062      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 80019d2:	d05d      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80019dc:	d058      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 80019e6:	d053      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 80019f0:	d04e      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 80019fa:	d049      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001a04:	d044      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8001a0e:	d03f      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8001a18:	d03a      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001a22:	d035      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8001a2c:	d030      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8001a36:	d02b      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8001a40:	d026      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8001a4a:	d021      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001a54:	d01c      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8001a5e:	d017      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001a68:	d012      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8001a72:	d00d      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8001a7c:	d008      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <HAL_ADC_Init+0x27c>
 8001a86:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8001a8a:	4895      	ldr	r0, [pc, #596]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001a8c:	f7ff f9dc 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_ADC_Init+0x2a6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d00c      	beq.n	8001aba <HAL_ADC_Init+0x2a6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d008      	beq.n	8001aba <HAL_ADC_Init+0x2a6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x2a6>
 8001ab0:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8001ab4:	488a      	ldr	r0, [pc, #552]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001ab6:	f7ff f9c7 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d008      	beq.n	8001ad4 <HAL_ADC_Init+0x2c0>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_Init+0x2c0>
 8001aca:	f240 11af 	movw	r1, #431	@ 0x1af
 8001ace:	4884      	ldr	r0, [pc, #528]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001ad0:	f7ff f9ba 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_ADC_Init+0x2dc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae4:	d004      	beq.n	8001af0 <HAL_ADC_Init+0x2dc>
 8001ae6:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001aea:	487d      	ldr	r0, [pc, #500]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001aec:	f7ff f9ac 	bl	8000e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_ADC_Init+0x2f6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7d1b      	ldrb	r3, [r3, #20]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_Init+0x2f6>
 8001b00:	f240 11b1 	movw	r1, #433	@ 0x1b1
 8001b04:	4876      	ldr	r0, [pc, #472]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001b06:	f7ff f99f 	bl	8000e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_ADC_Init+0x314>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d004      	beq.n	8001b28 <HAL_ADC_Init+0x314>
 8001b1e:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8001b22:	486f      	ldr	r0, [pc, #444]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001b24:	f7ff f990 	bl	8000e48 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d02a      	beq.n	8001b86 <HAL_ADC_Init+0x372>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_ADC_Init+0x32c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d904      	bls.n	8001b4a <HAL_ADC_Init+0x336>
 8001b40:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8001b44:	4866      	ldr	r0, [pc, #408]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001b46:	f7ff f97f 	bl	8000e48 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7f1b      	ldrb	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_ADC_Init+0x350>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7f1b      	ldrb	r3, [r3, #28]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d004      	beq.n	8001b64 <HAL_ADC_Init+0x350>
 8001b5a:	f240 11b7 	movw	r1, #439	@ 0x1b7
 8001b5e:	4860      	ldr	r0, [pc, #384]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001b60:	f7ff f972 	bl	8000e48 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7f1b      	ldrb	r3, [r3, #28]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10c      	bne.n	8001b86 <HAL_ADC_Init+0x372>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_ADC_Init+0x368>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d904      	bls.n	8001b86 <HAL_ADC_Init+0x372>
 8001b7c:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8001b80:	4857      	ldr	r0, [pc, #348]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001b82:	f7ff f961 	bl	8000e48 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7f1b      	ldrb	r3, [r3, #28]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_ADC_Init+0x38c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7d5b      	ldrb	r3, [r3, #21]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d104      	bne.n	8001ba0 <HAL_ADC_Init+0x38c>
 8001b96:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001b9a:	4851      	ldr	r0, [pc, #324]	@ (8001ce0 <HAL_ADC_Init+0x4cc>)
 8001b9c:	f7ff f954 	bl	8000e48 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Init+0x3a8>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff f973 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fdb1 	bl	8001728 <LL_ADC_IsDeepPowerDownEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_Init+0x3c2>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fd97 	bl	8001704 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fdcc 	bl	8001778 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d114      	bne.n	8001c10 <HAL_ADC_Init+0x3fc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fdb0 	bl	8001750 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <HAL_ADC_Init+0x4d0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce8 <HAL_ADC_Init+0x4d4>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c02:	e002      	b.n	8001c0a <HAL_ADC_Init+0x3f6>
    {
      wait_loop_index--;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f9      	bne.n	8001c04 <HAL_ADC_Init+0x3f0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fdaf 	bl	8001778 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <HAL_ADC_Init+0x428>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fdc0 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8001c46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 81a3 	bne.w	8001f9c <HAL_ADC_Init+0x788>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 819f 	bne.w	8001f9c <HAL_ADC_Init+0x788>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c62:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fd94 	bl	80017a0 <LL_ADC_IsEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d145      	bne.n	8001d0a <HAL_ADC_Init+0x4f6>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <HAL_ADC_Init+0x4d8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_ADC_Init+0x47e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <HAL_ADC_Init+0x4dc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10e      	bne.n	8001cb0 <HAL_ADC_Init+0x49c>
 8001c92:	4816      	ldr	r0, [pc, #88]	@ (8001cec <HAL_ADC_Init+0x4d8>)
 8001c94:	f7ff fd84 	bl	80017a0 <LL_ADC_IsEnabled>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	4815      	ldr	r0, [pc, #84]	@ (8001cf0 <HAL_ADC_Init+0x4dc>)
 8001c9c:	f7ff fd80 	bl	80017a0 <LL_ADC_IsEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e008      	b.n	8001cc2 <HAL_ADC_Init+0x4ae>
 8001cb0:	4810      	ldr	r0, [pc, #64]	@ (8001cf4 <HAL_ADC_Init+0x4e0>)
 8001cb2:	f7ff fd75 	bl	80017a0 <LL_ADC_IsEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d021      	beq.n	8001d0a <HAL_ADC_Init+0x4f6>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_ADC_Init+0x4d8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_Init+0x4c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a06      	ldr	r2, [pc, #24]	@ (8001cf0 <HAL_ADC_Init+0x4dc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d110      	bne.n	8001cfc <HAL_ADC_Init+0x4e8>
 8001cda:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <HAL_ADC_Init+0x4e4>)
 8001cdc:	e00f      	b.n	8001cfe <HAL_ADC_Init+0x4ea>
 8001cde:	bf00      	nop
 8001ce0:	0800a5a4 	.word	0x0800a5a4
 8001ce4:	24000000 	.word	0x24000000
 8001ce8:	053e2d63 	.word	0x053e2d63
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40022100 	.word	0x40022100
 8001cf4:	58026000 	.word	0x58026000
 8001cf8:	40022300 	.word	0x40022300
 8001cfc:	4a86      	ldr	r2, [pc, #536]	@ (8001f18 <HAL_ADC_Init+0x704>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7ff fb93 	bl	8001430 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d0a:	f7ff fb55 	bl	80013b8 <HAL_GetREVID>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d914      	bls.n	8001d42 <HAL_ADC_Init+0x52e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d110      	bne.n	8001d42 <HAL_ADC_Init+0x52e>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7d5b      	ldrb	r3, [r3, #21]
 8001d24:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d2a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d30:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7f1b      	ldrb	r3, [r3, #28]
 8001d36:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d38:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d3a:	f043 030c 	orr.w	r3, r3, #12
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e00d      	b.n	8001d5e <HAL_ADC_Init+0x54a>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7d5b      	ldrb	r3, [r3, #21]
 8001d46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d4c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7f1b      	ldrb	r3, [r3, #28]
 8001d58:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7f1b      	ldrb	r3, [r3, #28]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <HAL_ADC_Init+0x560>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	045b      	lsls	r3, r3, #17
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_ADC_Init+0x57c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b61      	ldr	r3, [pc, #388]	@ (8001f1c <HAL_ADC_Init+0x708>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fd0c 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8001dae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fd19 	bl	80017ec <LL_ADC_INJ_IsConversionOngoing>
 8001dba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 80ca 	bne.w	8001f58 <HAL_ADC_Init+0x744>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 80c6 	bne.w	8001f58 <HAL_ADC_Init+0x744>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7d1b      	ldrb	r3, [r3, #20]
 8001dd0:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f20 <HAL_ADC_Init+0x70c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	69b9      	ldr	r1, [r7, #24]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f040 8099 	bne.w	8001f2c <HAL_ADC_Init+0x718>
        else
        {
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        }
#else
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_ADC_Init+0x5f8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0a:	d904      	bls.n	8001e16 <HAL_ADC_Init+0x602>
 8001e0c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001e10:	4844      	ldr	r0, [pc, #272]	@ (8001f24 <HAL_ADC_Init+0x710>)
 8001e12:	f7ff f819 	bl	8000e48 <assert_failed>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d034      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d030      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d02c      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	2b60      	cmp	r3, #96	@ 0x60
 8001e34:	d028      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	2b80      	cmp	r3, #128	@ 0x80
 8001e3c:	d024      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e44:	d020      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8001e4c:	d01c      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	2be0      	cmp	r3, #224	@ 0xe0
 8001e54:	d018      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5e:	d013      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001e68:	d00e      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e72:	d009      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	f5b3 7fb0 	cmp.w	r3, #352	@ 0x160
 8001e7c:	d004      	beq.n	8001e88 <HAL_ADC_Init+0x674>
 8001e7e:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8001e82:	4828      	ldr	r0, [pc, #160]	@ (8001f24 <HAL_ADC_Init+0x710>)
 8001e84:	f7fe ffe0 	bl	8000e48 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_ADC_Init+0x690>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_Init+0x690>
 8001e9a:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8001e9e:	4821      	ldr	r0, [pc, #132]	@ (8001f24 <HAL_ADC_Init+0x710>)
 8001ea0:	f7fe ffd2 	bl	8000e48 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_ADC_Init+0x6ae>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb0:	f240 4201 	movw	r2, #1025	@ 0x401
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_Init+0x6ae>
 8001eb8:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8001ebc:	4819      	ldr	r0, [pc, #100]	@ (8001f24 <HAL_ADC_Init+0x710>)
 8001ebe:	f7fe ffc3 	bl	8000e48 <assert_failed>

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_ADC_Init+0x6be>
            || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_ADC_Init+0x6d0>
        {
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_Init+0x6d0>
 8001eda:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8001ede:	4811      	ldr	r0, [pc, #68]	@ (8001f24 <HAL_ADC_Init+0x710>)
 8001ee0:	f7fe ffb2 	bl	8000e48 <assert_failed>
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <HAL_ADC_Init+0x714>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ef2:	3a01      	subs	r2, #1
 8001ef4:	0411      	lsls	r1, r2, #16
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f06:	430a      	orrs	r2, r1
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	e012      	b.n	8001f3c <HAL_ADC_Init+0x728>
 8001f16:	bf00      	nop
 8001f18:	58026300 	.word	0x58026300
 8001f1c:	fff0c003 	.word	0xfff0c003
 8001f20:	ffffbffc 	.word	0xffffbffc
 8001f24:	0800a5a4 	.word	0x0800a5a4
 8001f28:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f001 f8be 	bl	80030d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10c      	bne.n	8001f7a <HAL_ADC_Init+0x766>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f023 010f 	bic.w	r1, r3, #15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	1e5a      	subs	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f78:	e007      	b.n	8001f8a <HAL_ADC_Init+0x776>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 020f 	bic.w	r2, r2, #15
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f9a:	e007      	b.n	8001fac <HAL_ADC_Init+0x798>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	@ 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a8a      	ldr	r2, [pc, #552]	@ (8002204 <HAL_ADC_IRQHandler+0x24c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x30>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a89      	ldr	r2, [pc, #548]	@ (8002208 <HAL_ADC_IRQHandler+0x250>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_IRQHandler+0x34>
 8001fe8:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_ADC_IRQHandler+0x254>)
 8001fea:	e000      	b.n	8001fee <HAL_ADC_IRQHandler+0x36>
 8001fec:	4b88      	ldr	r3, [pc, #544]	@ (8002210 <HAL_ADC_IRQHandler+0x258>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb6c 	bl	80016cc <LL_ADC_GetMultimode>
 8001ff4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a82      	ldr	r2, [pc, #520]	@ (8002204 <HAL_ADC_IRQHandler+0x24c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00e      	beq.n	800201e <HAL_ADC_IRQHandler+0x66>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a80      	ldr	r2, [pc, #512]	@ (8002208 <HAL_ADC_IRQHandler+0x250>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_ADC_IRQHandler+0x66>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a81      	ldr	r2, [pc, #516]	@ (8002214 <HAL_ADC_IRQHandler+0x25c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_ADC_IRQHandler+0x66>
 8002014:	f640 1145 	movw	r1, #2373	@ 0x945
 8002018:	487f      	ldr	r0, [pc, #508]	@ (8002218 <HAL_ADC_IRQHandler+0x260>)
 800201a:	f7fe ff15 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d008      	beq.n	8002038 <HAL_ADC_IRQHandler+0x80>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d004      	beq.n	8002038 <HAL_ADC_IRQHandler+0x80>
 800202e:	f640 1146 	movw	r1, #2374	@ 0x946
 8002032:	4879      	ldr	r0, [pc, #484]	@ (8002218 <HAL_ADC_IRQHandler+0x260>)
 8002034:	f7fe ff08 	bl	8000e48 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d017      	beq.n	8002072 <HAL_ADC_IRQHandler+0xba>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_ADC_IRQHandler+0xba>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_IRQHandler+0xac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f001 f969 	bl	800333c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <HAL_ADC_IRQHandler+0xce>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <HAL_ADC_IRQHandler+0xe4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8083 	beq.w	8002198 <HAL_ADC_IRQHandler+0x1e0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d07d      	beq.n	8002198 <HAL_ADC_IRQHandler+0x1e0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_IRQHandler+0xfc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fa65 	bl	8001588 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d062      	beq.n	800218a <HAL_ADC_IRQHandler+0x1d2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002208 <HAL_ADC_IRQHandler+0x250>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d002      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x11c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_IRQHandler+0x11e>
 80020d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002204 <HAL_ADC_IRQHandler+0x24c>)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4293      	cmp	r3, r2
 80020dc:	d008      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_IRQHandler+0x138>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d104      	bne.n	80020fa <HAL_ADC_IRQHandler+0x142>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	e00c      	b.n	8002114 <HAL_ADC_IRQHandler+0x15c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a42      	ldr	r2, [pc, #264]	@ (8002208 <HAL_ADC_IRQHandler+0x250>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d002      	beq.n	800210a <HAL_ADC_IRQHandler+0x152>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	e000      	b.n	800210c <HAL_ADC_IRQHandler+0x154>
 800210a:	4b3e      	ldr	r3, [pc, #248]	@ (8002204 <HAL_ADC_IRQHandler+0x24c>)
 800210c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d135      	bne.n	800218a <HAL_ADC_IRQHandler+0x1d2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b08      	cmp	r3, #8
 800212a:	d12e      	bne.n	800218a <HAL_ADC_IRQHandler+0x1d2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb48 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d11a      	bne.n	8002172 <HAL_ADC_IRQHandler+0x1ba>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 020c 	bic.w	r2, r2, #12
 800214a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d112      	bne.n	800218a <HAL_ADC_IRQHandler+0x1d2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002170:	e00b      	b.n	800218a <HAL_ADC_IRQHandler+0x1d2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f972 	bl	8002474 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	220c      	movs	r2, #12
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_ADC_IRQHandler+0x1f4>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x20c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80a4 	beq.w	8002300 <HAL_ADC_IRQHandler+0x348>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 809e 	beq.w	8002300 <HAL_ADC_IRQHandler+0x348>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fa10 	bl	8001606 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021e6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f9cb 	bl	8001588 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021f2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a03      	ldr	r2, [pc, #12]	@ (8002208 <HAL_ADC_IRQHandler+0x250>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_ADC_IRQHandler+0x264>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	e00c      	b.n	800221e <HAL_ADC_IRQHandler+0x266>
 8002204:	40022000 	.word	0x40022000
 8002208:	40022100 	.word	0x40022100
 800220c:	40022300 	.word	0x40022300
 8002210:	58026300 	.word	0x58026300
 8002214:	58026000 	.word	0x58026000
 8002218:	0800a5a4 	.word	0x0800a5a4
 800221c:	4b91      	ldr	r3, [pc, #580]	@ (8002464 <HAL_ADC_IRQHandler+0x4ac>)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4293      	cmp	r3, r2
 8002224:	d008      	beq.n	8002238 <HAL_ADC_IRQHandler+0x280>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_ADC_IRQHandler+0x280>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d002      	beq.n	8002238 <HAL_ADC_IRQHandler+0x280>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b07      	cmp	r3, #7
 8002236:	d104      	bne.n	8002242 <HAL_ADC_IRQHandler+0x28a>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	e00c      	b.n	800225c <HAL_ADC_IRQHandler+0x2a4>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a88      	ldr	r2, [pc, #544]	@ (8002468 <HAL_ADC_IRQHandler+0x4b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d002      	beq.n	8002252 <HAL_ADC_IRQHandler+0x29a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	e000      	b.n	8002254 <HAL_ADC_IRQHandler+0x29c>
 8002252:	4b84      	ldr	r3, [pc, #528]	@ (8002464 <HAL_ADC_IRQHandler+0x4ac>)
 8002254:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d047      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_ADC_IRQHandler+0x2c4>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03f      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	d13a      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002286:	2b40      	cmp	r3, #64	@ 0x40
 8002288:	d133      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d12e      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff faa7 	bl	80017ec <LL_ADC_INJ_IsConversionOngoing>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11a      	bne.n	80022da <HAL_ADC_IRQHandler+0x322>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022b2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80022d8:	e00b      	b.n	80022f2 <HAL_ADC_IRQHandler+0x33a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fffa 	bl	80032ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2260      	movs	r2, #96	@ 0x60
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	d011      	beq.n	800232e <HAL_ADC_IRQHandler+0x376>
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <HAL_ADC_IRQHandler+0x376>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002318:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f8b1 	bl	8002488 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_ADC_IRQHandler+0x3a6>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <HAL_ADC_IRQHandler+0x3a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 ffe0 	bl	8003314 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	d012      	beq.n	800238e <HAL_ADC_IRQHandler+0x3d6>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <HAL_ADC_IRQHandler+0x3d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 ffd2 	bl	8003328 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d043      	beq.n	8002420 <HAL_ADC_IRQHandler+0x468>
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d03e      	beq.n	8002420 <HAL_ADC_IRQHandler+0x468>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x3f8>
    {
      overrun_error = 1UL;
 80023aa:	2301      	movs	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ae:	e021      	b.n	80023f4 <HAL_ADC_IRQHandler+0x43c>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d015      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x42a>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002464 <HAL_ADC_IRQHandler+0x4ac>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_ADC_IRQHandler+0x412>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <HAL_ADC_IRQHandler+0x4b0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_IRQHandler+0x416>
 80023ca:	4b28      	ldr	r3, [pc, #160]	@ (800246c <HAL_ADC_IRQHandler+0x4b4>)
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_IRQHandler+0x418>
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <HAL_ADC_IRQHandler+0x4b8>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f989 	bl	80016e8 <LL_ADC_GetMultiDMATransfer>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <HAL_ADC_IRQHandler+0x43c>
        {
          overrun_error = 1UL;
 80023dc:	2301      	movs	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e0:	e008      	b.n	80023f4 <HAL_ADC_IRQHandler+0x43c>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_ADC_IRQHandler+0x43c>
        {
          overrun_error = 1UL;
 80023f0:	2301      	movs	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d10e      	bne.n	8002418 <HAL_ADC_IRQHandler+0x460>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f842 	bl	800249c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <HAL_ADC_IRQHandler+0x4a4>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_ADC_IRQHandler+0x4a4>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	f043 0208 	orr.w	r2, r3, #8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002454:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 ff52 	bl	8003300 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40022000 	.word	0x40022000
 8002468:	40022100 	.word	0x40022100
 800246c:	40022300 	.word	0x40022300
 8002470:	58026300 	.word	0x58026300

08002474 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b0a1      	sub	sp, #132	@ 0x84
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_ADC_ConfigChannel+0x1c0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x3c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a68      	ldr	r2, [pc, #416]	@ (8002674 <HAL_ADC_ConfigChannel+0x1c4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x3c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a66      	ldr	r2, [pc, #408]	@ (8002678 <HAL_ADC_ConfigChannel+0x1c8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x3c>
 80024e2:	f640 310d 	movw	r1, #2829	@ 0xb0d
 80024e6:	4865      	ldr	r0, [pc, #404]	@ (800267c <HAL_ADC_ConfigChannel+0x1cc>)
 80024e8:	f7fe fcae 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d04f      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d04b      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b12      	cmp	r3, #18
 8002502:	d047      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b18      	cmp	r3, #24
 800250a:	d043      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002514:	d03e      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800251e:	d039      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8002528:	d034      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8002532:	d02f      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800253c:	d02a      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002546:	d025      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f240 2206 	movw	r2, #518	@ 0x206
 8002550:	4293      	cmp	r3, r2
 8002552:	d01f      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 800255c:	d01a      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f240 2212 	movw	r2, #530	@ 0x212
 8002566:	4293      	cmp	r3, r2
 8002568:	d014      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8002572:	d00f      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800257c:	d00a      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f240 3206 	movw	r2, #774	@ 0x306
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
 800258a:	f640 310e 	movw	r1, #2830	@ 0xb0e
 800258e:	483b      	ldr	r0, [pc, #236]	@ (800267c <HAL_ADC_ConfigChannel+0x1cc>)
 8002590:	f7fe fc5a 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d01c      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d018      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d014      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d010      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d00c      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d008      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b07      	cmp	r3, #7
 80025d2:	d004      	beq.n	80025de <HAL_ADC_ConfigChannel+0x12e>
 80025d4:	f640 310f 	movw	r1, #2831	@ 0xb0f
 80025d8:	4828      	ldr	r0, [pc, #160]	@ (800267c <HAL_ADC_ConfigChannel+0x1cc>)
 80025da:	f7fe fc35 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x14e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <HAL_ADC_ConfigChannel+0x1d0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x14e>
 80025f4:	f44f 6131 	mov.w	r1, #2832	@ 0xb10
 80025f8:	4820      	ldr	r0, [pc, #128]	@ (800267c <HAL_ADC_ConfigChannel+0x1cc>)
 80025fa:	f7fe fc25 	bl	8000e48 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d014      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x180>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x180>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d00c      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x180>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d008      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x180>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d004      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x180>
 8002626:	f640 3111 	movw	r1, #2833	@ 0xb11
 800262a:	4814      	ldr	r0, [pc, #80]	@ (800267c <HAL_ADC_ConfigChannel+0x1cc>)
 800262c:	f7fe fc0c 	bl	8000e48 <assert_failed>
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002636:	2b01      	cmp	r3, #1
 8002638:	d124      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1d4>
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.Ratio + 1U)));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002642:	3301      	adds	r3, #1
 8002644:	fbb2 f4f3 	udiv	r4, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe ff23 	bl	8001498 <LL_ADC_GetResolution>
 8002652:	4603      	mov	r3, r0
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	429c      	cmp	r4, r3
 8002660:	d924      	bls.n	80026ac <HAL_ADC_ConfigChannel+0x1fc>
 8002662:	f640 3115 	movw	r1, #2837	@ 0xb15
 8002666:	4805      	ldr	r0, [pc, #20]	@ (800267c <HAL_ADC_ConfigChannel+0x1cc>)
 8002668:	f7fe fbee 	bl	8000e48 <assert_failed>
 800266c:	e01e      	b.n	80026ac <HAL_ADC_ConfigChannel+0x1fc>
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000
 8002674:	40022100 	.word	0x40022100
 8002678:	58026000 	.word	0x58026000
 800267c:	0800a5a4 	.word	0x0800a5a4
 8002680:	47ff0000 	.word	0x47ff0000
      assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
    }
    else
#endif /* ADC_VER_V5_V90 */
    {
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695c      	ldr	r4, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe ff03 	bl	8001498 <LL_ADC_GetResolution>
 8002692:	4603      	mov	r3, r0
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	429c      	cmp	r4, r3
 80026a0:	d904      	bls.n	80026ac <HAL_ADC_ConfigChannel+0x1fc>
 80026a2:	f640 3121 	movw	r1, #2849	@ 0xb21
 80026a6:	4859      	ldr	r0, [pc, #356]	@ (800280c <HAL_ADC_ConfigChannel+0x35c>)
 80026a8:	f7fe fbce 	bl	8000e48 <assert_failed>
    }
  }

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d009      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x218>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d104      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x218>
 80026be:	f640 3127 	movw	r1, #2855	@ 0xb27
 80026c2:	4852      	ldr	r0, [pc, #328]	@ (800280c <HAL_ADC_ConfigChannel+0x35c>)
 80026c4:	f7fe fbc0 	bl	8000e48 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a50      	ldr	r2, [pc, #320]	@ (8002810 <HAL_ADC_ConfigChannel+0x360>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	f000 80ce 	beq.w	8002870 <HAL_ADC_ConfigChannel+0x3c0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f000 8178 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002814 <HAL_ADC_ConfigChannel+0x364>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f000 8172 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002818 <HAL_ADC_ConfigChannel+0x368>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f000 816c 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a48      	ldr	r2, [pc, #288]	@ (800281c <HAL_ADC_ConfigChannel+0x36c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f000 8166 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a46      	ldr	r2, [pc, #280]	@ (8002820 <HAL_ADC_ConfigChannel+0x370>)
 8002708:	4293      	cmp	r3, r2
 800270a:	f000 8160 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a44      	ldr	r2, [pc, #272]	@ (8002824 <HAL_ADC_ConfigChannel+0x374>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f000 815a 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a42      	ldr	r2, [pc, #264]	@ (8002828 <HAL_ADC_ConfigChannel+0x378>)
 8002720:	4293      	cmp	r3, r2
 8002722:	f000 8154 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a40      	ldr	r2, [pc, #256]	@ (800282c <HAL_ADC_ConfigChannel+0x37c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	f000 814e 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3e      	ldr	r2, [pc, #248]	@ (8002830 <HAL_ADC_ConfigChannel+0x380>)
 8002738:	4293      	cmp	r3, r2
 800273a:	f000 8148 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3c      	ldr	r2, [pc, #240]	@ (8002834 <HAL_ADC_ConfigChannel+0x384>)
 8002744:	4293      	cmp	r3, r2
 8002746:	f000 8142 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3a      	ldr	r2, [pc, #232]	@ (8002838 <HAL_ADC_ConfigChannel+0x388>)
 8002750:	4293      	cmp	r3, r2
 8002752:	f000 813c 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a38      	ldr	r2, [pc, #224]	@ (800283c <HAL_ADC_ConfigChannel+0x38c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	f000 8136 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <HAL_ADC_ConfigChannel+0x390>)
 8002768:	4293      	cmp	r3, r2
 800276a:	f000 8130 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a34      	ldr	r2, [pc, #208]	@ (8002844 <HAL_ADC_ConfigChannel+0x394>)
 8002774:	4293      	cmp	r3, r2
 8002776:	f000 812a 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a32      	ldr	r2, [pc, #200]	@ (8002848 <HAL_ADC_ConfigChannel+0x398>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f000 8124 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a30      	ldr	r2, [pc, #192]	@ (800284c <HAL_ADC_ConfigChannel+0x39c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	f000 811e 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2e      	ldr	r2, [pc, #184]	@ (8002850 <HAL_ADC_ConfigChannel+0x3a0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f000 8118 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002854 <HAL_ADC_ConfigChannel+0x3a4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f000 8112 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002858 <HAL_ADC_ConfigChannel+0x3a8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f000 810c 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_ADC_ConfigChannel+0x3ac>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	f000 8106 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a26      	ldr	r2, [pc, #152]	@ (8002860 <HAL_ADC_ConfigChannel+0x3b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	f000 8100 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a24      	ldr	r2, [pc, #144]	@ (8002864 <HAL_ADC_ConfigChannel+0x3b4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	f000 80fa 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a22      	ldr	r2, [pc, #136]	@ (8002868 <HAL_ADC_ConfigChannel+0x3b8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	f000 80f4 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002864 <HAL_ADC_ConfigChannel+0x3b4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f000 80ee 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_ADC_ConfigChannel+0x3bc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	f000 80e8 	beq.w	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80027fe:	f640 312c 	movw	r1, #2860	@ 0xb2c
 8002802:	4802      	ldr	r0, [pc, #8]	@ (800280c <HAL_ADC_ConfigChannel+0x35c>)
 8002804:	f7fe fb20 	bl	8000e48 <assert_failed>
 8002808:	e0e1      	b.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800280a:	bf00      	nop
 800280c:	0800a5a4 	.word	0x0800a5a4
 8002810:	47ff0000 	.word	0x47ff0000
 8002814:	04300002 	.word	0x04300002
 8002818:	08600004 	.word	0x08600004
 800281c:	0c900008 	.word	0x0c900008
 8002820:	10c00010 	.word	0x10c00010
 8002824:	14f00020 	.word	0x14f00020
 8002828:	19200040 	.word	0x19200040
 800282c:	1d500080 	.word	0x1d500080
 8002830:	21800100 	.word	0x21800100
 8002834:	25b00200 	.word	0x25b00200
 8002838:	2a000400 	.word	0x2a000400
 800283c:	2e300800 	.word	0x2e300800
 8002840:	32601000 	.word	0x32601000
 8002844:	36902000 	.word	0x36902000
 8002848:	3ac04000 	.word	0x3ac04000
 800284c:	3ef08000 	.word	0x3ef08000
 8002850:	43210000 	.word	0x43210000
 8002854:	47520000 	.word	0x47520000
 8002858:	4b840000 	.word	0x4b840000
 800285c:	4fb80000 	.word	0x4fb80000
 8002860:	cb840000 	.word	0xcb840000
 8002864:	c7520000 	.word	0xc7520000
 8002868:	c3210000 	.word	0xc3210000
 800286c:	cfb80000 	.word	0xcfb80000
  }
  else
  {
    if (hadc->Instance == ADC1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a70      	ldr	r2, [pc, #448]	@ (8002a38 <HAL_ADC_ConfigChannel+0x588>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d136      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
    {
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a3c <HAL_ADC_ConfigChannel+0x58c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6d      	ldr	r2, [pc, #436]	@ (8002a40 <HAL_ADC_ConfigChannel+0x590>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02c      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6c      	ldr	r2, [pc, #432]	@ (8002a44 <HAL_ADC_ConfigChannel+0x594>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d027      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a48 <HAL_ADC_ConfigChannel+0x598>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d022      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a69      	ldr	r2, [pc, #420]	@ (8002a4c <HAL_ADC_ConfigChannel+0x59c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d01d      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a67      	ldr	r2, [pc, #412]	@ (8002a50 <HAL_ADC_ConfigChannel+0x5a0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d018      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a66      	ldr	r2, [pc, #408]	@ (8002a54 <HAL_ADC_ConfigChannel+0x5a4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a64      	ldr	r2, [pc, #400]	@ (8002a58 <HAL_ADC_ConfigChannel+0x5a8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00e      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a63      	ldr	r2, [pc, #396]	@ (8002a5c <HAL_ADC_ConfigChannel+0x5ac>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a61      	ldr	r2, [pc, #388]	@ (8002a60 <HAL_ADC_ConfigChannel+0x5b0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x438>
 80028de:	f640 3132 	movw	r1, #2866	@ 0xb32
 80028e2:	4860      	ldr	r0, [pc, #384]	@ (8002a64 <HAL_ADC_ConfigChannel+0x5b4>)
 80028e4:	f7fe fab0 	bl	8000e48 <assert_failed>
    }
    if (hadc->Instance == ADC2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002a68 <HAL_ADC_ConfigChannel+0x5b8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d131      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
    {
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a51      	ldr	r2, [pc, #324]	@ (8002a3c <HAL_ADC_ConfigChannel+0x58c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4f      	ldr	r2, [pc, #316]	@ (8002a40 <HAL_ADC_ConfigChannel+0x590>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a44 <HAL_ADC_ConfigChannel+0x594>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a4c      	ldr	r2, [pc, #304]	@ (8002a48 <HAL_ADC_ConfigChannel+0x598>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a4c <HAL_ADC_ConfigChannel+0x59c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a49      	ldr	r2, [pc, #292]	@ (8002a50 <HAL_ADC_ConfigChannel+0x5a0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <HAL_ADC_ConfigChannel+0x5a4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a46      	ldr	r2, [pc, #280]	@ (8002a58 <HAL_ADC_ConfigChannel+0x5a8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a46      	ldr	r2, [pc, #280]	@ (8002a60 <HAL_ADC_ConfigChannel+0x5b0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x4a6>
 800294c:	f640 3136 	movw	r1, #2870	@ 0xb36
 8002950:	4844      	ldr	r0, [pc, #272]	@ (8002a64 <HAL_ADC_ConfigChannel+0x5b4>)
 8002952:	f7fe fa79 	bl	8000e48 <assert_failed>
    }
#if defined(ADC3)
    /* ADC3 is not available on some STM32H7 products */
    if (hadc->Instance == ADC3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a44      	ldr	r2, [pc, #272]	@ (8002a6c <HAL_ADC_ConfigChannel+0x5bc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d136      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
    {
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a35      	ldr	r2, [pc, #212]	@ (8002a3c <HAL_ADC_ConfigChannel+0x58c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a34      	ldr	r2, [pc, #208]	@ (8002a40 <HAL_ADC_ConfigChannel+0x590>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a32      	ldr	r2, [pc, #200]	@ (8002a44 <HAL_ADC_ConfigChannel+0x594>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a31      	ldr	r2, [pc, #196]	@ (8002a48 <HAL_ADC_ConfigChannel+0x598>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a4c <HAL_ADC_ConfigChannel+0x59c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2e      	ldr	r2, [pc, #184]	@ (8002a50 <HAL_ADC_ConfigChannel+0x5a0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a54 <HAL_ADC_ConfigChannel+0x5a4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a31      	ldr	r2, [pc, #196]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5c0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <HAL_ADC_ConfigChannel+0x5c4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2e      	ldr	r2, [pc, #184]	@ (8002a78 <HAL_ADC_ConfigChannel+0x5c8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x51e>
 80029c4:	f640 313c 	movw	r1, #2876	@ 0xb3c
 80029c8:	4826      	ldr	r0, [pc, #152]	@ (8002a64 <HAL_ADC_ConfigChannel+0x5b4>)
 80029ca:	f7fe fa3d 	bl	8000e48 <assert_failed>
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x52c>
 80029d8:	2302      	movs	r3, #2
 80029da:	e362      	b.n	80030a2 <HAL_ADC_ConfigChannel+0xbf2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe feec 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f040 8347 	bne.w	8003084 <HAL_ADC_ConfigChannel+0xbd4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db4e      	blt.n	8002a9c <HAL_ADC_ConfigChannel+0x5ec>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x56c>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2201      	movs	r2, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	e038      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x5de>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d123      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x5cc>
  {
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e025      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x5d4>
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	04300002 	.word	0x04300002
 8002a40:	08600004 	.word	0x08600004
 8002a44:	0c900008 	.word	0x0c900008
 8002a48:	10c00010 	.word	0x10c00010
 8002a4c:	14f00020 	.word	0x14f00020
 8002a50:	2a000400 	.word	0x2a000400
 8002a54:	2e300800 	.word	0x2e300800
 8002a58:	32601000 	.word	0x32601000
 8002a5c:	43210000 	.word	0x43210000
 8002a60:	4b840000 	.word	0x4b840000
 8002a64:	0800a5a4 	.word	0x0800a5a4
 8002a68:	40022100 	.word	0x40022100
 8002a6c:	58026000 	.word	0x58026000
 8002a70:	36902000 	.word	0x36902000
 8002a74:	3ac04000 	.word	0x3ac04000
 8002a78:	3ef08000 	.word	0x3ef08000
  }
  return __builtin_clz(value);
 8002a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2201      	movs	r2, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	69d1      	ldr	r1, [r2, #28]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f7fe fd80 	bl	80015ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fe87 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fe94 	bl	80017ec <LL_ADC_INJ_IsConversionOngoing>
 8002ac4:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 80cd 	bne.w	8002c68 <HAL_ADC_ConfigChannel+0x7b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 80c9 	bne.w	8002c68 <HAL_ADC_ConfigChannel+0x7b8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7fe fda2 	bl	800162c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ae8:	4b91      	ldr	r3, [pc, #580]	@ (8002d30 <HAL_ADC_ConfigChannel+0x880>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002af4:	d10b      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x65e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	e01d      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x69a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x684>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	e00a      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x69a>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d041      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x728>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6919      	ldr	r1, [r3, #16]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b62:	f7fe fcbd 	bl	80014e0 <LL_ADC_SetOffset>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	7e5b      	ldrb	r3, [r3, #25]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x6d0>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7e5b      	ldrb	r3, [r3, #25]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d004      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x6d0>
 8002b76:	f640 318a 	movw	r1, #2954	@ 0xb8a
 8002b7a:	486e      	ldr	r0, [pc, #440]	@ (8002d34 <HAL_ADC_ConfigChannel+0x884>)
 8002b7c:	f7fe f964 	bl	8000e48 <assert_failed>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6919      	ldr	r1, [r3, #16]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	7e5b      	ldrb	r3, [r3, #25]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x6e6>
 8002b90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b94:	e000      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x6e8>
 8002b96:	2300      	movs	r3, #0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f7fe fcda 	bl	8001552 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	7e1b      	ldrb	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x708>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	7e1b      	ldrb	r3, [r3, #24]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d004      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x708>
 8002bae:	f640 318e 	movw	r1, #2958	@ 0xb8e
 8002bb2:	4860      	ldr	r0, [pc, #384]	@ (8002d34 <HAL_ADC_ConfigChannel+0x884>)
 8002bb4:	f7fe f948 	bl	8000e48 <assert_failed>
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6919      	ldr	r1, [r3, #16]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x71e>
 8002bc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x720>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f7fe fca5 	bl	8001520 <LL_ADC_SetDataRightShift>
 8002bd6:	e047      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x7b8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	069b      	lsls	r3, r3, #26
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x74c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bfa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	069b      	lsls	r3, r3, #26
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d107      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x770>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c1e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x794>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c42:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	069b      	lsls	r3, r3, #26
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x7b8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c66:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fd97 	bl	80017a0 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 820e 	bne.w	8003096 <HAL_ADC_ConfigChannel+0xbe6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f7fe fcfc 	bl	8001684 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <HAL_ADC_ConfigChannel+0x888>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	f040 8134 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0xa50>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x810>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	bf94      	ite	ls
 8002cb8:	2301      	movls	r3, #1
 8002cba:	2300      	movhi	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e019      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x844>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x82c>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x834>
  return __builtin_clz(value);
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	bf94      	ite	ls
 8002cee:	2301      	movls	r3, #1
 8002cf0:	2300      	movhi	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d07f      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x948>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x864>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	069b      	lsls	r3, r3, #26
 8002d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d12:	e01b      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x89c>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x88c>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e009      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x894>
 8002d30:	5c001000 	.word	0x5c001000
 8002d34:	0800a5a4 	.word	0x0800a5a4
 8002d38:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	069b      	lsls	r3, r3, #26
 8002d48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x8bc>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	e017      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x8ec>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x8d8>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x8e0>
  return __builtin_clz(value);
 8002d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	ea42 0103 	orr.w	r1, r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x912>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	051b      	lsls	r3, r3, #20
 8002dc0:	e018      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x944>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x92e>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e003      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x936>
  return __builtin_clz(value);
 8002dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df4:	430b      	orrs	r3, r1
 8002df6:	e07e      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0xa46>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x964>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e12:	e015      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x990>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x980>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x988>
  return __builtin_clz(value);
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x9b0>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	e017      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x9e0>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x9cc>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x9d4>
  return __builtin_clz(value);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	ea42 0103 	orr.w	r1, r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0xa0c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b1e      	subs	r3, #30
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	e01b      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0xa44>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	60fb      	str	r3, [r7, #12]
  return result;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0xa28>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e003      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0xa30>
  return __builtin_clz(value);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f003 021f 	and.w	r2, r3, #31
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	3b1e      	subs	r3, #30
 8002eee:	051b      	lsls	r3, r3, #20
 8002ef0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	6892      	ldr	r2, [r2, #8]
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7fe fb96 	bl	800162c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f280 80c6 	bge.w	8003096 <HAL_ADC_ConfigChannel+0xbe6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <HAL_ADC_ConfigChannel+0xbfc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0xa6e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc00>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0xa72>
 8002f1e:	4b65      	ldr	r3, [pc, #404]	@ (80030b4 <HAL_ADC_ConfigChannel+0xc04>)
 8002f20:	e000      	b.n	8002f24 <HAL_ADC_ConfigChannel+0xa74>
 8002f22:	4b65      	ldr	r3, [pc, #404]	@ (80030b8 <HAL_ADC_ConfigChannel+0xc08>)
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe faa9 	bl	800147c <LL_ADC_GetCommonPathInternalCh>
 8002f2a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5e      	ldr	r2, [pc, #376]	@ (80030ac <HAL_ADC_ConfigChannel+0xbfc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0xa90>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc00>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10e      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0xaae>
 8002f40:	485a      	ldr	r0, [pc, #360]	@ (80030ac <HAL_ADC_ConfigChannel+0xbfc>)
 8002f42:	f7fe fc2d 	bl	80017a0 <LL_ADC_IsEnabled>
 8002f46:	4604      	mov	r4, r0
 8002f48:	4859      	ldr	r0, [pc, #356]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc00>)
 8002f4a:	f7fe fc29 	bl	80017a0 <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4323      	orrs	r3, r4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf0c      	ite	eq
 8002f56:	2301      	moveq	r3, #1
 8002f58:	2300      	movne	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	e008      	b.n	8002f70 <HAL_ADC_ConfigChannel+0xac0>
 8002f5e:	4857      	ldr	r0, [pc, #348]	@ (80030bc <HAL_ADC_ConfigChannel+0xc0c>)
 8002f60:	f7fe fc1e 	bl	80017a0 <LL_ADC_IsEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d07d      	beq.n	8003070 <HAL_ADC_ConfigChannel+0xbc0>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a51      	ldr	r2, [pc, #324]	@ (80030c0 <HAL_ADC_ConfigChannel+0xc10>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0xb30>
 8002f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d12b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0xb30>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80030bc <HAL_ADC_ConfigChannel+0xc0c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	f040 8081 	bne.w	8003096 <HAL_ADC_ConfigChannel+0xbe6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a44      	ldr	r2, [pc, #272]	@ (80030ac <HAL_ADC_ConfigChannel+0xbfc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0xaf8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a43      	ldr	r2, [pc, #268]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc00>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0xafc>
 8002fa8:	4a42      	ldr	r2, [pc, #264]	@ (80030b4 <HAL_ADC_ConfigChannel+0xc04>)
 8002faa:	e000      	b.n	8002fae <HAL_ADC_ConfigChannel+0xafe>
 8002fac:	4a42      	ldr	r2, [pc, #264]	@ (80030b8 <HAL_ADC_ConfigChannel+0xc08>)
 8002fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f7fe fa4d 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fbc:	4b41      	ldr	r3, [pc, #260]	@ (80030c4 <HAL_ADC_ConfigChannel+0xc14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	4a41      	ldr	r2, [pc, #260]	@ (80030c8 <HAL_ADC_ConfigChannel+0xc18>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	3301      	adds	r3, #1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fd0:	e002      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0xb28>
              {
                wait_loop_index--;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0xb22>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fde:	e05a      	b.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a39      	ldr	r2, [pc, #228]	@ (80030cc <HAL_ADC_ConfigChannel+0xc1c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d11e      	bne.n	8003028 <HAL_ADC_ConfigChannel+0xb78>
 8002fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d119      	bne.n	8003028 <HAL_ADC_ConfigChannel+0xb78>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a30      	ldr	r2, [pc, #192]	@ (80030bc <HAL_ADC_ConfigChannel+0xc0c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d14b      	bne.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <HAL_ADC_ConfigChannel+0xbfc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_ADC_ConfigChannel+0xb62>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a28      	ldr	r2, [pc, #160]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc00>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0xb66>
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_ADC_ConfigChannel+0xc04>)
 8003014:	e000      	b.n	8003018 <HAL_ADC_ConfigChannel+0xb68>
 8003016:	4a28      	ldr	r2, [pc, #160]	@ (80030b8 <HAL_ADC_ConfigChannel+0xc08>)
 8003018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7fe fa18 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003026:	e036      	b.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a28      	ldr	r2, [pc, #160]	@ (80030d0 <HAL_ADC_ConfigChannel+0xc20>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d131      	bne.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
 8003032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d12c      	bne.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1e      	ldr	r2, [pc, #120]	@ (80030bc <HAL_ADC_ConfigChannel+0xc0c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d127      	bne.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <HAL_ADC_ConfigChannel+0xbfc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_ADC_ConfigChannel+0xbaa>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a16      	ldr	r2, [pc, #88]	@ (80030b0 <HAL_ADC_ConfigChannel+0xc00>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0xbae>
 800305a:	4a16      	ldr	r2, [pc, #88]	@ (80030b4 <HAL_ADC_ConfigChannel+0xc04>)
 800305c:	e000      	b.n	8003060 <HAL_ADC_ConfigChannel+0xbb0>
 800305e:	4a16      	ldr	r2, [pc, #88]	@ (80030b8 <HAL_ADC_ConfigChannel+0xc08>)
 8003060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003062:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7fe f9f4 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
 800306e:	e012      	b.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003082:	e008      	b.n	8003096 <HAL_ADC_ConfigChannel+0xbe6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800309e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3784      	adds	r7, #132	@ 0x84
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022100 	.word	0x40022100
 80030b4:	40022300 	.word	0x40022300
 80030b8:	58026300 	.word	0x58026300
 80030bc:	58026000 	.word	0x58026000
 80030c0:	cb840000 	.word	0xcb840000
 80030c4:	24000000 	.word	0x24000000
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	c7520000 	.word	0xc7520000
 80030d0:	cfb80000 	.word	0xcfb80000

080030d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7a      	ldr	r2, [pc, #488]	@ (80032cc <ADC_ConfigureBoostMode+0x1f8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <ADC_ConfigureBoostMode+0x1c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a79      	ldr	r2, [pc, #484]	@ (80032d0 <ADC_ConfigureBoostMode+0x1fc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d109      	bne.n	8003104 <ADC_ConfigureBoostMode+0x30>
 80030f0:	4b78      	ldr	r3, [pc, #480]	@ (80032d4 <ADC_ConfigureBoostMode+0x200>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e008      	b.n	8003116 <ADC_ConfigureBoostMode+0x42>
 8003104:	4b74      	ldr	r3, [pc, #464]	@ (80032d8 <ADC_ConfigureBoostMode+0x204>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01c      	beq.n	8003154 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800311a:	f002 f80d 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 800311e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003128:	d010      	beq.n	800314c <ADC_ConfigureBoostMode+0x78>
 800312a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800312e:	d873      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x144>
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003134:	d002      	beq.n	800313c <ADC_ConfigureBoostMode+0x68>
 8003136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800313a:	d16d      	bne.n	8003218 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	60fb      	str	r3, [r7, #12]
        break;
 800314a:	e068      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	60fb      	str	r3, [r7, #12]
        break;
 8003152:	e064      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003154:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	f003 fd78 	bl	8006c50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003160:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800316a:	d051      	beq.n	8003210 <ADC_ConfigureBoostMode+0x13c>
 800316c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003170:	d854      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 8003172:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003176:	d047      	beq.n	8003208 <ADC_ConfigureBoostMode+0x134>
 8003178:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800317c:	d84e      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 800317e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003182:	d03d      	beq.n	8003200 <ADC_ConfigureBoostMode+0x12c>
 8003184:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003188:	d848      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 800318a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800318e:	d033      	beq.n	80031f8 <ADC_ConfigureBoostMode+0x124>
 8003190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003194:	d842      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 8003196:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800319a:	d029      	beq.n	80031f0 <ADC_ConfigureBoostMode+0x11c>
 800319c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80031a0:	d83c      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 80031a2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031a6:	d01a      	beq.n	80031de <ADC_ConfigureBoostMode+0x10a>
 80031a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031ac:	d836      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 80031ae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80031b2:	d014      	beq.n	80031de <ADC_ConfigureBoostMode+0x10a>
 80031b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80031b8:	d830      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 80031ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031be:	d00e      	beq.n	80031de <ADC_ConfigureBoostMode+0x10a>
 80031c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c4:	d82a      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 80031c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031ca:	d008      	beq.n	80031de <ADC_ConfigureBoostMode+0x10a>
 80031cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031d0:	d824      	bhi.n	800321c <ADC_ConfigureBoostMode+0x148>
 80031d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031d6:	d002      	beq.n	80031de <ADC_ConfigureBoostMode+0x10a>
 80031d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031dc:	d11e      	bne.n	800321c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0c9b      	lsrs	r3, r3, #18
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	60fb      	str	r3, [r7, #12]
        break;
 80031ee:	e016      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
        break;
 80031f6:	e012      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	60fb      	str	r3, [r7, #12]
        break;
 80031fe:	e00e      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	60fb      	str	r3, [r7, #12]
        break;
 8003206:	e00a      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	09db      	lsrs	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
        break;
 800320e:	e006      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	60fb      	str	r3, [r7, #12]
        break;
 8003216:	e002      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003218:	bf00      	nop
 800321a:	e000      	b.n	800321e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800321c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800321e:	f7fe f8cb 	bl	80013b8 <HAL_GetREVID>
 8003222:	4603      	mov	r3, r0
 8003224:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003228:	4293      	cmp	r3, r2
 800322a:	d815      	bhi.n	8003258 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a2b      	ldr	r2, [pc, #172]	@ (80032dc <ADC_ConfigureBoostMode+0x208>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d908      	bls.n	8003246 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003242:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003244:	e03e      	b.n	80032c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003254:	609a      	str	r2, [r3, #8]
}
 8003256:	e035      	b.n	80032c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <ADC_ConfigureBoostMode+0x20c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d808      	bhi.n	8003278 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	e025      	b.n	80032c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <ADC_ConfigureBoostMode+0x210>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d80a      	bhi.n	8003296 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	e016      	b.n	80032c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a13      	ldr	r2, [pc, #76]	@ (80032e8 <ADC_ConfigureBoostMode+0x214>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d80a      	bhi.n	80032b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b0:	609a      	str	r2, [r3, #8]
}
 80032b2:	e007      	b.n	80032c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40022100 	.word	0x40022100
 80032d4:	40022300 	.word	0x40022300
 80032d8:	58026300 	.word	0x58026300
 80032dc:	01312d00 	.word	0x01312d00
 80032e0:	005f5e10 	.word	0x005f5e10
 80032e4:	00bebc20 	.word	0x00bebc20
 80032e8:	017d7840 	.word	0x017d7840

080032ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <__NVIC_SetPriorityGrouping+0x40>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 800337a:	4313      	orrs	r3, r2
 800337c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337e:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <__NVIC_SetPriorityGrouping+0x40>)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	05fa0000 	.word	0x05fa0000

08003398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <__NVIC_GetPriorityGrouping+0x18>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 0307 	and.w	r3, r3, #7
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	db0b      	blt.n	80033de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	4907      	ldr	r1, [pc, #28]	@ (80033ec <__NVIC_EnableIRQ+0x38>)
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2001      	movs	r0, #1
 80033d6:	fa00 f202 	lsl.w	r2, r0, r2
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000e100 	.word	0xe000e100

080033f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db0a      	blt.n	800341a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	490c      	ldr	r1, [pc, #48]	@ (800343c <__NVIC_SetPriority+0x4c>)
 800340a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	440b      	add	r3, r1
 8003414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003418:	e00a      	b.n	8003430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4908      	ldr	r1, [pc, #32]	@ (8003440 <__NVIC_SetPriority+0x50>)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	3b04      	subs	r3, #4
 8003428:	0112      	lsls	r2, r2, #4
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	440b      	add	r3, r1
 800342e:	761a      	strb	r2, [r3, #24]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000e100 	.word	0xe000e100
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003444:	b480      	push	{r7}
 8003446:	b089      	sub	sp, #36	@ 0x24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f1c3 0307 	rsb	r3, r3, #7
 800345e:	2b04      	cmp	r3, #4
 8003460:	bf28      	it	cs
 8003462:	2304      	movcs	r3, #4
 8003464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3304      	adds	r3, #4
 800346a:	2b06      	cmp	r3, #6
 800346c:	d902      	bls.n	8003474 <NVIC_EncodePriority+0x30>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3b03      	subs	r3, #3
 8003472:	e000      	b.n	8003476 <NVIC_EncodePriority+0x32>
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	401a      	ands	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	43d9      	mvns	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	4313      	orrs	r3, r2
         );
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	@ 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034bc:	d301      	bcc.n	80034c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034be:	2301      	movs	r3, #1
 80034c0:	e00f      	b.n	80034e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c2:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <SysTick_Config+0x40>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ca:	210f      	movs	r1, #15
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	f7ff ff8e 	bl	80033f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <SysTick_Config+0x40>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034da:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <SysTick_Config+0x40>)
 80034dc:	2207      	movs	r2, #7
 80034de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	e000e010 	.word	0xe000e010

080034f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b07      	cmp	r3, #7
 80034fc:	d00f      	beq.n	800351e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d00c      	beq.n	800351e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d009      	beq.n	800351e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d006      	beq.n	800351e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d003      	beq.n	800351e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003516:	2191      	movs	r1, #145	@ 0x91
 8003518:	4804      	ldr	r0, [pc, #16]	@ (800352c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800351a:	f7fd fc95 	bl	8000e48 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ff16 	bl	8003350 <__NVIC_SetPriorityGrouping>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	0800a5dc 	.word	0x0800a5dc

08003530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d903      	bls.n	800354c <HAL_NVIC_SetPriority+0x1c>
 8003544:	21a9      	movs	r1, #169	@ 0xa9
 8003546:	480e      	ldr	r0, [pc, #56]	@ (8003580 <HAL_NVIC_SetPriority+0x50>)
 8003548:	f7fd fc7e 	bl	8000e48 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	d903      	bls.n	800355a <HAL_NVIC_SetPriority+0x2a>
 8003552:	21aa      	movs	r1, #170	@ 0xaa
 8003554:	480a      	ldr	r0, [pc, #40]	@ (8003580 <HAL_NVIC_SetPriority+0x50>)
 8003556:	f7fd fc77 	bl	8000e48 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800355a:	f7ff ff1d 	bl	8003398 <__NVIC_GetPriorityGrouping>
 800355e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	6978      	ldr	r0, [r7, #20]
 8003566:	f7ff ff6d 	bl	8003444 <NVIC_EncodePriority>
 800356a:	4602      	mov	r2, r0
 800356c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff3c 	bl	80033f0 <__NVIC_SetPriority>
}
 8003578:	bf00      	nop
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800a5dc 	.word	0x0800a5dc

08003584 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800358e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	da03      	bge.n	800359e <HAL_NVIC_EnableIRQ+0x1a>
 8003596:	21bd      	movs	r1, #189	@ 0xbd
 8003598:	4805      	ldr	r0, [pc, #20]	@ (80035b0 <HAL_NVIC_EnableIRQ+0x2c>)
 800359a:	f7fd fc55 	bl	8000e48 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff06 	bl	80033b4 <__NVIC_EnableIRQ>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	0800a5dc 	.word	0x0800a5dc

080035b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff75 	bl	80034ac <SysTick_Config>
 80035c2:	4603      	mov	r3, r0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035da:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <HAL_GPIO_Init+0x11c>)
 80035dc:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a42      	ldr	r2, [pc, #264]	@ (80036ec <HAL_GPIO_Init+0x120>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02b      	beq.n	800363e <HAL_GPIO_Init+0x72>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a41      	ldr	r2, [pc, #260]	@ (80036f0 <HAL_GPIO_Init+0x124>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_GPIO_Init+0x72>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a40      	ldr	r2, [pc, #256]	@ (80036f4 <HAL_GPIO_Init+0x128>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d023      	beq.n	800363e <HAL_GPIO_Init+0x72>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a3f      	ldr	r2, [pc, #252]	@ (80036f8 <HAL_GPIO_Init+0x12c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01f      	beq.n	800363e <HAL_GPIO_Init+0x72>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a3e      	ldr	r2, [pc, #248]	@ (80036fc <HAL_GPIO_Init+0x130>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01b      	beq.n	800363e <HAL_GPIO_Init+0x72>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a3d      	ldr	r2, [pc, #244]	@ (8003700 <HAL_GPIO_Init+0x134>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d017      	beq.n	800363e <HAL_GPIO_Init+0x72>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a3c      	ldr	r2, [pc, #240]	@ (8003704 <HAL_GPIO_Init+0x138>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0x72>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a3b      	ldr	r2, [pc, #236]	@ (8003708 <HAL_GPIO_Init+0x13c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00f      	beq.n	800363e <HAL_GPIO_Init+0x72>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a3a      	ldr	r2, [pc, #232]	@ (800370c <HAL_GPIO_Init+0x140>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <HAL_GPIO_Init+0x72>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a39      	ldr	r2, [pc, #228]	@ (8003710 <HAL_GPIO_Init+0x144>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x72>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a38      	ldr	r2, [pc, #224]	@ (8003714 <HAL_GPIO_Init+0x148>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x72>
 8003636:	21b3      	movs	r1, #179	@ 0xb3
 8003638:	4837      	ldr	r0, [pc, #220]	@ (8003718 <HAL_GPIO_Init+0x14c>)
 800363a:	f7fd fc05 	bl	8000e48 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <HAL_GPIO_Init+0x86>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003650:	d303      	bcc.n	800365a <HAL_GPIO_Init+0x8e>
 8003652:	21b4      	movs	r1, #180	@ 0xb4
 8003654:	4830      	ldr	r0, [pc, #192]	@ (8003718 <HAL_GPIO_Init+0x14c>)
 8003656:	f7fd fbf7 	bl	8000e48 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 824f 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	f000 824a 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b11      	cmp	r3, #17
 8003674:	f000 8245 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	f000 8240 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b12      	cmp	r3, #18
 8003688:	f000 823b 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003694:	f000 8235 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80036a0:	f000 822f 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80036ac:	f000 8229 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80036b8:	f000 8223 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80036c4:	f000 821d 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80036d0:	f000 8217 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	f000 8212 	beq.w	8003b02 <HAL_GPIO_Init+0x536>
 80036de:	21b5      	movs	r1, #181	@ 0xb5
 80036e0:	480d      	ldr	r0, [pc, #52]	@ (8003718 <HAL_GPIO_Init+0x14c>)
 80036e2:	f7fd fbb1 	bl	8000e48 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036e6:	e20c      	b.n	8003b02 <HAL_GPIO_Init+0x536>
 80036e8:	58000080 	.word	0x58000080
 80036ec:	58020000 	.word	0x58020000
 80036f0:	58020400 	.word	0x58020400
 80036f4:	58020800 	.word	0x58020800
 80036f8:	58020c00 	.word	0x58020c00
 80036fc:	58021000 	.word	0x58021000
 8003700:	58021400 	.word	0x58021400
 8003704:	58021800 	.word	0x58021800
 8003708:	58021c00 	.word	0x58021c00
 800370c:	58022000 	.word	0x58022000
 8003710:	58022400 	.word	0x58022400
 8003714:	58022800 	.word	0x58022800
 8003718:	0800a618 	.word	0x0800a618
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 81e4 	beq.w	8003afc <HAL_GPIO_Init+0x530>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d005      	beq.n	800374c <HAL_GPIO_Init+0x180>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d144      	bne.n	80037d6 <HAL_GPIO_Init+0x20a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00f      	beq.n	8003774 <HAL_GPIO_Init+0x1a8>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d00b      	beq.n	8003774 <HAL_GPIO_Init+0x1a8>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d007      	beq.n	8003774 <HAL_GPIO_Init+0x1a8>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x1a8>
 800376c:	21c4      	movs	r1, #196	@ 0xc4
 800376e:	489a      	ldr	r0, [pc, #616]	@ (80039d8 <HAL_GPIO_Init+0x40c>)
 8003770:	f7fd fb6a 	bl	8000e48 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037aa:	2201      	movs	r2, #1
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 0201 	and.w	r2, r3, #1
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d027      	beq.n	8003832 <HAL_GPIO_Init+0x266>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_GPIO_Init+0x236>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x236>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x236>
 80037fa:	21d6      	movs	r1, #214	@ 0xd6
 80037fc:	4876      	ldr	r0, [pc, #472]	@ (80039d8 <HAL_GPIO_Init+0x40c>)
 80037fe:	f7fd fb23 	bl	8000e48 <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d15b      	bne.n	80038f6 <HAL_GPIO_Init+0x32a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a66      	ldr	r2, [pc, #408]	@ (80039dc <HAL_GPIO_Init+0x410>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02b      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a65      	ldr	r2, [pc, #404]	@ (80039e0 <HAL_GPIO_Init+0x414>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d027      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a64      	ldr	r2, [pc, #400]	@ (80039e4 <HAL_GPIO_Init+0x418>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d023      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a63      	ldr	r2, [pc, #396]	@ (80039e8 <HAL_GPIO_Init+0x41c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a62      	ldr	r2, [pc, #392]	@ (80039ec <HAL_GPIO_Init+0x420>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01b      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a61      	ldr	r2, [pc, #388]	@ (80039f0 <HAL_GPIO_Init+0x424>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d017      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a60      	ldr	r2, [pc, #384]	@ (80039f4 <HAL_GPIO_Init+0x428>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a5f      	ldr	r2, [pc, #380]	@ (80039f8 <HAL_GPIO_Init+0x42c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00f      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a5e      	ldr	r2, [pc, #376]	@ (80039fc <HAL_GPIO_Init+0x430>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00b      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a5d      	ldr	r2, [pc, #372]	@ (8003a00 <HAL_GPIO_Init+0x434>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a5c      	ldr	r2, [pc, #368]	@ (8003a04 <HAL_GPIO_Init+0x438>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
 8003896:	21e3      	movs	r1, #227	@ 0xe3
 8003898:	484f      	ldr	r0, [pc, #316]	@ (80039d8 <HAL_GPIO_Init+0x40c>)
 800389a:	f7fd fad5 	bl	8000e48 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d903      	bls.n	80038ae <HAL_GPIO_Init+0x2e2>
 80038a6:	21e4      	movs	r1, #228	@ 0xe4
 80038a8:	484b      	ldr	r0, [pc, #300]	@ (80039d8 <HAL_GPIO_Init+0x40c>)
 80038aa:	f7fd facd 	bl	8000e48 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	08da      	lsrs	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3208      	adds	r2, #8
 80038b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	08da      	lsrs	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3208      	adds	r2, #8
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2203      	movs	r2, #3
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0203 	and.w	r2, r3, #3
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80e2 	beq.w	8003afc <HAL_GPIO_Init+0x530>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003938:	4b33      	ldr	r3, [pc, #204]	@ (8003a08 <HAL_GPIO_Init+0x43c>)
 800393a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800393e:	4a32      	ldr	r2, [pc, #200]	@ (8003a08 <HAL_GPIO_Init+0x43c>)
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003948:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_GPIO_Init+0x43c>)
 800394a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003956:	4a2d      	ldr	r2, [pc, #180]	@ (8003a0c <HAL_GPIO_Init+0x440>)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	220f      	movs	r2, #15
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a17      	ldr	r2, [pc, #92]	@ (80039dc <HAL_GPIO_Init+0x410>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d054      	beq.n	8003a2c <HAL_GPIO_Init+0x460>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a16      	ldr	r2, [pc, #88]	@ (80039e0 <HAL_GPIO_Init+0x414>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04e      	beq.n	8003a28 <HAL_GPIO_Init+0x45c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a15      	ldr	r2, [pc, #84]	@ (80039e4 <HAL_GPIO_Init+0x418>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d048      	beq.n	8003a24 <HAL_GPIO_Init+0x458>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a14      	ldr	r2, [pc, #80]	@ (80039e8 <HAL_GPIO_Init+0x41c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d042      	beq.n	8003a20 <HAL_GPIO_Init+0x454>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a13      	ldr	r2, [pc, #76]	@ (80039ec <HAL_GPIO_Init+0x420>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d03c      	beq.n	8003a1c <HAL_GPIO_Init+0x450>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a12      	ldr	r2, [pc, #72]	@ (80039f0 <HAL_GPIO_Init+0x424>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d036      	beq.n	8003a18 <HAL_GPIO_Init+0x44c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a11      	ldr	r2, [pc, #68]	@ (80039f4 <HAL_GPIO_Init+0x428>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d030      	beq.n	8003a14 <HAL_GPIO_Init+0x448>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a10      	ldr	r2, [pc, #64]	@ (80039f8 <HAL_GPIO_Init+0x42c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02a      	beq.n	8003a10 <HAL_GPIO_Init+0x444>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <HAL_GPIO_Init+0x430>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x406>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003a00 <HAL_GPIO_Init+0x434>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x402>
 80039ca:	2309      	movs	r3, #9
 80039cc:	e02f      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 80039ce:	230a      	movs	r3, #10
 80039d0:	e02d      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 80039d2:	2308      	movs	r3, #8
 80039d4:	e02b      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 80039d6:	bf00      	nop
 80039d8:	0800a618 	.word	0x0800a618
 80039dc:	58020000 	.word	0x58020000
 80039e0:	58020400 	.word	0x58020400
 80039e4:	58020800 	.word	0x58020800
 80039e8:	58020c00 	.word	0x58020c00
 80039ec:	58021000 	.word	0x58021000
 80039f0:	58021400 	.word	0x58021400
 80039f4:	58021800 	.word	0x58021800
 80039f8:	58021c00 	.word	0x58021c00
 80039fc:	58022000 	.word	0x58022000
 8003a00:	58022400 	.word	0x58022400
 8003a04:	58022800 	.word	0x58022800
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	58000400 	.word	0x58000400
 8003a10:	2307      	movs	r3, #7
 8003a12:	e00c      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a14:	2306      	movs	r3, #6
 8003a16:	e00a      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a18:	2305      	movs	r3, #5
 8003a1a:	e008      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e006      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a20:	2303      	movs	r3, #3
 8003a22:	e004      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e002      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_GPIO_Init+0x462>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	f002 0203 	and.w	r2, r2, #3
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	4093      	lsls	r3, r2
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a3e:	4937      	ldr	r1, [pc, #220]	@ (8003b1c <HAL_GPIO_Init+0x550>)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x4a6>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003aa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x500>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x52a>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f47f ae05 	bne.w	800371c <HAL_GPIO_Init+0x150>
  }
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	58000400 	.word	0x58000400

08003b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_GPIO_WritePin+0x20>
 8003b36:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003b3a:	480e      	ldr	r0, [pc, #56]	@ (8003b74 <HAL_GPIO_WritePin+0x54>)
 8003b3c:	f7fd f984 	bl	8000e48 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_GPIO_WritePin+0x36>
 8003b46:	787b      	ldrb	r3, [r7, #1]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d004      	beq.n	8003b56 <HAL_GPIO_WritePin+0x36>
 8003b4c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8003b50:	4808      	ldr	r0, [pc, #32]	@ (8003b74 <HAL_GPIO_WritePin+0x54>)
 8003b52:	f7fd f979 	bl	8000e48 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003b56:	787b      	ldrb	r3, [r7, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5c:	887a      	ldrh	r2, [r7, #2]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b62:	e003      	b.n	8003b6c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	041a      	lsls	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	0800a618 	.word	0x0800a618

08003b78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d007      	beq.n	8003b96 <HAL_PWREx_ConfigSupply+0x1e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d004      	beq.n	8003b96 <HAL_PWREx_ConfigSupply+0x1e>
 8003b8c:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8003b90:	481a      	ldr	r0, [pc, #104]	@ (8003bfc <HAL_PWREx_ConfigSupply+0x84>)
 8003b92:	f7fd f959 	bl	8000e48 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b96:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <HAL_PWREx_ConfigSupply+0x88>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ba2:	4b17      	ldr	r3, [pc, #92]	@ (8003c00 <HAL_PWREx_ConfigSupply+0x88>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e01f      	b.n	8003bf4 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e01d      	b.n	8003bf4 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bb8:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <HAL_PWREx_ConfigSupply+0x88>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f023 0207 	bic.w	r2, r3, #7
 8003bc0:	490f      	ldr	r1, [pc, #60]	@ (8003c00 <HAL_PWREx_ConfigSupply+0x88>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bc8:	f7fd fbea 	bl	80013a0 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bce:	e009      	b.n	8003be4 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bd0:	f7fd fbe6 	bl	80013a0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bde:	d901      	bls.n	8003be4 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_PWREx_ConfigSupply+0x88>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf0:	d1ee      	bne.n	8003bd0 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	0800a654 	.word	0x0800a654
 8003c00:	58024800 	.word	0x58024800

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	@ 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f000 bd9c 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d028      	beq.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d122      	bne.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d11c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d110      	bne.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_RCC_OscConfig+0x6e>
 8003c68:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8003c6c:	4897      	ldr	r0, [pc, #604]	@ (8003ecc <HAL_RCC_OscConfig+0x2c8>)
 8003c6e:	f7fd f8eb 	bl	8000e48 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 809d 	beq.w	8003dba <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <HAL_RCC_OscConfig+0xa2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_OscConfig+0xa2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCC_OscConfig+0xa2>
 8003c9c:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8003ca0:	488a      	ldr	r0, [pc, #552]	@ (8003ecc <HAL_RCC_OscConfig+0x2c8>)
 8003ca2:	f7fd f8d1 	bl	8000e48 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cb0:	4b87      	ldr	r3, [pc, #540]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d007      	beq.n	8003ccc <HAL_RCC_OscConfig+0xc8>
 8003cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbe:	2b18      	cmp	r3, #24
 8003cc0:	d111      	bne.n	8003ce6 <HAL_RCC_OscConfig+0xe2>
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0xe2>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	4b80      	ldr	r3, [pc, #512]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d06f      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1b4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d16b      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f000 bd35 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0xfa>
 8003cf0:	4b77      	ldr	r3, [pc, #476]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a76      	ldr	r2, [pc, #472]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	e02e      	b.n	8003d5c <HAL_RCC_OscConfig+0x158>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x11c>
 8003d06:	4b72      	ldr	r3, [pc, #456]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a71      	ldr	r2, [pc, #452]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e01d      	b.n	8003d5c <HAL_RCC_OscConfig+0x158>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x140>
 8003d2a:	4b69      	ldr	r3, [pc, #420]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a68      	ldr	r2, [pc, #416]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b66      	ldr	r3, [pc, #408]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a65      	ldr	r2, [pc, #404]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0x158>
 8003d44:	4b62      	ldr	r3, [pc, #392]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a61      	ldr	r2, [pc, #388]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5e      	ldr	r2, [pc, #376]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d014      	beq.n	8003d8e <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fd fb1c 	bl	80013a0 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d6a:	e009      	b.n	8003d80 <HAL_RCC_OscConfig+0x17c>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd fb18 	bl	80013a0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d902      	bls.n	8003d80 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	f000 bce8 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d80:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ef      	beq.n	8003d6c <HAL_RCC_OscConfig+0x168>
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fb07 	bl	80013a0 <HAL_GetTick>
 8003d92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d94:	e009      	b.n	8003daa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d96:	f7fd fb03 	bl	80013a0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	@ 0x64
 8003da2:	d902      	bls.n	8003daa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	f000 bcd3 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003daa:	4b49      	ldr	r3, [pc, #292]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ef      	bne.n	8003d96 <HAL_RCC_OscConfig+0x192>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x1b6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80f5 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d018      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fe>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d014      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fe>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d010      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fe>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d00c      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fe>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b11      	cmp	r3, #17
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fe>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b19      	cmp	r3, #25
 8003df6:	d004      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fe>
 8003df8:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8003dfc:	4833      	ldr	r0, [pc, #204]	@ (8003ecc <HAL_RCC_OscConfig+0x2c8>)
 8003dfe:	f7fd f823 	bl	8000e48 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e08:	d904      	bls.n	8003e14 <HAL_RCC_OscConfig+0x210>
 8003e0a:	f240 11db 	movw	r1, #475	@ 0x1db
 8003e0e:	482f      	ldr	r0, [pc, #188]	@ (8003ecc <HAL_RCC_OscConfig+0x2c8>)
 8003e10:	f7fd f81a 	bl	8000e48 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e14:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <HAL_RCC_OscConfig+0x236>
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	2b18      	cmp	r3, #24
 8003e2e:	d15c      	bne.n	8003eea <HAL_RCC_OscConfig+0x2e6>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d157      	bne.n	8003eea <HAL_RCC_OscConfig+0x2e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e3a:	4b25      	ldr	r3, [pc, #148]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <HAL_RCC_OscConfig+0x250>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f000 bc7e 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 0219 	bic.w	r2, r3, #25
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	491b      	ldr	r1, [pc, #108]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd fa9b 	bl	80013a0 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e6c:	e009      	b.n	8003e82 <HAL_RCC_OscConfig+0x27e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fd fa97 	bl	80013a0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d902      	bls.n	8003e82 <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	f000 bc67 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e82:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ef      	beq.n	8003e6e <HAL_RCC_OscConfig+0x26a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	f7fd fa93 	bl	80013b8 <HAL_GetREVID>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d81b      	bhi.n	8003ed4 <HAL_RCC_OscConfig+0x2d0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b40      	cmp	r3, #64	@ 0x40
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x2b2>
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003eac:	4a08      	ldr	r2, [pc, #32]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb4:	e07d      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	031b      	lsls	r3, r3, #12
 8003ec4:	4902      	ldr	r1, [pc, #8]	@ (8003ed0 <HAL_RCC_OscConfig+0x2cc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eca:	e072      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
 8003ecc:	0800a690 	.word	0x0800a690
 8003ed0:	58024400 	.word	0x58024400
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b97      	ldr	r3, [pc, #604]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	4994      	ldr	r1, [pc, #592]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee8:	e063      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d046      	beq.n	8003f80 <HAL_RCC_OscConfig+0x37c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ef2:	4b90      	ldr	r3, [pc, #576]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0219 	bic.w	r2, r3, #25
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	498d      	ldr	r1, [pc, #564]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd fa4c 	bl	80013a0 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f0a:	e009      	b.n	8003f20 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fa48 	bl	80013a0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d902      	bls.n	8003f20 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	f000 bc18 	b.w	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f20:	4b84      	ldr	r3, [pc, #528]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ef      	beq.n	8003f0c <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	f7fd fa44 	bl	80013b8 <HAL_GetREVID>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d817      	bhi.n	8003f6a <HAL_RCC_OscConfig+0x366>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	d108      	bne.n	8003f54 <HAL_RCC_OscConfig+0x350>
 8003f42:	4b7c      	ldr	r3, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f50:	6053      	str	r3, [r2, #4]
 8003f52:	e02e      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
 8003f54:	4b77      	ldr	r3, [pc, #476]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	4974      	ldr	r1, [pc, #464]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
 8003f68:	e023      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
 8003f6a:	4b72      	ldr	r3, [pc, #456]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	496e      	ldr	r1, [pc, #440]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
 8003f7e:	e018      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f80:	4b6c      	ldr	r3, [pc, #432]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6b      	ldr	r2, [pc, #428]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fa08 	bl	80013a0 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fd fa04 	bl	80013a0 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e3d4      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80c4 	beq.w	8004148 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_OscConfig+0x3d6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b80      	cmp	r3, #128	@ 0x80
 8003fce:	d004      	beq.n	8003fda <HAL_RCC_OscConfig+0x3d6>
 8003fd0:	f240 212b 	movw	r1, #555	@ 0x22b
 8003fd4:	4858      	ldr	r0, [pc, #352]	@ (8004138 <HAL_RCC_OscConfig+0x534>)
 8003fd6:	f7fc ff37 	bl	8000e48 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fe0:	d904      	bls.n	8003fec <HAL_RCC_OscConfig+0x3e8>
 8003fe2:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8003fe6:	4854      	ldr	r0, [pc, #336]	@ (8004138 <HAL_RCC_OscConfig+0x534>)
 8003fe8:	f7fc ff2e 	bl	8000e48 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fec:	4b51      	ldr	r3, [pc, #324]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ff4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d007      	beq.n	8004012 <HAL_RCC_OscConfig+0x40e>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b18      	cmp	r3, #24
 8004006:	d13a      	bne.n	800407e <HAL_RCC_OscConfig+0x47a>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b01      	cmp	r3, #1
 8004010:	d135      	bne.n	800407e <HAL_RCC_OscConfig+0x47a>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004012:	4b48      	ldr	r3, [pc, #288]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x426>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b80      	cmp	r3, #128	@ 0x80
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e392      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800402a:	f7fd f9c5 	bl	80013b8 <HAL_GetREVID>
 800402e:	4603      	mov	r3, r0
 8004030:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004034:	4293      	cmp	r3, r2
 8004036:	d817      	bhi.n	8004068 <HAL_RCC_OscConfig+0x464>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d108      	bne.n	8004052 <HAL_RCC_OscConfig+0x44e>
 8004040:	4b3c      	ldr	r3, [pc, #240]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004048:	4a3a      	ldr	r2, [pc, #232]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 800404a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800404e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004050:	e07a      	b.n	8004148 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004052:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	069b      	lsls	r3, r3, #26
 8004060:	4934      	ldr	r1, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004066:	e06f      	b.n	8004148 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004068:	4b32      	ldr	r3, [pc, #200]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	492f      	ldr	r1, [pc, #188]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004078:	4313      	orrs	r3, r2
 800407a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800407c:	e064      	b.n	8004148 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d042      	beq.n	800410c <HAL_RCC_OscConfig+0x508>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004086:	4b2b      	ldr	r3, [pc, #172]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 800408c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd f985 	bl	80013a0 <HAL_GetTick>
 8004096:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x4a8>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800409a:	f7fd f981 	bl	80013a0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e351      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ac:	4b21      	ldr	r3, [pc, #132]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040b8:	f7fd f97e 	bl	80013b8 <HAL_GetREVID>
 80040bc:	4603      	mov	r3, r0
 80040be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d817      	bhi.n	80040f6 <HAL_RCC_OscConfig+0x4f2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4dc>
 80040ce:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040d6:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 80040d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040dc:	6053      	str	r3, [r2, #4]
 80040de:	e033      	b.n	8004148 <HAL_RCC_OscConfig+0x544>
 80040e0:	4b14      	ldr	r3, [pc, #80]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	069b      	lsls	r3, r3, #26
 80040ee:	4911      	ldr	r1, [pc, #68]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
 80040f4:	e028      	b.n	8004148 <HAL_RCC_OscConfig+0x544>
 80040f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	061b      	lsls	r3, r3, #24
 8004104:	490b      	ldr	r1, [pc, #44]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004106:	4313      	orrs	r3, r2
 8004108:	60cb      	str	r3, [r1, #12]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800410c:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_RCC_OscConfig+0x530>)
 8004112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd f942 	bl	80013a0 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800411e:	e00d      	b.n	800413c <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004120:	f7fd f93e 	bl	80013a0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d906      	bls.n	800413c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e30e      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400
 8004138:	0800a690 	.word	0x0800a690
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800413c:	4b96      	ldr	r3, [pc, #600]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d043      	beq.n	80041dc <HAL_RCC_OscConfig+0x5d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCC_OscConfig+0x56a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d004      	beq.n	800416e <HAL_RCC_OscConfig+0x56a>
 8004164:	f240 216d 	movw	r1, #621	@ 0x26d
 8004168:	488c      	ldr	r0, [pc, #560]	@ (800439c <HAL_RCC_OscConfig+0x798>)
 800416a:	f7fc fe6d 	bl	8000e48 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d019      	beq.n	80041aa <HAL_RCC_OscConfig+0x5a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b88      	ldr	r3, [pc, #544]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	4a87      	ldr	r2, [pc, #540]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fd f90d 	bl	80013a0 <HAL_GetTick>
 8004186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x598>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418a:	f7fd f909 	bl	80013a0 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e2d9      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800419c:	4b7e      	ldr	r3, [pc, #504]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x586>
 80041a8:	e018      	b.n	80041dc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ae:	4a7a      	ldr	r2, [pc, #488]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fd f8f3 	bl	80013a0 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041be:	f7fd f8ef 	bl	80013a0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e2bf      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041d0:	4b71      	ldr	r3, [pc, #452]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x5ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d043      	beq.n	8004270 <HAL_RCC_OscConfig+0x66c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_OscConfig+0x5fe>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d004      	beq.n	8004202 <HAL_RCC_OscConfig+0x5fe>
 80041f8:	f44f 7126 	mov.w	r1, #664	@ 0x298
 80041fc:	4867      	ldr	r0, [pc, #412]	@ (800439c <HAL_RCC_OscConfig+0x798>)
 80041fe:	f7fc fe23 	bl	8000e48 <assert_failed>

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d019      	beq.n	800423e <HAL_RCC_OscConfig+0x63a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800420a:	4b63      	ldr	r3, [pc, #396]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a62      	ldr	r2, [pc, #392]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004210:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004214:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004216:	f7fd f8c3 	bl	80013a0 <HAL_GetTick>
 800421a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x62c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800421e:	f7fd f8bf 	bl	80013a0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e28f      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004230:	4b59      	ldr	r3, [pc, #356]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x61a>
 800423c:	e018      	b.n	8004270 <HAL_RCC_OscConfig+0x66c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800423e:	4b56      	ldr	r3, [pc, #344]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a55      	ldr	r2, [pc, #340]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004244:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004248:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800424a:	f7fd f8a9 	bl	80013a0 <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x660>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fd f8a5 	bl	80013a0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e275      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004264:	4b4c      	ldr	r3, [pc, #304]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f0      	bne.n	8004252 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8099 	beq.w	80043b0 <HAL_RCC_OscConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x69c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d008      	beq.n	80042a0 <HAL_RCC_OscConfig+0x69c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b05      	cmp	r3, #5
 8004294:	d004      	beq.n	80042a0 <HAL_RCC_OscConfig+0x69c>
 8004296:	f240 21c2 	movw	r1, #706	@ 0x2c2
 800429a:	4840      	ldr	r0, [pc, #256]	@ (800439c <HAL_RCC_OscConfig+0x798>)
 800429c:	f7fc fdd4 	bl	8000e48 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042a0:	4b3f      	ldr	r3, [pc, #252]	@ (80043a0 <HAL_RCC_OscConfig+0x79c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3e      	ldr	r2, [pc, #248]	@ (80043a0 <HAL_RCC_OscConfig+0x79c>)
 80042a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042ac:	f7fd f878 	bl	80013a0 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x6c2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b4:	f7fd f874 	bl	80013a0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	@ 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x6c2>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e244      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	4b36      	ldr	r3, [pc, #216]	@ (80043a0 <HAL_RCC_OscConfig+0x79c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x6b0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d106      	bne.n	80042e8 <HAL_RCC_OscConfig+0x6e4>
 80042da:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	4a2e      	ldr	r2, [pc, #184]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e6:	e02d      	b.n	8004344 <HAL_RCC_OscConfig+0x740>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <HAL_RCC_OscConfig+0x706>
 80042f0:	4b29      	ldr	r3, [pc, #164]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fc:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004300:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004302:	f023 0304 	bic.w	r3, r3, #4
 8004306:	6713      	str	r3, [r2, #112]	@ 0x70
 8004308:	e01c      	b.n	8004344 <HAL_RCC_OscConfig+0x740>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x728>
 8004312:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	4a20      	ldr	r2, [pc, #128]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	6713      	str	r3, [r2, #112]	@ 0x70
 800431e:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004322:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6713      	str	r3, [r2, #112]	@ 0x70
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0x740>
 800432c:	4b1a      	ldr	r3, [pc, #104]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
 8004338:	4b17      	ldr	r3, [pc, #92]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433c:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800433e:	f023 0304 	bic.w	r3, r3, #4
 8004342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCC_OscConfig+0x774>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fd f828 	bl	80013a0 <HAL_GetTick>
 8004350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x766>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fd f824 	bl	80013a0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x766>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1f2      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_RCC_OscConfig+0x794>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0ee      	beq.n	8004354 <HAL_RCC_OscConfig+0x750>
 8004376:	e01b      	b.n	80043b0 <HAL_RCC_OscConfig+0x7ac>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fd f812 	bl	80013a0 <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800437e:	e011      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fd f80e 	bl	80013a0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d908      	bls.n	80043a4 <HAL_RCC_OscConfig+0x7a0>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1dc      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
 800439c:	0800a690 	.word	0x0800a690
 80043a0:	58024800 	.word	0x58024800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043a4:	4b97      	ldr	r3, [pc, #604]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e7      	bne.n	8004380 <HAL_RCC_OscConfig+0x77c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x7ce>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_OscConfig+0x7ce>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d004      	beq.n	80043d2 <HAL_RCC_OscConfig+0x7ce>
 80043c8:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 80043cc:	488e      	ldr	r0, [pc, #568]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 80043ce:	f7fc fd3b 	bl	8000e48 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 81b9 	beq.w	800474e <HAL_RCC_OscConfig+0xb4a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043dc:	4b89      	ldr	r3, [pc, #548]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043e4:	2b18      	cmp	r3, #24
 80043e6:	f000 813f 	beq.w	8004668 <HAL_RCC_OscConfig+0xa64>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	f040 8120 	bne.w	8004634 <HAL_RCC_OscConfig+0xa30>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d010      	beq.n	800441e <HAL_RCC_OscConfig+0x81a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_RCC_OscConfig+0x81a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	2b03      	cmp	r3, #3
 800440a:	d008      	beq.n	800441e <HAL_RCC_OscConfig+0x81a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	2b02      	cmp	r3, #2
 8004412:	d004      	beq.n	800441e <HAL_RCC_OscConfig+0x81a>
 8004414:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8004418:	487b      	ldr	r0, [pc, #492]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 800441a:	f7fc fd15 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <HAL_RCC_OscConfig+0x844>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x844>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b08      	cmp	r3, #8
 8004434:	d008      	beq.n	8004448 <HAL_RCC_OscConfig+0x844>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d004      	beq.n	8004448 <HAL_RCC_OscConfig+0x844>
 800443e:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8004442:	4871      	ldr	r0, [pc, #452]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 8004444:	f7fc fd00 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_OscConfig+0x85e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004454:	2b02      	cmp	r3, #2
 8004456:	d004      	beq.n	8004462 <HAL_RCC_OscConfig+0x85e>
 8004458:	f240 21ff 	movw	r1, #767	@ 0x2ff
 800445c:	486a      	ldr	r0, [pc, #424]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 800445e:	f7fc fcf3 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_RCC_OscConfig+0x86e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004470:	d904      	bls.n	800447c <HAL_RCC_OscConfig+0x878>
 8004472:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004476:	4864      	ldr	r0, [pc, #400]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 8004478:	f7fc fce6 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	2b03      	cmp	r3, #3
 8004482:	d904      	bls.n	800448e <HAL_RCC_OscConfig+0x88a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448c:	d904      	bls.n	8004498 <HAL_RCC_OscConfig+0x894>
 800448e:	f240 3101 	movw	r1, #769	@ 0x301
 8004492:	485d      	ldr	r0, [pc, #372]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 8004494:	f7fc fcd8 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_RCC_OscConfig+0x8a4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	2b80      	cmp	r3, #128	@ 0x80
 80044a6:	d904      	bls.n	80044b2 <HAL_RCC_OscConfig+0x8ae>
 80044a8:	f240 3102 	movw	r1, #770	@ 0x302
 80044ac:	4856      	ldr	r0, [pc, #344]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 80044ae:	f7fc fccb 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_OscConfig+0x8be>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044be:	2b80      	cmp	r3, #128	@ 0x80
 80044c0:	d904      	bls.n	80044cc <HAL_RCC_OscConfig+0x8c8>
 80044c2:	f240 3103 	movw	r1, #771	@ 0x303
 80044c6:	4850      	ldr	r0, [pc, #320]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 80044c8:	f7fc fcbe 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCC_OscConfig+0x8d8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	2b80      	cmp	r3, #128	@ 0x80
 80044da:	d904      	bls.n	80044e6 <HAL_RCC_OscConfig+0x8e2>
 80044dc:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80044e0:	4849      	ldr	r0, [pc, #292]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 80044e2:	f7fc fcb1 	bl	8000e48 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ee:	d304      	bcc.n	80044fa <HAL_RCC_OscConfig+0x8f6>
 80044f0:	f240 3105 	movw	r1, #773	@ 0x305
 80044f4:	4844      	ldr	r0, [pc, #272]	@ (8004608 <HAL_RCC_OscConfig+0xa04>)
 80044f6:	f7fc fca7 	bl	8000e48 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b42      	ldr	r3, [pc, #264]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a41      	ldr	r2, [pc, #260]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 8004500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fc ff4b 	bl	80013a0 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x91c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fc ff47 	bl	80013a0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x91c>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e117      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004520:	4b38      	ldr	r3, [pc, #224]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x90a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	4b35      	ldr	r3, [pc, #212]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 800452e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004530:	4b36      	ldr	r3, [pc, #216]	@ (800460c <HAL_RCC_OscConfig+0xa08>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	430a      	orrs	r2, r1
 8004540:	4930      	ldr	r1, [pc, #192]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 8004542:	4313      	orrs	r3, r2
 8004544:	628b      	str	r3, [r1, #40]	@ 0x28
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	3b01      	subs	r3, #1
 800454c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004554:	3b01      	subs	r3, #1
 8004556:	025b      	lsls	r3, r3, #9
 8004558:	b29b      	uxth	r3, r3
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	3b01      	subs	r3, #1
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456e:	3b01      	subs	r3, #1
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004576:	4923      	ldr	r1, [pc, #140]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 8004578:	4313      	orrs	r3, r2
 800457a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800457c:	4b21      	ldr	r3, [pc, #132]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	4a20      	ldr	r2, [pc, #128]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004588:	4b1e      	ldr	r3, [pc, #120]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 800458a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800458c:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <HAL_RCC_OscConfig+0xa0c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004594:	00d2      	lsls	r2, r2, #3
 8004596:	491b      	ldr	r1, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 8004598:	4313      	orrs	r3, r2
 800459a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800459c:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	f023 020c 	bic.w	r2, r3, #12
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	4916      	ldr	r1, [pc, #88]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045ae:	4b15      	ldr	r3, [pc, #84]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b2:	f023 0202 	bic.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	4912      	ldr	r1, [pc, #72]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045c0:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045e4:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	4a06      	ldr	r2, [pc, #24]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a03      	ldr	r2, [pc, #12]	@ (8004604 <HAL_RCC_OscConfig+0xa00>)
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fc fed0 	bl	80013a0 <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004602:	e010      	b.n	8004626 <HAL_RCC_OscConfig+0xa22>
 8004604:	58024400 	.word	0x58024400
 8004608:	0800a690 	.word	0x0800a690
 800460c:	fffffc0c 	.word	0xfffffc0c
 8004610:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fc fec4 	bl	80013a0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xa22>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e094      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004626:	4b4c      	ldr	r3, [pc, #304]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xa10>
 8004632:	e08c      	b.n	800474e <HAL_RCC_OscConfig+0xb4a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004634:	4b48      	ldr	r3, [pc, #288]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a47      	ldr	r2, [pc, #284]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 800463a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fc feae 	bl	80013a0 <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xa56>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fc feaa 	bl	80013a0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xa56>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e07a      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800465a:	4b3f      	ldr	r3, [pc, #252]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0xa44>
 8004666:	e072      	b.n	800474e <HAL_RCC_OscConfig+0xb4a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004668:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800466e:	4b3a      	ldr	r3, [pc, #232]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	2b01      	cmp	r3, #1
 800467a:	d031      	beq.n	80046e0 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d12a      	bne.n	80046e0 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d122      	bne.n	80046e0 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d11a      	bne.n	80046e0 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	0a5b      	lsrs	r3, r3, #9
 80046ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d111      	bne.n	80046e0 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d108      	bne.n	80046e0 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	0e1b      	lsrs	r3, r3, #24
 80046d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_OscConfig+0xae0>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e035      	b.n	8004750 <HAL_RCC_OscConfig+0xb4c>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	08db      	lsrs	r3, r3, #3
 80046ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d029      	beq.n	800474e <HAL_RCC_OscConfig+0xb4a>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004702:	d304      	bcc.n	800470e <HAL_RCC_OscConfig+0xb0a>
 8004704:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8004708:	4814      	ldr	r0, [pc, #80]	@ (800475c <HAL_RCC_OscConfig+0xb58>)
 800470a:	f7fc fb9d 	bl	8000e48 <assert_failed>
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	4a11      	ldr	r2, [pc, #68]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800471a:	f7fc fe41 	bl	80013a0 <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004720:	bf00      	nop
 8004722:	f7fc fe3d 	bl	80013a0 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	4293      	cmp	r3, r2
 800472c:	d0f9      	beq.n	8004722 <HAL_RCC_OscConfig+0xb1e>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800472e:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <HAL_RCC_OscConfig+0xb5c>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800473a:	00d2      	lsls	r2, r2, #3
 800473c:	4906      	ldr	r1, [pc, #24]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 800473e:	4313      	orrs	r3, r2
 8004740:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004742:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	4a04      	ldr	r2, [pc, #16]	@ (8004758 <HAL_RCC_OscConfig+0xb54>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3730      	adds	r7, #48	@ 0x30
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	58024400 	.word	0x58024400
 800475c:	0800a690 	.word	0x0800a690
 8004760:	ffff0007 	.word	0xffff0007

08004764 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e354      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_RCC_ClockConfig+0x24>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b3f      	cmp	r3, #63	@ 0x3f
 8004786:	d904      	bls.n	8004792 <HAL_RCC_ClockConfig+0x2e>
 8004788:	f240 31a7 	movw	r1, #935	@ 0x3a7
 800478c:	4827      	ldr	r0, [pc, #156]	@ (800482c <HAL_RCC_ClockConfig+0xc8>)
 800478e:	f7fc fb5b 	bl	8000e48 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d031      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d02e      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d02b      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d028      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d025      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d022      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d01f      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b07      	cmp	r3, #7
 80047c0:	d01c      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d019      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d016      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b0a      	cmp	r3, #10
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b0b      	cmp	r3, #11
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d00d      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b0d      	cmp	r3, #13
 80047e4:	d00a      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b0e      	cmp	r3, #14
 80047ea:	d007      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d004      	beq.n	80047fc <HAL_RCC_ClockConfig+0x98>
 80047f2:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 80047f6:	480d      	ldr	r0, [pc, #52]	@ (800482c <HAL_RCC_ClockConfig+0xc8>)
 80047f8:	f7fc fb26 	bl	8000e48 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <HAL_RCC_ClockConfig+0xcc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d914      	bls.n	8004834 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <HAL_RCC_ClockConfig+0xcc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 020f 	bic.w	r2, r3, #15
 8004812:	4907      	ldr	r1, [pc, #28]	@ (8004830 <HAL_RCC_ClockConfig+0xcc>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_RCC_ClockConfig+0xcc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e2fa      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
 800482c:	0800a690 	.word	0x0800a690
 8004830:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d029      	beq.n	8004894 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	4b7e      	ldr	r3, [pc, #504]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800484c:	429a      	cmp	r2, r3
 800484e:	d921      	bls.n	8004894 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d014      	beq.n	8004882 <HAL_RCC_ClockConfig+0x11e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d010      	beq.n	8004882 <HAL_RCC_ClockConfig+0x11e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b50      	cmp	r3, #80	@ 0x50
 8004866:	d00c      	beq.n	8004882 <HAL_RCC_ClockConfig+0x11e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b60      	cmp	r3, #96	@ 0x60
 800486e:	d008      	beq.n	8004882 <HAL_RCC_ClockConfig+0x11e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b70      	cmp	r3, #112	@ 0x70
 8004876:	d004      	beq.n	8004882 <HAL_RCC_ClockConfig+0x11e>
 8004878:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
 800487c:	4871      	ldr	r0, [pc, #452]	@ (8004a44 <HAL_RCC_ClockConfig+0x2e0>)
 800487e:	f7fc fae3 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004882:	4b6f      	ldr	r3, [pc, #444]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	496c      	ldr	r1, [pc, #432]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d029      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d921      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x17e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x17e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	2b50      	cmp	r3, #80	@ 0x50
 80048c6:	d00c      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x17e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	2b60      	cmp	r3, #96	@ 0x60
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x17e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b70      	cmp	r3, #112	@ 0x70
 80048d6:	d004      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x17e>
 80048d8:	f240 31d6 	movw	r1, #982	@ 0x3d6
 80048dc:	4859      	ldr	r0, [pc, #356]	@ (8004a44 <HAL_RCC_ClockConfig+0x2e0>)
 80048de:	f7fc fab3 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048e2:	4b57      	ldr	r3, [pc, #348]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	4954      	ldr	r1, [pc, #336]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d02d      	beq.n	800495c <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699a      	ldr	r2, [r3, #24]
 8004904:	4b4e      	ldr	r3, [pc, #312]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800490c:	429a      	cmp	r2, r3
 800490e:	d925      	bls.n	800495c <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d018      	beq.n	800494a <HAL_RCC_ClockConfig+0x1e6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004920:	d013      	beq.n	800494a <HAL_RCC_ClockConfig+0x1e6>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800492a:	d00e      	beq.n	800494a <HAL_RCC_ClockConfig+0x1e6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004934:	d009      	beq.n	800494a <HAL_RCC_ClockConfig+0x1e6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800493e:	d004      	beq.n	800494a <HAL_RCC_ClockConfig+0x1e6>
 8004940:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8004944:	483f      	ldr	r0, [pc, #252]	@ (8004a44 <HAL_RCC_ClockConfig+0x2e0>)
 8004946:	f7fc fa7f 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800494a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	493a      	ldr	r1, [pc, #232]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d029      	beq.n	80049bc <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004974:	429a      	cmp	r2, r3
 8004976:	d921      	bls.n	80049bc <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d014      	beq.n	80049aa <HAL_RCC_ClockConfig+0x246>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b40      	cmp	r3, #64	@ 0x40
 8004986:	d010      	beq.n	80049aa <HAL_RCC_ClockConfig+0x246>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	2b50      	cmp	r3, #80	@ 0x50
 800498e:	d00c      	beq.n	80049aa <HAL_RCC_ClockConfig+0x246>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	2b60      	cmp	r3, #96	@ 0x60
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x246>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b70      	cmp	r3, #112	@ 0x70
 800499e:	d004      	beq.n	80049aa <HAL_RCC_ClockConfig+0x246>
 80049a0:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 80049a4:	4827      	ldr	r0, [pc, #156]	@ (8004a44 <HAL_RCC_ClockConfig+0x2e0>)
 80049a6:	f7fc fa4f 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049aa:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4922      	ldr	r1, [pc, #136]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03f      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d937      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d024      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	d01c      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b0a      	cmp	r3, #10
 80049f6:	d018      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b0b      	cmp	r3, #11
 80049fe:	d014      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d010      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b0d      	cmp	r3, #13
 8004a0e:	d00c      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b0e      	cmp	r3, #14
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b0f      	cmp	r3, #15
 8004a1e:	d004      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c6>
 8004a20:	f240 410c 	movw	r1, #1036	@ 0x40c
 8004a24:	4807      	ldr	r0, [pc, #28]	@ (8004a44 <HAL_RCC_ClockConfig+0x2e0>)
 8004a26:	f7fc fa0f 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2a:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f023 020f 	bic.w	r2, r3, #15
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	4902      	ldr	r1, [pc, #8]	@ (8004a40 <HAL_RCC_ClockConfig+0x2dc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	618b      	str	r3, [r1, #24]
 8004a3c:	e004      	b.n	8004a48 <HAL_RCC_ClockConfig+0x2e4>
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
 8004a44:	0800a690 	.word	0x0800a690
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 809c 	beq.w	8004b8e <HAL_RCC_ClockConfig+0x42a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a66:	d027      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004a70:	d022      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004a84:	d018      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a8e:	d013      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004a98:	d00e      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004aac:	d004      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x354>
 8004aae:	f240 411c 	movw	r1, #1052	@ 0x41c
 8004ab2:	4863      	ldr	r0, [pc, #396]	@ (8004c40 <HAL_RCC_ClockConfig+0x4dc>)
 8004ab4:	f7fc f9c8 	bl	8000e48 <assert_failed>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d010      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x37e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x37e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x37e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d004      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x37e>
 8004ad8:	f240 411d 	movw	r1, #1053	@ 0x41d
 8004adc:	4858      	ldr	r0, [pc, #352]	@ (8004c40 <HAL_RCC_ClockConfig+0x4dc>)
 8004ade:	f7fc f9b3 	bl	8000e48 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ae2:	4b58      	ldr	r3, [pc, #352]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4955      	ldr	r1, [pc, #340]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x3a8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004afc:	4b51      	ldr	r3, [pc, #324]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d121      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e18a      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d107      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x3c0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b14:	4b4b      	ldr	r3, [pc, #300]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d115      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e17e      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x3d8>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b2c:	4b45      	ldr	r3, [pc, #276]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e172      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b3c:	4b41      	ldr	r3, [pc, #260]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e16a      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f023 0207 	bic.w	r2, r3, #7
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	493a      	ldr	r1, [pc, #232]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fc fc1f 	bl	80013a0 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_ClockConfig+0x418>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b66:	f7fc fc1b 	bl	80013a0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x418>
      {
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e152      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7c:	4b31      	ldr	r3, [pc, #196]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d1eb      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x402>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d039      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	4b29      	ldr	r3, [pc, #164]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d231      	bcs.n	8004c0e <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d024      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d020      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	d01c      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b0a      	cmp	r3, #10
 8004bc8:	d018      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b0b      	cmp	r3, #11
 8004bd0:	d014      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d010      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b0d      	cmp	r3, #13
 8004be0:	d00c      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b0e      	cmp	r3, #14
 8004be8:	d008      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d004      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x498>
 8004bf2:	f240 415e 	movw	r1, #1118	@ 0x45e
 8004bf6:	4812      	ldr	r0, [pc, #72]	@ (8004c40 <HAL_RCC_ClockConfig+0x4dc>)
 8004bf8:	f7fc f926 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f023 020f 	bic.w	r2, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <HAL_RCC_ClockConfig+0x4e0>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c48 <HAL_RCC_ClockConfig+0x4e4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d217      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <HAL_RCC_ClockConfig+0x4e4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 020f 	bic.w	r2, r3, #15
 8004c24:	4908      	ldr	r1, [pc, #32]	@ (8004c48 <HAL_RCC_ClockConfig+0x4e4>)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2c:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <HAL_RCC_ClockConfig+0x4e4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d008      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0f1      	b.n	8004e22 <HAL_RCC_ClockConfig+0x6be>
 8004c3e:	bf00      	nop
 8004c40:	0800a690 	.word	0x0800a690
 8004c44:	58024400 	.word	0x58024400
 8004c48:	52002000 	.word	0x52002000
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d029      	beq.n	8004cac <HAL_RCC_ClockConfig+0x548>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	4b73      	ldr	r3, [pc, #460]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d221      	bcs.n	8004cac <HAL_RCC_ClockConfig+0x548>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d014      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x536>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x536>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b50      	cmp	r3, #80	@ 0x50
 8004c7e:	d00c      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x536>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b60      	cmp	r3, #96	@ 0x60
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x536>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b70      	cmp	r3, #112	@ 0x70
 8004c8e:	d004      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x536>
 8004c90:	f240 417f 	movw	r1, #1151	@ 0x47f
 8004c94:	4866      	ldr	r0, [pc, #408]	@ (8004e30 <HAL_RCC_ClockConfig+0x6cc>)
 8004c96:	f7fc f8d7 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c9a:	4b64      	ldr	r3, [pc, #400]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4961      	ldr	r1, [pc, #388]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d029      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x5a8>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d221      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x5a8>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d014      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x596>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x596>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	2b50      	cmp	r3, #80	@ 0x50
 8004cde:	d00c      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x596>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	2b60      	cmp	r3, #96	@ 0x60
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x596>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	2b70      	cmp	r3, #112	@ 0x70
 8004cee:	d004      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x596>
 8004cf0:	f240 4191 	movw	r1, #1169	@ 0x491
 8004cf4:	484e      	ldr	r0, [pc, #312]	@ (8004e30 <HAL_RCC_ClockConfig+0x6cc>)
 8004cf6:	f7fc f8a7 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	4949      	ldr	r1, [pc, #292]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x610>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d225      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x610>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d018      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x5fe>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d38:	d013      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x5fe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d42:	d00e      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x5fe>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x5fe>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d56:	d004      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x5fe>
 8004d58:	f240 41a3 	movw	r1, #1187	@ 0x4a3
 8004d5c:	4834      	ldr	r0, [pc, #208]	@ (8004e30 <HAL_RCC_ClockConfig+0x6cc>)
 8004d5e:	f7fc f873 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d62:	4b32      	ldr	r3, [pc, #200]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	492f      	ldr	r1, [pc, #188]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d029      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x670>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	4b29      	ldr	r3, [pc, #164]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d221      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x670>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d014      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x65e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	2b40      	cmp	r3, #64	@ 0x40
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x65e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b50      	cmp	r3, #80	@ 0x50
 8004da6:	d00c      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x65e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	2b60      	cmp	r3, #96	@ 0x60
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x65e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2b70      	cmp	r3, #112	@ 0x70
 8004db6:	d004      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x65e>
 8004db8:	f240 41b5 	movw	r1, #1205	@ 0x4b5
 8004dbc:	481c      	ldr	r0, [pc, #112]	@ (8004e30 <HAL_RCC_ClockConfig+0x6cc>)
 8004dbe:	f7fc f843 	bl	8000e48 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4917      	ldr	r1, [pc, #92]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004dd4:	f000 f836 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	4913      	ldr	r1, [pc, #76]	@ (8004e34 <HAL_RCC_ClockConfig+0x6d0>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
 8004df0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_RCC_ClockConfig+0x6c8>)
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <HAL_RCC_ClockConfig+0x6d0>)
 8004dfc:	5cd3      	ldrb	r3, [r2, r3]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
 8004e08:	4a0b      	ldr	r2, [pc, #44]	@ (8004e38 <HAL_RCC_ClockConfig+0x6d4>)
 8004e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e3c <HAL_RCC_ClockConfig+0x6d8>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e12:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_RCC_ClockConfig+0x6dc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fc fa78 	bl	800130c <HAL_InitTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	0800a690 	.word	0x0800a690
 8004e34:	0800a7f0 	.word	0x0800a7f0
 8004e38:	24000004 	.word	0x24000004
 8004e3c:	24000000 	.word	0x24000000
 8004e40:	24000008 	.word	0x24000008

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b089      	sub	sp, #36	@ 0x24
 8004e48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4a:	4bb3      	ldr	r3, [pc, #716]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e52:	2b18      	cmp	r3, #24
 8004e54:	f200 8155 	bhi.w	8005102 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e58:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004ec5 	.word	0x08004ec5
 8004e64:	08005103 	.word	0x08005103
 8004e68:	08005103 	.word	0x08005103
 8004e6c:	08005103 	.word	0x08005103
 8004e70:	08005103 	.word	0x08005103
 8004e74:	08005103 	.word	0x08005103
 8004e78:	08005103 	.word	0x08005103
 8004e7c:	08005103 	.word	0x08005103
 8004e80:	08004eeb 	.word	0x08004eeb
 8004e84:	08005103 	.word	0x08005103
 8004e88:	08005103 	.word	0x08005103
 8004e8c:	08005103 	.word	0x08005103
 8004e90:	08005103 	.word	0x08005103
 8004e94:	08005103 	.word	0x08005103
 8004e98:	08005103 	.word	0x08005103
 8004e9c:	08005103 	.word	0x08005103
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08005103 	.word	0x08005103
 8004ea8:	08005103 	.word	0x08005103
 8004eac:	08005103 	.word	0x08005103
 8004eb0:	08005103 	.word	0x08005103
 8004eb4:	08005103 	.word	0x08005103
 8004eb8:	08005103 	.word	0x08005103
 8004ebc:	08005103 	.word	0x08005103
 8004ec0:	08004ef7 	.word	0x08004ef7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ec4:	4b94      	ldr	r3, [pc, #592]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed0:	4b91      	ldr	r3, [pc, #580]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	08db      	lsrs	r3, r3, #3
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	4a90      	ldr	r2, [pc, #576]	@ (800511c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ee2:	e111      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800511c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee6:	61bb      	str	r3, [r7, #24]
      break;
 8004ee8:	e10e      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004eea:	4b8d      	ldr	r3, [pc, #564]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004eec:	61bb      	str	r3, [r7, #24]
      break;
 8004eee:	e10b      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ef2:	61bb      	str	r3, [r7, #24]
      break;
 8004ef4:	e108      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ef6:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f00:	4b85      	ldr	r3, [pc, #532]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f0c:	4b82      	ldr	r3, [pc, #520]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f16:	4b80      	ldr	r3, [pc, #512]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1a:	08db      	lsrs	r3, r3, #3
 8004f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80e1 	beq.w	80050fc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	f000 8083 	beq.w	8005048 <HAL_RCC_GetSysClockFreq+0x204>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f200 80a1 	bhi.w	800508c <HAL_RCC_GetSysClockFreq+0x248>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x114>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d056      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f56:	e099      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f58:	4b6f      	ldr	r3, [pc, #444]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02d      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f64:	4b6c      	ldr	r3, [pc, #432]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800511c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b62      	ldr	r3, [pc, #392]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fbe:	e087      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800512c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b51      	ldr	r3, [pc, #324]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005002:	e065      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b40      	ldr	r3, [pc, #256]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a02 	vldr	s12, [r7, #8]
 800502a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005046:	e043      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505a:	4b2f      	ldr	r3, [pc, #188]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506a:	ed97 6a02 	vldr	s12, [r7, #8]
 800506e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800508a:	e021      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2ec>
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b1e      	ldr	r3, [pc, #120]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005128 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050d0:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	0a5b      	lsrs	r3, r3, #9
 80050d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050da:	3301      	adds	r3, #1
 80050dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f4:	ee17 3a90 	vmov	r3, s15
 80050f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80050fa:	e005      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
      break;
 8005100:	e002      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005102:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005104:	61bb      	str	r3, [r7, #24]
      break;
 8005106:	bf00      	nop
  }

  return sysclockfreq;
 8005108:	69bb      	ldr	r3, [r7, #24]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3724      	adds	r7, #36	@ 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	03d09000 	.word	0x03d09000
 8005120:	003d0900 	.word	0x003d0900
 8005124:	007a1200 	.word	0x007a1200
 8005128:	46000000 	.word	0x46000000
 800512c:	4c742400 	.word	0x4c742400
 8005130:	4a742400 	.word	0x4a742400
 8005134:	4af42400 	.word	0x4af42400

08005138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800513e:	f7ff fe81 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b10      	ldr	r3, [pc, #64]	@ (8005188 <HAL_RCC_GetHCLKFreq+0x50>)
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490f      	ldr	r1, [pc, #60]	@ (800518c <HAL_RCC_GetHCLKFreq+0x54>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800515c:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <HAL_RCC_GetHCLKFreq+0x50>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	4a09      	ldr	r2, [pc, #36]	@ (800518c <HAL_RCC_GetHCLKFreq+0x54>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a07      	ldr	r2, [pc, #28]	@ (8005190 <HAL_RCC_GetHCLKFreq+0x58>)
 8005174:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005176:	4a07      	ldr	r2, [pc, #28]	@ (8005194 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800517c:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <HAL_RCC_GetHCLKFreq+0x58>)
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	58024400 	.word	0x58024400
 800518c:	0800a7f0 	.word	0x0800a7f0
 8005190:	24000004 	.word	0x24000004
 8005194:	24000000 	.word	0x24000000

08005198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800519c:	f7ff ffcc 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 80051a0:	4602      	mov	r2, r0
 80051a2:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	4904      	ldr	r1, [pc, #16]	@ (80051c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ae:	5ccb      	ldrb	r3, [r1, r3]
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	58024400 	.word	0x58024400
 80051c0:	0800a7f0 	.word	0x0800a7f0

080051c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051c8:	f7ff ffb6 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4904      	ldr	r1, [pc, #16]	@ (80051ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	58024400 	.word	0x58024400
 80051ec:	0800a7f0 	.word	0x0800a7f0

080051f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f4:	b0ca      	sub	sp, #296	@ 0x128
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005214:	2500      	movs	r5, #0
 8005216:	ea54 0305 	orrs.w	r3, r4, r5
 800521a:	d049      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005222:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005226:	d02f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800522c:	d828      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800522e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005232:	d01a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005238:	d822      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800523e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005242:	d007      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005244:	e01c      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005246:	4bb8      	ldr	r3, [pc, #736]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524a:	4ab7      	ldr	r2, [pc, #732]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005252:	e01a      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005258:	3308      	adds	r3, #8
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f002 fe87 	bl	8007f70 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	2102      	movs	r1, #2
 8005272:	4618      	mov	r0, r3
 8005274:	f002 ff9e 	bl	80081b4 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005292:	4ba5      	ldr	r3, [pc, #660]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005296:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a0:	4aa1      	ldr	r2, [pc, #644]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80052a6:	e003      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052bc:	f04f 0900 	mov.w	r9, #0
 80052c0:	ea58 0309 	orrs.w	r3, r8, r9
 80052c4:	d047      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d82a      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052d0:	a201      	add	r2, pc, #4	@ (adr r2, 80052d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052ed 	.word	0x080052ed
 80052dc:	080052fb 	.word	0x080052fb
 80052e0:	08005311 	.word	0x08005311
 80052e4:	0800532f 	.word	0x0800532f
 80052e8:	0800532f 	.word	0x0800532f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b8e      	ldr	r3, [pc, #568]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4a8d      	ldr	r2, [pc, #564]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052f8:	e01a      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	3308      	adds	r3, #8
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f002 fe34 	bl	8007f70 <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800530e:	e00f      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	3328      	adds	r3, #40	@ 0x28
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f002 ff4b 	bl	80081b4 <RCCEx_PLL3_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005324:	e004      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800532e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005338:	4b7b      	ldr	r3, [pc, #492]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533c:	f023 0107 	bic.w	r1, r3, #7
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005346:	4a78      	ldr	r2, [pc, #480]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005348:	430b      	orrs	r3, r1
 800534a:	6513      	str	r3, [r2, #80]	@ 0x50
 800534c:	e003      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	ea5a 030b 	orrs.w	r3, sl, fp
 800536a:	d04c      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005376:	d030      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537c:	d829      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800537e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005380:	d02d      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005382:	2bc0      	cmp	r3, #192	@ 0xc0
 8005384:	d825      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	d018      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800538a:	2b80      	cmp	r3, #128	@ 0x80
 800538c:	d821      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d007      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005396:	e01c      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4b63      	ldr	r3, [pc, #396]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	4a62      	ldr	r2, [pc, #392]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800539e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053a4:	e01c      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053aa:	3308      	adds	r3, #8
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 fdde 	bl	8007f70 <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053ba:	e011      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	3328      	adds	r3, #40	@ 0x28
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f002 fef5 	bl	80081b4 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053d0:	e006      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80053fc:	e003      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005412:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005416:	2300      	movs	r3, #0
 8005418:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800541c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005420:	460b      	mov	r3, r1
 8005422:	4313      	orrs	r3, r2
 8005424:	d053      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800542e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005432:	d035      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005434:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005438:	d82e      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800543a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800543e:	d031      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005440:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005444:	d828      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800544a:	d01a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005450:	d822      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800545a:	d007      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800545c:	e01c      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545e:	4b32      	ldr	r3, [pc, #200]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	4a31      	ldr	r2, [pc, #196]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800546a:	e01c      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005470:	3308      	adds	r3, #8
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f002 fd7b 	bl	8007f70 <RCCEx_PLL2_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005480:	e011      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005486:	3328      	adds	r3, #40	@ 0x28
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f002 fe92 	bl	80081b4 <RCCEx_PLL3_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005496:	e006      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800549e:	e002      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054be:	4a1a      	ldr	r2, [pc, #104]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80054da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054de:	2300      	movs	r3, #0
 80054e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80054e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80054e8:	460b      	mov	r3, r1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	d056      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054fa:	d038      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80054fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005500:	d831      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005502:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005506:	d034      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005508:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800550c:	d82b      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800550e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005512:	d01d      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005518:	d825      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800551e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005524:	e01f      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005526:	bf00      	nop
 8005528:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552c:	4ba2      	ldr	r3, [pc, #648]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	4aa1      	ldr	r2, [pc, #644]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005538:	e01c      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553e:	3308      	adds	r3, #8
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fd14 	bl	8007f70 <RCCEx_PLL2_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800554e:	e011      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005554:	3328      	adds	r3, #40	@ 0x28
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fe2b 	bl	80081b4 <RCCEx_PLL3_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005564:	e006      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800556c:	e002      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800557c:	4b8e      	ldr	r3, [pc, #568]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005588:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800558c:	4a8a      	ldr	r2, [pc, #552]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558e:	430b      	orrs	r3, r1
 8005590:	6593      	str	r3, [r2, #88]	@ 0x58
 8005592:	e003      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d03a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c2:	2b30      	cmp	r3, #48	@ 0x30
 80055c4:	d01f      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055c6:	2b30      	cmp	r3, #48	@ 0x30
 80055c8:	d819      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d00c      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d815      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d019      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d111      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055da:	4b77      	ldr	r3, [pc, #476]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	4a76      	ldr	r2, [pc, #472]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055e6:	e011      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	3308      	adds	r3, #8
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 fcbd 	bl	8007f70 <RCCEx_PLL2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005614:	4b68      	ldr	r3, [pc, #416]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005618:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005622:	4a65      	ldr	r2, [pc, #404]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005624:	430b      	orrs	r3, r1
 8005626:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005628:	e003      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800563e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005648:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d051      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800565c:	d035      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800565e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005662:	d82e      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005664:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005668:	d031      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800566a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800566e:	d828      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005674:	d01a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567a:	d822      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005684:	d007      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005686:	e01c      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005688:	4b4b      	ldr	r3, [pc, #300]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	4a4a      	ldr	r2, [pc, #296]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005694:	e01c      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	3308      	adds	r3, #8
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 fc66 	bl	8007f70 <RCCEx_PLL2_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056aa:	e011      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	3328      	adds	r3, #40	@ 0x28
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 fd7d 	bl	80081b4 <RCCEx_PLL3_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056c0:	e006      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056c8:	e002      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056d8:	4b37      	ldr	r3, [pc, #220]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e6:	4a34      	ldr	r2, [pc, #208]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005702:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800570c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d056      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800571c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005720:	d033      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005722:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005726:	d82c      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800572c:	d02f      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800572e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005732:	d826      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005738:	d02b      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800573a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800573e:	d820      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005744:	d012      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800574a:	d81a      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d022      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005754:	d115      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	3308      	adds	r3, #8
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f002 fc06 	bl	8007f70 <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800576a:	e015      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	3328      	adds	r3, #40	@ 0x28
 8005772:	2101      	movs	r1, #1
 8005774:	4618      	mov	r0, r3
 8005776:	f002 fd1d 	bl	80081b4 <RCCEx_PLL3_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005780:	e00a      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800578a:	bf00      	nop
 800578c:	e004      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800578e:	bf00      	nop
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10d      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ae:	4a02      	ldr	r2, [pc, #8]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80057b4:	e006      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057b6:	bf00      	nop
 80057b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80057d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80057de:	460b      	mov	r3, r1
 80057e0:	4313      	orrs	r3, r2
 80057e2:	d055      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057f0:	d033      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80057f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057f6:	d82c      	bhi.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fc:	d02f      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005802:	d826      	bhi.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005804:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005808:	d02b      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800580a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800580e:	d820      	bhi.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005814:	d012      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800581a:	d81a      	bhi.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d022      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005824:	d115      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	3308      	adds	r3, #8
 800582c:	2101      	movs	r1, #1
 800582e:	4618      	mov	r0, r3
 8005830:	f002 fb9e 	bl	8007f70 <RCCEx_PLL2_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800583a:	e015      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	3328      	adds	r3, #40	@ 0x28
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f002 fcb5 	bl	80081b4 <RCCEx_PLL3_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005850:	e00a      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005858:	e006      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800585a:	bf00      	nop
 800585c:	e004      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800585e:	bf00      	nop
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005870:	4b4e      	ldr	r3, [pc, #312]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005880:	4a4a      	ldr	r2, [pc, #296]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005882:	430b      	orrs	r3, r1
 8005884:	6593      	str	r3, [r2, #88]	@ 0x58
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800588c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800589c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d037      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ba:	d00e      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80058bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c0:	d816      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d018      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80058c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058ca:	d111      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4b37      	ldr	r3, [pc, #220]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4a36      	ldr	r2, [pc, #216]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058d8:	e00f      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3308      	adds	r3, #8
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fb44 	bl	8007f70 <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058ee:	e004      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005902:	4b2a      	ldr	r3, [pc, #168]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005906:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005910:	4a26      	ldr	r2, [pc, #152]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005912:	430b      	orrs	r3, r1
 8005914:	6513      	str	r3, [r2, #80]	@ 0x50
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800592c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005936:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d03b      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005946:	2b03      	cmp	r3, #3
 8005948:	d81c      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800594a:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	0800598d 	.word	0x0800598d
 8005954:	08005961 	.word	0x08005961
 8005958:	0800596f 	.word	0x0800596f
 800595c:	0800598d 	.word	0x0800598d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005960:	4b12      	ldr	r3, [pc, #72]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800596a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800596c:	e00f      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	3308      	adds	r3, #8
 8005974:	2102      	movs	r1, #2
 8005976:	4618      	mov	r0, r3
 8005978:	f002 fafa 	bl	8007f70 <RCCEx_PLL2_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005982:	e004      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800598c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005996:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	f023 0103 	bic.w	r1, r3, #3
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a4:	4a01      	ldr	r2, [pc, #4]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059aa:	e005      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80059ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80059c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f000 82f1 	beq.w	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e6:	f000 81eb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f6:	f000 81e3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a02:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 8005a06:	f000 81db 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a12:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
 8005a16:	f000 81d3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a22:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
 8005a26:	f000 81cb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a32:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
 8005a36:	f000 81c3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a42:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
 8005a46:	f000 81bb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a52:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
 8005a56:	f000 81b3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a62:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
 8005a66:	f000 81ab 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a72:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 8005a76:	f000 81a3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a82:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
 8005a86:	f000 819b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a92:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
 8005a96:	f000 8193 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005aa2:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
 8005aa6:	f000 818b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ab2:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
 8005ab6:	f000 8183 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ac2:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
 8005ac6:	f000 817b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ad2:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
 8005ad6:	f000 8173 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005ae2:	4bbd      	ldr	r3, [pc, #756]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	f000 816b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aee:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005af2:	4bba      	ldr	r3, [pc, #744]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xbec>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	f000 8163 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b02:	4bb7      	ldr	r3, [pc, #732]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f000 815b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b12:	4bb4      	ldr	r3, [pc, #720]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	f000 8153 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b22:	4bb1      	ldr	r3, [pc, #708]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	f000 814b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b32:	4bae      	ldr	r3, [pc, #696]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8005b34:	429a      	cmp	r2, r3
 8005b36:	f000 8143 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b42:	4bab      	ldr	r3, [pc, #684]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xc00>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	f000 813b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b52:	4ba8      	ldr	r3, [pc, #672]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b54:	429a      	cmp	r2, r3
 8005b56:	f000 8133 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b62:	4ba5      	ldr	r3, [pc, #660]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0xc08>)
 8005b64:	429a      	cmp	r2, r3
 8005b66:	f000 812b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b72:	4ba2      	ldr	r3, [pc, #648]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0xc0c>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	f000 8123 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b82:	4b9f      	ldr	r3, [pc, #636]	@ (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	f000 811b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005b92:	4b9c      	ldr	r3, [pc, #624]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xc14>)
 8005b94:	429a      	cmp	r2, r3
 8005b96:	f000 8113 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005ba2:	4b99      	ldr	r3, [pc, #612]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	f000 810b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005bb2:	4b96      	ldr	r3, [pc, #600]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0xc1c>)
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	f000 8103 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005bc2:	4b93      	ldr	r3, [pc, #588]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	f000 80fb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005bd2:	4b90      	ldr	r3, [pc, #576]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc24>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	f000 80f3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005be2:	4b8d      	ldr	r3, [pc, #564]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 8005be4:	429a      	cmp	r2, r3
 8005be6:	f000 80eb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f000 80e3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c02:	4b87      	ldr	r3, [pc, #540]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 8005c04:	429a      	cmp	r2, r3
 8005c06:	f000 80db 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c12:	4b84      	ldr	r3, [pc, #528]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0xc34>)
 8005c14:	429a      	cmp	r2, r3
 8005c16:	f000 80d3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c22:	4b81      	ldr	r3, [pc, #516]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8005c24:	429a      	cmp	r2, r3
 8005c26:	f000 80cb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c32:	4b7e      	ldr	r3, [pc, #504]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	f000 80c3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c42:	4b7b      	ldr	r3, [pc, #492]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f000 80bb 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c52:	4b78      	ldr	r3, [pc, #480]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	f000 80b3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c62:	4b75      	ldr	r3, [pc, #468]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005c64:	429a      	cmp	r2, r3
 8005c66:	f000 80ab 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c72:	4b72      	ldr	r3, [pc, #456]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0xc4c>)
 8005c74:	429a      	cmp	r2, r3
 8005c76:	f000 80a3 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c82:	4b6f      	ldr	r3, [pc, #444]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	f000 809b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005c92:	4b6c      	ldr	r3, [pc, #432]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005c94:	429a      	cmp	r2, r3
 8005c96:	f000 8093 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005ca2:	4b69      	ldr	r3, [pc, #420]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xc58>)
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	f000 808b 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005cb2:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f000 8083 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005cc2:	4b63      	ldr	r3, [pc, #396]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d07b      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ccc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005cd0:	4b60      	ldr	r3, [pc, #384]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d074      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005cde:	4b5e      	ldr	r3, [pc, #376]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d06d      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005cec:	4b5b      	ldr	r3, [pc, #364]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d066      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005cfa:	4b59      	ldr	r3, [pc, #356]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d05f      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d04:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d08:	4b56      	ldr	r3, [pc, #344]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc74>)
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d058      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d16:	4b54      	ldr	r3, [pc, #336]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xc78>)
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d051      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d24:	4b51      	ldr	r3, [pc, #324]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xc7c>)
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d04a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d32:	4b4f      	ldr	r3, [pc, #316]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d043      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d40:	4b4c      	ldr	r3, [pc, #304]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d03c      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d035      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d5c:	4b47      	ldr	r3, [pc, #284]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d02e      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d6a:	4b45      	ldr	r3, [pc, #276]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d027      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d78:	4b42      	ldr	r3, [pc, #264]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xc94>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d020      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d86:	4b40      	ldr	r3, [pc, #256]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d019      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005d94:	4b3d      	ldr	r3, [pc, #244]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d012      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005da2:	4b3b      	ldr	r3, [pc, #236]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d00b      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005db0:	4b38      	ldr	r3, [pc, #224]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xca4>)
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d004      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005db6:	f240 317d 	movw	r1, #893	@ 0x37d
 8005dba:	4837      	ldr	r0, [pc, #220]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xca8>)
 8005dbc:	f7fb f844 	bl	8000e48 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dc0:	4b36      	ldr	r3, [pc, #216]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcac>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcac>)
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dcc:	f7fb fae8 	bl	80013a0 <HAL_GetTick>
 8005dd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd4:	e070      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005dd6:	bf00      	nop
 8005dd8:	00010300 	.word	0x00010300
 8005ddc:	00011300 	.word	0x00011300
 8005de0:	00012300 	.word	0x00012300
 8005de4:	00013300 	.word	0x00013300
 8005de8:	00014300 	.word	0x00014300
 8005dec:	00015300 	.word	0x00015300
 8005df0:	00016300 	.word	0x00016300
 8005df4:	00017300 	.word	0x00017300
 8005df8:	00018300 	.word	0x00018300
 8005dfc:	00019300 	.word	0x00019300
 8005e00:	0001a300 	.word	0x0001a300
 8005e04:	0001b300 	.word	0x0001b300
 8005e08:	0001c300 	.word	0x0001c300
 8005e0c:	0001d300 	.word	0x0001d300
 8005e10:	0001e300 	.word	0x0001e300
 8005e14:	0001f300 	.word	0x0001f300
 8005e18:	00020300 	.word	0x00020300
 8005e1c:	00021300 	.word	0x00021300
 8005e20:	00022300 	.word	0x00022300
 8005e24:	00023300 	.word	0x00023300
 8005e28:	00024300 	.word	0x00024300
 8005e2c:	00025300 	.word	0x00025300
 8005e30:	00026300 	.word	0x00026300
 8005e34:	00027300 	.word	0x00027300
 8005e38:	00028300 	.word	0x00028300
 8005e3c:	00029300 	.word	0x00029300
 8005e40:	0002a300 	.word	0x0002a300
 8005e44:	0002b300 	.word	0x0002b300
 8005e48:	0002c300 	.word	0x0002c300
 8005e4c:	0002d300 	.word	0x0002d300
 8005e50:	0002e300 	.word	0x0002e300
 8005e54:	0002f300 	.word	0x0002f300
 8005e58:	00030300 	.word	0x00030300
 8005e5c:	00031300 	.word	0x00031300
 8005e60:	00032300 	.word	0x00032300
 8005e64:	00033300 	.word	0x00033300
 8005e68:	00034300 	.word	0x00034300
 8005e6c:	00035300 	.word	0x00035300
 8005e70:	00036300 	.word	0x00036300
 8005e74:	00037300 	.word	0x00037300
 8005e78:	00038300 	.word	0x00038300
 8005e7c:	00039300 	.word	0x00039300
 8005e80:	0003a300 	.word	0x0003a300
 8005e84:	0003b300 	.word	0x0003b300
 8005e88:	0003c300 	.word	0x0003c300
 8005e8c:	0003d300 	.word	0x0003d300
 8005e90:	0003e300 	.word	0x0003e300
 8005e94:	0003f300 	.word	0x0003f300
 8005e98:	0800a6c8 	.word	0x0800a6c8
 8005e9c:	58024800 	.word	0x58024800
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea0:	f7fb fa7e 	bl	80013a0 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b64      	cmp	r3, #100	@ 0x64
 8005eae:	d903      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
      {
        ret = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eb8:	4bcf      	ldr	r3, [pc, #828]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1008>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ed      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
    }

    if (ret == HAL_OK)
 8005ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d173      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ecc:	4bcb      	ldr	r3, [pc, #812]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005ece:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ed8:	4053      	eors	r3, r2
 8005eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d015      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ee2:	4bc6      	ldr	r3, [pc, #792]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eee:	4bc3      	ldr	r3, [pc, #780]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	4ac2      	ldr	r2, [pc, #776]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005efa:	4bc0      	ldr	r3, [pc, #768]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efe:	4abf      	ldr	r2, [pc, #764]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f04:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f06:	4abd      	ldr	r2, [pc, #756]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f0c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f1a:	d118      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fb fa40 	bl	80013a0 <HAL_GetTick>
 8005f20:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f24:	e00d      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd52>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fb fa3b 	bl	80013a0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f30:	1ad2      	subs	r2, r2, r3
 8005f32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d903      	bls.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd52>
          {
            ret = HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005f40:	e005      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f42:	4bae      	ldr	r3, [pc, #696]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0eb      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
          }
        }
      }

      if (ret == HAL_OK)
 8005f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d129      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xdba>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f66:	d10e      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8005f68:	4ba4      	ldr	r3, [pc, #656]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f78:	091a      	lsrs	r2, r3, #4
 8005f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1010>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	4a9f      	ldr	r2, [pc, #636]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6113      	str	r3, [r2, #16]
 8005f84:	e005      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8005f86:	4b9d      	ldr	r3, [pc, #628]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	4a9c      	ldr	r2, [pc, #624]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f90:	6113      	str	r3, [r2, #16]
 8005f92:	4b9a      	ldr	r3, [pc, #616]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005f94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa2:	4a96      	ldr	r2, [pc, #600]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa8:	e008      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005fb2:	e003      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f002 0301 	and.w	r3, r2, #1
 8005fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f000 8089 	beq.w	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fe4:	2b28      	cmp	r3, #40	@ 0x28
 8005fe6:	d86b      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
 8005fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	080060c9 	.word	0x080060c9
 8005ff4:	080060c1 	.word	0x080060c1
 8005ff8:	080060c1 	.word	0x080060c1
 8005ffc:	080060c1 	.word	0x080060c1
 8006000:	080060c1 	.word	0x080060c1
 8006004:	080060c1 	.word	0x080060c1
 8006008:	080060c1 	.word	0x080060c1
 800600c:	080060c1 	.word	0x080060c1
 8006010:	08006095 	.word	0x08006095
 8006014:	080060c1 	.word	0x080060c1
 8006018:	080060c1 	.word	0x080060c1
 800601c:	080060c1 	.word	0x080060c1
 8006020:	080060c1 	.word	0x080060c1
 8006024:	080060c1 	.word	0x080060c1
 8006028:	080060c1 	.word	0x080060c1
 800602c:	080060c1 	.word	0x080060c1
 8006030:	080060ab 	.word	0x080060ab
 8006034:	080060c1 	.word	0x080060c1
 8006038:	080060c1 	.word	0x080060c1
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060c1 	.word	0x080060c1
 8006050:	080060c9 	.word	0x080060c9
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060c1 	.word	0x080060c1
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060c9 	.word	0x080060c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	3308      	adds	r3, #8
 800609a:	2101      	movs	r1, #1
 800609c:	4618      	mov	r0, r3
 800609e:	f001 ff67 	bl	8007f70 <RCCEx_PLL2_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060a8:	e00f      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xeda>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	3328      	adds	r3, #40	@ 0x28
 80060b0:	2101      	movs	r1, #1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f002 f87e 	bl	80081b4 <RCCEx_PLL3_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060be:	e004      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xeda>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xeda>
        break;
 80060c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xef8>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060d2:	4b4a      	ldr	r3, [pc, #296]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060e0:	4a46      	ldr	r2, [pc, #280]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80060e6:	e003      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f002 0302 	and.w	r3, r2, #2
 80060fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006106:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d041      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006116:	2b05      	cmp	r3, #5
 8006118:	d824      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xf74>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <HAL_RCCEx_PeriphCLKConfig+0xf30>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	0800616d 	.word	0x0800616d
 8006124:	08006139 	.word	0x08006139
 8006128:	0800614f 	.word	0x0800614f
 800612c:	0800616d 	.word	0x0800616d
 8006130:	0800616d 	.word	0x0800616d
 8006134:	0800616d 	.word	0x0800616d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	3308      	adds	r3, #8
 800613e:	2101      	movs	r1, #1
 8006140:	4618      	mov	r0, r3
 8006142:	f001 ff15 	bl	8007f70 <RCCEx_PLL2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800614c:	e00f      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xf7e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006152:	3328      	adds	r3, #40	@ 0x28
 8006154:	2101      	movs	r1, #1
 8006156:	4618      	mov	r0, r3
 8006158:	f002 f82c 	bl	80081b4 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006162:	e004      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xf7e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xf7e>
        break;
 800616c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006176:	4b21      	ldr	r3, [pc, #132]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8006178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617a:	f023 0107 	bic.w	r1, r3, #7
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006184:	4a1d      	ldr	r2, [pc, #116]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8006186:	430b      	orrs	r3, r1
 8006188:	6553      	str	r3, [r2, #84]	@ 0x54
 800618a:	e003      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f002 0304 	and.w	r3, r2, #4
 80061a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d04b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x105c>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061bc:	2b05      	cmp	r3, #5
 80061be:	d82c      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	08006223 	.word	0x08006223
 80061cc:	080061e1 	.word	0x080061e1
 80061d0:	08006205 	.word	0x08006205
 80061d4:	08006223 	.word	0x08006223
 80061d8:	08006223 	.word	0x08006223
 80061dc:	08006223 	.word	0x08006223
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	3308      	adds	r3, #8
 80061e6:	2101      	movs	r1, #1
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fec1 	bl	8007f70 <RCCEx_PLL2_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061f4:	e016      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1034>
 80061f6:	bf00      	nop
 80061f8:	58024800 	.word	0x58024800
 80061fc:	58024400 	.word	0x58024400
 8006200:	00ffffcf 	.word	0x00ffffcf

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	3328      	adds	r3, #40	@ 0x28
 800620a:	2101      	movs	r1, #1
 800620c:	4618      	mov	r0, r3
 800620e:	f001 ffd1 	bl	80081b4 <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006218:	e004      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1034>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1034>
        break;
 8006222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1054>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800622c:	4b9e      	ldr	r3, [pc, #632]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006230:	f023 0107 	bic.w	r1, r3, #7
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800623c:	4a9a      	ldr	r2, [pc, #616]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 800623e:	430b      	orrs	r3, r1
 8006240:	6593      	str	r3, [r2, #88]	@ 0x58
 8006242:	e003      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x105c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f002 0320 	and.w	r3, r2, #32
 8006258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006262:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d055      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1128>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x10f2>
 800627a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800627e:	d82c      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006284:	d02f      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628a:	d826      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 800628c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006290:	d02b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x10fa>
 8006292:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006296:	d820      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 8006298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800629c:	d012      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 800629e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a2:	d81a      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x10fe>
 80062a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ac:	d115      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x10ea>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b2:	3308      	adds	r3, #8
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fe5a 	bl	8007f70 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80062c2:	e015      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1100>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	3328      	adds	r3, #40	@ 0x28
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 ff71 	bl	80081b4 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80062d8:	e00a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 80062e2:	bf00      	nop
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1120>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062f8:	4b6b      	ldr	r3, [pc, #428]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	4a67      	ldr	r2, [pc, #412]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6553      	str	r3, [r2, #84]	@ 0x54
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800632e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d055      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x11f4>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006340:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006344:	d033      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8006346:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800634a:	d82c      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006350:	d02f      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006356:	d826      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8006358:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800635c:	d02b      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
 800635e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006362:	d820      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8006364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006368:	d012      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800636e:	d81a      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d022      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x11ca>
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006378:	d115      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x11b6>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	3308      	adds	r3, #8
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 fdf4 	bl	8007f70 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800638e:	e015      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11cc>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	3328      	adds	r3, #40	@ 0x28
 8006396:	2102      	movs	r1, #2
 8006398:	4618      	mov	r0, r3
 800639a:	f001 ff0b 	bl	80081b4 <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063a4:	e00a      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80063ae:	bf00      	nop
 80063b0:	e004      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 80063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063c4:	4b38      	ldr	r3, [pc, #224]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c8:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063d4:	4a34      	ldr	r2, [pc, #208]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x11f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	d057      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800640c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006410:	d033      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x128a>
 8006412:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006416:	d82c      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8006418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800641c:	d02f      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x128e>
 800641e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006422:	d826      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8006424:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006428:	d02b      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x1292>
 800642a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800642e:	d820      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8006430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006434:	d012      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x126c>
 8006436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643a:	d81a      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1282>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d022      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1296>
 8006440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006444:	d115      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1282>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644a:	3308      	adds	r3, #8
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fd8e 	bl	8007f70 <RCCEx_PLL2_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800645a:	e015      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1298>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	3328      	adds	r3, #40	@ 0x28
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f001 fea5 	bl	80081b4 <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006470:	e00a      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006478:	e006      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 800647a:	bf00      	nop
 800647c:	e004      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 800647e:	bf00      	nop
 8006480:	e002      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8006486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x12bc>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8006492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006494:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064a0:	4a01      	ldr	r2, [pc, #4]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80064a6:	e005      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
 80064a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f002 0308 	and.w	r3, r2, #8
 80064c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	d03e      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x1362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e0:	d018      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1324>
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ee:	d011      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1324>
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1324>
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006504:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006508:	d004      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1324>
 800650a:	f240 510d 	movw	r1, #1293	@ 0x50d
 800650e:	48ab      	ldr	r0, [pc, #684]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8006510:	f7fa fc9a 	bl	8000e48 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d10c      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x134c>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006526:	3328      	adds	r3, #40	@ 0x28
 8006528:	2102      	movs	r1, #2
 800652a:	4618      	mov	r0, r3
 800652c:	f001 fe42 	bl	80081b4 <RCCEx_PLL3_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x134c>
      {
        status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800653c:	4ba0      	ldr	r3, [pc, #640]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 800653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006540:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654c:	4a9c      	ldr	r2, [pc, #624]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 800654e:	430b      	orrs	r3, r1
 8006550:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f002 0310 	and.w	r3, r2, #16
 800655e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006562:	2300      	movs	r3, #0
 8006564:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006568:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d03e      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800657a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800657e:	d018      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800658c:	d011      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00b      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 80065a8:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80065ac:	4883      	ldr	r0, [pc, #524]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 80065ae:	f7fa fc4b 	bl	8000e48 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065be:	d10c      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13ea>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	3328      	adds	r3, #40	@ 0x28
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fdf3 	bl	80081b4 <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13ea>
      {
        status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065da:	4b79      	ldr	r3, [pc, #484]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ea:	4a75      	ldr	r2, [pc, #468]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006600:	2300      	movs	r3, #0
 8006602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006606:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d03e      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x149e>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800661c:	d022      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1474>
 800661e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006622:	d81b      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x146c>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1440>
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662c:	d00b      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1456>
 800662e:	e015      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x146c>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	3308      	adds	r3, #8
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fc99 	bl	8007f70 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006644:	e00f      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1476>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664a:	3328      	adds	r3, #40	@ 0x28
 800664c:	2102      	movs	r1, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f001 fdb0 	bl	80081b4 <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1476>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1476>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1496>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800666e:	4b54      	ldr	r3, [pc, #336]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006672:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800667e:	4a50      	ldr	r2, [pc, #320]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006680:	430b      	orrs	r3, r1
 8006682:	6593      	str	r3, [r2, #88]	@ 0x58
 8006684:	e003      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800669a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800669c:	2300      	movs	r3, #0
 800669e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1532>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066b6:	d01f      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1508>
 80066b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066bc:	d818      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1500>
 80066be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x14dc>
 80066c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c8:	d007      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x14ea>
 80066ca:	e011      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066cc:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	4a3b      	ldr	r2, [pc, #236]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066d8:	e00f      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x150a>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066de:	3328      	adds	r3, #40	@ 0x28
 80066e0:	2101      	movs	r1, #1
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 fd66 	bl	80081b4 <RCCEx_PLL3_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066ee:	e004      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x150a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x150a>
        break;
 80066f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x152a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006702:	4b2f      	ldr	r3, [pc, #188]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006714:	430b      	orrs	r3, r1
 8006716:	6553      	str	r3, [r2, #84]	@ 0x54
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800672e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006730:	2300      	movs	r3, #0
 8006732:	677b      	str	r3, [r7, #116]	@ 0x74
 8006734:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d046      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x156e>
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006752:	d004      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x156e>
 8006754:	f240 5186 	movw	r1, #1414	@ 0x586
 8006758:	4818      	ldr	r0, [pc, #96]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 800675a:	f7fa fb75 	bl	8000e48 <assert_failed>

    switch (PeriphClkInit->SdmmcClockSelection)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1580>
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676c:	d007      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x158e>
 800676e:	e011      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x15a4>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006770:	4b13      	ldr	r3, [pc, #76]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	4a12      	ldr	r2, [pc, #72]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800677a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800677c:	e00e      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x15ac>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	3308      	adds	r3, #8
 8006784:	2102      	movs	r1, #2
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fbf2 	bl	8007f70 <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006792:	e003      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x15ac>

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800679a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800679c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10f      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80067a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b2:	4a03      	ldr	r2, [pc, #12]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80067b4:	430b      	orrs	r3, r1
 80067b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 80067ba:	bf00      	nop
 80067bc:	0800a6c8 	.word	0x0800a6c8
 80067c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80067d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067da:	2300      	movs	r3, #0
 80067dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80067e2:	460b      	mov	r3, r1
 80067e4:	4313      	orrs	r3, r2
 80067e6:	d00c      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1612>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	3328      	adds	r3, #40	@ 0x28
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fcdf 	bl	80081b4 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1612>
    {
      status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800680e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006810:	2300      	movs	r3, #0
 8006812:	667b      	str	r3, [r7, #100]	@ 0x64
 8006814:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d03a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x16a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800682a:	d018      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x166e>
 800682c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006830:	d811      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1666>
 8006832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006836:	d014      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1672>
 8006838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800683c:	d80b      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1666>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d011      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1676>
 8006842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006846:	d106      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006848:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	4a0e      	ldr	r2, [pc, #56]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 800684e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006854:	e008      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800685c:	e004      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 8006866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10d      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x169c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006870:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8006872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006874:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006880:	4a01      	ldr	r2, [pc, #4]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6553      	str	r3, [r2, #84]	@ 0x54
 8006886:	e005      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x16a4>
 8006888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80068a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068a2:	2300      	movs	r3, #0
 80068a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d019      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x16f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068c4:	d004      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80068c6:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 80068ca:	48b8      	ldr	r0, [pc, #736]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 80068cc:	f7fa fabc 	bl	8000e48 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068d0:	4bb7      	ldr	r3, [pc, #732]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80068d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	4ab4      	ldr	r2, [pc, #720]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f2:	2300      	movs	r3, #0
 80068f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80068f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d01c      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x174a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x1734>
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006918:	d004      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x1734>
 800691a:	f240 51ef 	movw	r1, #1519	@ 0x5ef
 800691e:	48a3      	ldr	r0, [pc, #652]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006920:	f7fa fa92 	bl	8000e48 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006924:	4ba2      	ldr	r3, [pc, #648]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006930:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006934:	4a9e      	ldr	r2, [pc, #632]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006936:	430b      	orrs	r3, r1
 8006938:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006948:	2300      	movs	r3, #0
 800694a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006950:	460b      	mov	r3, r1
 8006952:	4313      	orrs	r3, r2
 8006954:	d019      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x179a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1786>
 8006960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800696a:	d004      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1786>
 800696c:	f240 51f9 	movw	r1, #1529	@ 0x5f9
 8006970:	488e      	ldr	r0, [pc, #568]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006972:	f7fa fa69 	bl	8000e48 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006976:	4b8e      	ldr	r3, [pc, #568]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006984:	4a8a      	ldr	r2, [pc, #552]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006986:	430b      	orrs	r3, r1
 8006988:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006996:	643b      	str	r3, [r7, #64]	@ 0x40
 8006998:	2300      	movs	r3, #0
 800699a:	647b      	str	r3, [r7, #68]	@ 0x44
 800699c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d020      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x17da>
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069be:	d004      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x17da>
 80069c0:	f240 610f 	movw	r1, #1551	@ 0x60f
 80069c4:	4879      	ldr	r0, [pc, #484]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 80069c6:	f7fa fa3f 	bl	8000e48 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ca:	4b79      	ldr	r3, [pc, #484]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	4a78      	ldr	r2, [pc, #480]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80069d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069d4:	6113      	str	r3, [r2, #16]
 80069d6:	4b76      	ldr	r3, [pc, #472]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80069d8:	6919      	ldr	r1, [r3, #16]
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069e2:	4a73      	ldr	r2, [pc, #460]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80069f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f6:	2300      	movs	r3, #0
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80069fe:	460b      	mov	r3, r1
 8006a00:	4313      	orrs	r3, r2
 8006a02:	d01f      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1854>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a24:	d004      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 8006a26:	f240 6119 	movw	r1, #1561	@ 0x619
 8006a2a:	4860      	ldr	r0, [pc, #384]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006a2c:	f7fa fa0c 	bl	8000e48 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a30:	4b5f      	ldr	r3, [pc, #380]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a34:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006a40:	430b      	orrs	r3, r1
 8006a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a52:	2300      	movs	r3, #0
 8006a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	d023      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x18b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d012      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a78:	d00b      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a86:	d004      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 8006a88:	f240 6123 	movw	r1, #1571	@ 0x623
 8006a8c:	4847      	ldr	r0, [pc, #284]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006a8e:	f7fa f9db 	bl	8000e48 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a92:	4b47      	ldr	r3, [pc, #284]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a96:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aa2:	4a43      	ldr	r2, [pc, #268]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d011      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x18f8>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	3308      	adds	r3, #8
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fa4f 	bl	8007f70 <RCCEx_PLL2_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x18f8>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	2100      	movs	r1, #0
 8006af2:	6239      	str	r1, [r7, #32]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d011      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1938>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	3308      	adds	r3, #8
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fa2f 	bl	8007f70 <RCCEx_PLL2_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1938>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	2100      	movs	r1, #0
 8006b32:	61b9      	str	r1, [r7, #24]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d011      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1978>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	3308      	adds	r3, #8
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 fa0f 	bl	8007f70 <RCCEx_PLL2_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1978>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	2100      	movs	r1, #0
 8006b72:	6139      	str	r1, [r7, #16]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d017      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c4>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	3328      	adds	r3, #40	@ 0x28
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fb11 	bl	80081b4 <RCCEx_PLL3_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c4>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ba8:	e004      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c4>
 8006baa:	bf00      	nop
 8006bac:	0800a6c8 	.word	0x0800a6c8
 8006bb0:	58024400 	.word	0x58024400
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d011      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a04>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd4:	3328      	adds	r3, #40	@ 0x28
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 faeb 	bl	80081b4 <RCCEx_PLL3_Config>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a04>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6039      	str	r1, [r7, #0]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	d011      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1a44>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	3328      	adds	r3, #40	@ 0x28
 8006c16:	2102      	movs	r1, #2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 facb 	bl	80081b4 <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1a44>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006c34:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
  {
    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1a52>
  }
  return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c4e:	bf00      	nop

08006c50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b090      	sub	sp, #64	@ 0x40
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006c62:	430b      	orrs	r3, r1
 8006c64:	f040 8094 	bne.w	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006c68:	4b9e      	ldr	r3, [pc, #632]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	f200 8087 	bhi.w	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006c95 	.word	0x08006c95
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006ce5 	.word	0x08006ce5
 8006c8c:	08006d81 	.word	0x08006d81
 8006c90:	08006d0d 	.word	0x08006d0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c94:	4b93      	ldr	r3, [pc, #588]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ca0:	d108      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 f810 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cb0:	f000 bd45 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb8:	f000 bd41 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cbc:	4b89      	ldr	r3, [pc, #548]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cc8:	d108      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cca:	f107 0318 	add.w	r3, r7, #24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fd54 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd8:	f000 bd31 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce0:	f000 bd2d 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cf0:	d108      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fe94 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d00:	f000 bd1d 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d08:	f000 bd19 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d0c:	4b75      	ldr	r3, [pc, #468]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d16:	4b73      	ldr	r3, [pc, #460]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d10c      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d109      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d28:	4b6e      	ldr	r3, [pc, #440]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	4a6d      	ldr	r2, [pc, #436]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d3a:	e01f      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d3c:	4b69      	ldr	r3, [pc, #420]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d48:	d106      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d50:	d102      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d52:	4b66      	ldr	r3, [pc, #408]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d56:	e011      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d58:	4b62      	ldr	r3, [pc, #392]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d64:	d106      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d6e:	4b60      	ldr	r3, [pc, #384]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d72:	e003      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d78:	f000 bce1 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d7c:	f000 bcdf 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d80:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d84:	f000 bcdb 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d8c:	f000 bcd7 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	f040 80ad 	bne.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006d9e:	4b51      	ldr	r3, [pc, #324]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006da6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dae:	d056      	beq.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db6:	f200 8090 	bhi.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dbe:	f000 8088 	beq.w	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dc6:	f200 8088 	bhi.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2b80      	cmp	r3, #128	@ 0x80
 8006dce:	d032      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	2b80      	cmp	r3, #128	@ 0x80
 8006dd4:	f200 8081 	bhi.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	2b40      	cmp	r3, #64	@ 0x40
 8006de2:	d014      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006de4:	e079      	b.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006de6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006df2:	d108      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 ff67 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e02:	f000 bc9c 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0a:	f000 bc98 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e0e:	4b35      	ldr	r3, [pc, #212]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e1a:	d108      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1c:	f107 0318 	add.w	r3, r7, #24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fcab 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e2a:	f000 bc88 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e32:	f000 bc84 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e36:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e42:	d108      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fdeb 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e52:	f000 bc74 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5a:	f000 bc70 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e5e:	4b21      	ldr	r3, [pc, #132]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e68:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d10c      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	08db      	lsrs	r3, r3, #3
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	4a18      	ldr	r2, [pc, #96]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e86:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8c:	e01f      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9a:	d106      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea2:	d102      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea8:	e011      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb6:	d106      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006eca:	f000 bc38 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ece:	f000 bc36 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ed2:	4b08      	ldr	r3, [pc, #32]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed6:	f000 bc32 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ede:	f000 bc2e 	b.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ee2:	bf00      	nop
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	03d09000 	.word	0x03d09000
 8006eec:	003d0900 	.word	0x003d0900
 8006ef0:	007a1200 	.word	0x007a1200
 8006ef4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006efc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006f00:	430b      	orrs	r3, r1
 8006f02:	f040 809c 	bne.w	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006f06:	4b9e      	ldr	r3, [pc, #632]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006f0e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f16:	d054      	beq.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f1e:	f200 808b 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f28:	f000 8083 	beq.w	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f32:	f200 8081 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f3c:	d02f      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f44:	d878      	bhi.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f52:	d012      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006f54:	e070      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f56:	4b8a      	ldr	r3, [pc, #552]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f62:	d107      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 feaf 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f72:	e3e4      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f78:	e3e1      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f7a:	4b81      	ldr	r3, [pc, #516]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f86:	d107      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f88:	f107 0318 	add.w	r3, r7, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fbf5 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f96:	e3d2      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9c:	e3cf      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f9e:	4b78      	ldr	r3, [pc, #480]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006faa:	d107      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fac:	f107 030c 	add.w	r3, r7, #12
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fd37 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fba:	e3c0      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc0:	e3bd      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d10c      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fde:	4b68      	ldr	r3, [pc, #416]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	08db      	lsrs	r3, r3, #3
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	4a66      	ldr	r2, [pc, #408]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006fea:	fa22 f303 	lsr.w	r3, r2, r3
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff0:	e01e      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ff2:	4b63      	ldr	r3, [pc, #396]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffe:	d106      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007006:	d102      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007008:	4b5f      	ldr	r3, [pc, #380]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800700c:	e010      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800700e:	4b5c      	ldr	r3, [pc, #368]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800701a:	d106      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800701c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007022:	d102      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007024:	4b59      	ldr	r3, [pc, #356]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007028:	e002      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800702e:	e386      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007030:	e385      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007032:	4b57      	ldr	r3, [pc, #348]	@ (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007036:	e382      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	e37f      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800703e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007042:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007046:	430b      	orrs	r3, r1
 8007048:	f040 80a7 	bne.w	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800704c:	4b4c      	ldr	r3, [pc, #304]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007054:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800705c:	d055      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007064:	f200 8096 	bhi.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800706e:	f000 8084 	beq.w	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007078:	f200 808c 	bhi.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007082:	d030      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800708a:	f200 8083 	bhi.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800709a:	d012      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800709c:	e07a      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800709e:	4b38      	ldr	r3, [pc, #224]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070aa:	d107      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fe0b 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ba:	e340      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c0:	e33d      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ce:	d107      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d0:	f107 0318 	add.w	r3, r7, #24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fb51 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070de:	e32e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e4:	e32b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070e6:	4b26      	ldr	r3, [pc, #152]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070f2:	d107      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fc93 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007102:	e31c      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007108:	e319      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800710a:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800710c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007114:	4b1a      	ldr	r3, [pc, #104]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b04      	cmp	r3, #4
 800711e:	d10c      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007126:	4b16      	ldr	r3, [pc, #88]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	08db      	lsrs	r3, r3, #3
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	4a14      	ldr	r2, [pc, #80]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007138:	e01e      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800713a:	4b11      	ldr	r3, [pc, #68]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007146:	d106      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800714e:	d102      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007150:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007154:	e010      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007162:	d106      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716a:	d102      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800716c:	4b07      	ldr	r3, [pc, #28]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007176:	e2e2      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007178:	e2e1      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800717a:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800717c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717e:	e2de      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007180:	58024400 	.word	0x58024400
 8007184:	03d09000 	.word	0x03d09000
 8007188:	003d0900 	.word	0x003d0900
 800718c:	007a1200 	.word	0x007a1200
 8007190:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007198:	e2d1      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800719a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800719e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80071a2:	430b      	orrs	r3, r1
 80071a4:	f040 809c 	bne.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80071a8:	4b93      	ldr	r3, [pc, #588]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b8:	d054      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80071ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071c0:	f200 808b 	bhi.w	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ca:	f000 8083 	beq.w	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071d4:	f200 8081 	bhi.w	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071de:	d02f      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e6:	d878      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f4:	d012      	beq.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80071f6:	e070      	b.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071f8:	4b7f      	ldr	r3, [pc, #508]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007204:	d107      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fd5e 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007214:	e293      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800721a:	e290      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800721c:	4b76      	ldr	r3, [pc, #472]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007228:	d107      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722a:	f107 0318 	add.w	r3, r7, #24
 800722e:	4618      	mov	r0, r3
 8007230:	f000 faa4 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007238:	e281      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723e:	e27e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007240:	4b6d      	ldr	r3, [pc, #436]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800724c:	d107      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724e:	f107 030c 	add.w	r3, r7, #12
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fbe6 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725c:	e26f      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007262:	e26c      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007264:	4b64      	ldr	r3, [pc, #400]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800726e:	4b62      	ldr	r3, [pc, #392]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b04      	cmp	r3, #4
 8007278:	d10c      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800727a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007280:	4b5d      	ldr	r3, [pc, #372]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	08db      	lsrs	r3, r3, #3
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	4a5c      	ldr	r2, [pc, #368]	@ (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007292:	e01e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007294:	4b58      	ldr	r3, [pc, #352]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80072a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072aa:	4b55      	ldr	r3, [pc, #340]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ae:	e010      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072b0:	4b51      	ldr	r3, [pc, #324]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072bc:	d106      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80072be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c4:	d102      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ca:	e002      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072d0:	e235      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072d2:	e234      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80072d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d8:	e231      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072de:	e22e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80072e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80072e8:	430b      	orrs	r3, r1
 80072ea:	f040 808f 	bne.w	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80072ee:	4b42      	ldr	r3, [pc, #264]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80072f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072fe:	d06b      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007306:	d874      	bhi.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800730e:	d056      	beq.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007316:	d86c      	bhi.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800731e:	d03b      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007326:	d864      	bhi.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800732e:	d021      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007336:	d85c      	bhi.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007344:	d004      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007346:	e054      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007348:	f7fd ff26 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 800734c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800734e:	e1f6      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007350:	4b29      	ldr	r3, [pc, #164]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800735c:	d107      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800735e:	f107 0318 	add.w	r3, r7, #24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fa0a 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800736c:	e1e7      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007372:	e1e4      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007374:	4b20      	ldr	r3, [pc, #128]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007382:	f107 030c 	add.w	r3, r7, #12
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fb4c 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007390:	e1d5      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007396:	e1d2      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007398:	4b17      	ldr	r3, [pc, #92]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a4:	4b14      	ldr	r3, [pc, #80]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	08db      	lsrs	r3, r3, #3
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	4a13      	ldr	r2, [pc, #76]	@ (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
 80073b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b6:	e1c2      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073bc:	e1bf      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073be:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ca:	d102      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80073cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073d0:	e1b5      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d6:	e1b2      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073d8:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073e4:	d102      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80073e6:	4b07      	ldr	r3, [pc, #28]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ea:	e1a8      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f0:	e1a5      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f6:	e1a2      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073f8:	58024400 	.word	0x58024400
 80073fc:	03d09000 	.word	0x03d09000
 8007400:	003d0900 	.word	0x003d0900
 8007404:	007a1200 	.word	0x007a1200
 8007408:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800740c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007410:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007414:	430b      	orrs	r3, r1
 8007416:	d173      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007418:	4b9c      	ldr	r3, [pc, #624]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800741a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007420:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007428:	d02f      	beq.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007430:	d863      	bhi.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743e:	d012      	beq.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007440:	e05b      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007442:	4b92      	ldr	r3, [pc, #584]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800744a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800744e:	d107      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007450:	f107 0318 	add.w	r3, r7, #24
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f991 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800745e:	e16e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007464:	e16b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007466:	4b89      	ldr	r3, [pc, #548]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800746e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007472:	d107      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007474:	f107 030c 	add.w	r3, r7, #12
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fad3 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007482:	e15c      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007488:	e159      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800748a:	4b80      	ldr	r3, [pc, #512]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007494:	4b7d      	ldr	r3, [pc, #500]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b04      	cmp	r3, #4
 800749e:	d10c      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80074a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074a6:	4b79      	ldr	r3, [pc, #484]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	08db      	lsrs	r3, r3, #3
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	4a77      	ldr	r2, [pc, #476]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80074b2:	fa22 f303 	lsr.w	r3, r2, r3
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074b8:	e01e      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ba:	4b74      	ldr	r3, [pc, #464]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c6:	d106      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ce:	d102      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074d0:	4b70      	ldr	r3, [pc, #448]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d4:	e010      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074d6:	4b6d      	ldr	r3, [pc, #436]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e2:	d106      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80074e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ea:	d102      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074ec:	4b6a      	ldr	r3, [pc, #424]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80074ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f0:	e002      	b.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074f6:	e122      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074f8:	e121      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074fe:	e11e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007504:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007508:	430b      	orrs	r3, r1
 800750a:	d133      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800750c:	4b5f      	ldr	r3, [pc, #380]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800750e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007514:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007522:	d012      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007524:	e023      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007526:	4b59      	ldr	r3, [pc, #356]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007532:	d107      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fbc7 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007542:	e0fc      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007548:	e0f9      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800754a:	4b50      	ldr	r3, [pc, #320]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007552:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007556:	d107      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007558:	f107 0318 	add.w	r3, r7, #24
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f90d 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007566:	e0ea      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756c:	e0e7      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007572:	e0e4      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007578:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800757c:	430b      	orrs	r3, r1
 800757e:	f040 808d 	bne.w	800769c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007582:	4b42      	ldr	r3, [pc, #264]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007586:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800758a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007592:	d06b      	beq.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800759a:	d874      	bhi.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a2:	d056      	beq.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075aa:	d86c      	bhi.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075b2:	d03b      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075ba:	d864      	bhi.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c2:	d021      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ca:	d85c      	bhi.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075d8:	d004      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80075da:	e054      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80075dc:	f000 f8b8 	bl	8007750 <HAL_RCCEx_GetD3PCLK1Freq>
 80075e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075e2:	e0ac      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075e4:	4b29      	ldr	r3, [pc, #164]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f0:	d107      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f2:	f107 0318 	add.w	r3, r7, #24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f8c0 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007600:	e09d      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007606:	e09a      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007608:	4b20      	ldr	r3, [pc, #128]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007614:	d107      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fa02 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007624:	e08b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800762a:	e088      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800762c:	4b17      	ldr	r3, [pc, #92]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b04      	cmp	r3, #4
 8007636:	d109      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007638:	4b14      	ldr	r3, [pc, #80]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	08db      	lsrs	r3, r3, #3
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	4a13      	ldr	r2, [pc, #76]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800764a:	e078      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007650:	e075      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007652:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765e:	d102      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007660:	4b0c      	ldr	r3, [pc, #48]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007664:	e06b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766a:	e068      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800766c:	4b07      	ldr	r3, [pc, #28]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007678:	d102      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800767a:	4b07      	ldr	r3, [pc, #28]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800767e:	e05e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007684:	e05b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768a:	e058      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800768c:	58024400 	.word	0x58024400
 8007690:	03d09000 	.word	0x03d09000
 8007694:	003d0900 	.word	0x003d0900
 8007698:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800769c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80076a4:	430b      	orrs	r3, r1
 80076a6:	d148      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80076a8:	4b27      	ldr	r3, [pc, #156]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b8:	d02a      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076c0:	d838      	bhi.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80076c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ce:	d00d      	beq.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80076d0:	e030      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076de:	d102      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80076e0:	4b1a      	ldr	r3, [pc, #104]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e4:	e02b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ea:	e028      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076ec:	4b16      	ldr	r3, [pc, #88]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076f8:	d107      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fae4 	bl	8007ccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007708:	e019      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770e:	e016      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007710:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800771c:	d107      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800771e:	f107 0318 	add.w	r3, r7, #24
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f82a 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772c:	e007      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007732:	e004      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007738:	e001      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800773e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007740:	4618      	mov	r0, r3
 8007742:	3740      	adds	r7, #64	@ 0x40
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	58024400 	.word	0x58024400
 800774c:	007a1200 	.word	0x007a1200

08007750 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007754:	f7fd fcf0 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 8007758:	4602      	mov	r2, r0
 800775a:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	4904      	ldr	r1, [pc, #16]	@ (8007778 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	f003 031f 	and.w	r3, r3, #31
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	58024400 	.word	0x58024400
 8007778:	0800a7f0 	.word	0x0800a7f0

0800777c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800777c:	b480      	push	{r7}
 800777e:	b089      	sub	sp, #36	@ 0x24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007784:	4ba1      	ldr	r3, [pc, #644]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800778e:	4b9f      	ldr	r3, [pc, #636]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007792:	0b1b      	lsrs	r3, r3, #12
 8007794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007798:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800779a:	4b9c      	ldr	r3, [pc, #624]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077a6:	4b99      	ldr	r3, [pc, #612]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077aa:	08db      	lsrs	r3, r3, #3
 80077ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8111 	beq.w	80079ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f000 8083 	beq.w	80078d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	f200 80a1 	bhi.w	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d056      	beq.n	8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077e6:	e099      	b.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e8:	4b88      	ldr	r3, [pc, #544]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02d      	beq.n	8007850 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077f4:	4b85      	ldr	r3, [pc, #532]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	4a84      	ldr	r2, [pc, #528]	@ (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b7b      	ldr	r3, [pc, #492]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007832:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800784e:	e087      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800785e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007862:	4b6a      	ldr	r3, [pc, #424]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007872:	ed97 6a03 	vldr	s12, [r7, #12]
 8007876:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800787a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007892:	e065      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b59      	ldr	r3, [pc, #356]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078d6:	e043      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b48      	ldr	r3, [pc, #288]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791a:	e021      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b37      	ldr	r3, [pc, #220]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007960:	4b2a      	ldr	r3, [pc, #168]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797a:	edd7 6a07 	vldr	s13, [r7, #28]
 800797e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007986:	ee17 2a90 	vmov	r2, s15
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800798e:	4b1f      	ldr	r3, [pc, #124]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007992:	0c1b      	lsrs	r3, r3, #16
 8007994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b4:	ee17 2a90 	vmov	r2, s15
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079bc:	4b13      	ldr	r3, [pc, #76]	@ (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	0e1b      	lsrs	r3, r3, #24
 80079c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e2:	ee17 2a90 	vmov	r2, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079ea:	e008      	b.n	80079fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	609a      	str	r2, [r3, #8]
}
 80079fe:	bf00      	nop
 8007a00:	3724      	adds	r7, #36	@ 0x24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	03d09000 	.word	0x03d09000
 8007a14:	46000000 	.word	0x46000000
 8007a18:	4c742400 	.word	0x4c742400
 8007a1c:	4a742400 	.word	0x4a742400
 8007a20:	4af42400 	.word	0x4af42400

08007a24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b089      	sub	sp, #36	@ 0x24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2c:	4ba1      	ldr	r3, [pc, #644]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a36:	4b9f      	ldr	r3, [pc, #636]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	0d1b      	lsrs	r3, r3, #20
 8007a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a42:	4b9c      	ldr	r3, [pc, #624]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a4e:	4b99      	ldr	r3, [pc, #612]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8111 	beq.w	8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f000 8083 	beq.w	8007b80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f200 80a1 	bhi.w	8007bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d056      	beq.n	8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a8e:	e099      	b.n	8007bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a90:	4b88      	ldr	r3, [pc, #544]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02d      	beq.n	8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a9c:	4b85      	ldr	r3, [pc, #532]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a84      	ldr	r2, [pc, #528]	@ (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ada:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007af6:	e087      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3a:	e065      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b59      	ldr	r3, [pc, #356]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b7e:	e043      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b48      	ldr	r3, [pc, #288]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc2:	e021      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b37      	ldr	r3, [pc, #220]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c08:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2e:	ee17 2a90 	vmov	r2, s15
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c36:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5c:	ee17 2a90 	vmov	r2, s15
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c64:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8a:	ee17 2a90 	vmov	r2, s15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c92:	e008      	b.n	8007ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
}
 8007ca6:	bf00      	nop
 8007ca8:	3724      	adds	r7, #36	@ 0x24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	03d09000 	.word	0x03d09000
 8007cbc:	46000000 	.word	0x46000000
 8007cc0:	4c742400 	.word	0x4c742400
 8007cc4:	4a742400 	.word	0x4a742400
 8007cc8:	4af42400 	.word	0x4af42400

08007ccc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b089      	sub	sp, #36	@ 0x24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd4:	4ba0      	ldr	r3, [pc, #640]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007cde:	4b9e      	ldr	r3, [pc, #632]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce2:	091b      	lsrs	r3, r3, #4
 8007ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ce8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cea:	4b9b      	ldr	r3, [pc, #620]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cf4:	4b98      	ldr	r3, [pc, #608]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	fb02 f303 	mul.w	r3, r2, r3
 8007d04:	ee07 3a90 	vmov	s15, r3
 8007d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8111 	beq.w	8007f3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	f000 8083 	beq.w	8007e26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	f200 80a1 	bhi.w	8007e6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d056      	beq.n	8007de2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d34:	e099      	b.n	8007e6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d36:	4b88      	ldr	r3, [pc, #544]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d02d      	beq.n	8007d9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d42:	4b85      	ldr	r3, [pc, #532]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	08db      	lsrs	r3, r3, #3
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	4a83      	ldr	r2, [pc, #524]	@ (8007f5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6c:	4b7a      	ldr	r3, [pc, #488]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d9c:	e087      	b.n	8007eae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db0:	4b69      	ldr	r3, [pc, #420]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de0:	e065      	b.n	8007eae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df4:	4b58      	ldr	r3, [pc, #352]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e08:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e24:	e043      	b.n	8007eae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b47      	ldr	r3, [pc, #284]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e68:	e021      	b.n	8007eae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7c:	4b36      	ldr	r3, [pc, #216]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007eae:	4b2a      	ldr	r3, [pc, #168]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb2:	0a5b      	lsrs	r3, r3, #9
 8007eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed4:	ee17 2a90 	vmov	r2, s15
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007edc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f02:	ee17 2a90 	vmov	r2, s15
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007f0a:	4b13      	ldr	r3, [pc, #76]	@ (8007f58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0e:	0e1b      	lsrs	r3, r3, #24
 8007f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f30:	ee17 2a90 	vmov	r2, s15
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f38:	e008      	b.n	8007f4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	609a      	str	r2, [r3, #8]
}
 8007f4c:	bf00      	nop
 8007f4e:	3724      	adds	r7, #36	@ 0x24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	03d09000 	.word	0x03d09000
 8007f60:	46000000 	.word	0x46000000
 8007f64:	4c742400 	.word	0x4c742400
 8007f68:	4a742400 	.word	0x4a742400
 8007f6c:	4af42400 	.word	0x4af42400

08007f70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <RCCEx_PLL2_Config+0x1e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f8c:	d904      	bls.n	8007f98 <RCCEx_PLL2_Config+0x28>
 8007f8e:	f640 6172 	movw	r1, #3698	@ 0xe72
 8007f92:	4885      	ldr	r0, [pc, #532]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8007f94:	f7f8 ff58 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d904      	bls.n	8007faa <RCCEx_PLL2_Config+0x3a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa8:	d904      	bls.n	8007fb4 <RCCEx_PLL2_Config+0x44>
 8007faa:	f640 6173 	movw	r1, #3699	@ 0xe73
 8007fae:	487e      	ldr	r0, [pc, #504]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8007fb0:	f7f8 ff4a 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <RCCEx_PLL2_Config+0x54>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b80      	cmp	r3, #128	@ 0x80
 8007fc2:	d904      	bls.n	8007fce <RCCEx_PLL2_Config+0x5e>
 8007fc4:	f640 6174 	movw	r1, #3700	@ 0xe74
 8007fc8:	4877      	ldr	r0, [pc, #476]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8007fca:	f7f8 ff3d 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <RCCEx_PLL2_Config+0x6e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b80      	cmp	r3, #128	@ 0x80
 8007fdc:	d904      	bls.n	8007fe8 <RCCEx_PLL2_Config+0x78>
 8007fde:	f640 6175 	movw	r1, #3701	@ 0xe75
 8007fe2:	4871      	ldr	r0, [pc, #452]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8007fe4:	f7f8 ff30 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <RCCEx_PLL2_Config+0x88>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	2b80      	cmp	r3, #128	@ 0x80
 8007ff6:	d904      	bls.n	8008002 <RCCEx_PLL2_Config+0x92>
 8007ff8:	f640 6176 	movw	r1, #3702	@ 0xe76
 8007ffc:	486a      	ldr	r0, [pc, #424]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8007ffe:	f7f8 ff23 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d010      	beq.n	800802c <RCCEx_PLL2_Config+0xbc>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	2b40      	cmp	r3, #64	@ 0x40
 8008010:	d00c      	beq.n	800802c <RCCEx_PLL2_Config+0xbc>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b80      	cmp	r3, #128	@ 0x80
 8008018:	d008      	beq.n	800802c <RCCEx_PLL2_Config+0xbc>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008020:	d004      	beq.n	800802c <RCCEx_PLL2_Config+0xbc>
 8008022:	f640 6177 	movw	r1, #3703	@ 0xe77
 8008026:	4860      	ldr	r0, [pc, #384]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8008028:	f7f8 ff0e 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <RCCEx_PLL2_Config+0xd6>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b20      	cmp	r3, #32
 800803a:	d004      	beq.n	8008046 <RCCEx_PLL2_Config+0xd6>
 800803c:	f640 6178 	movw	r1, #3704	@ 0xe78
 8008040:	4859      	ldr	r0, [pc, #356]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8008042:	f7f8 ff01 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800804e:	d304      	bcc.n	800805a <RCCEx_PLL2_Config+0xea>
 8008050:	f640 6179 	movw	r1, #3705	@ 0xe79
 8008054:	4854      	ldr	r0, [pc, #336]	@ (80081a8 <RCCEx_PLL2_Config+0x238>)
 8008056:	f7f8 fef7 	bl	8000e48 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800805a:	4b54      	ldr	r3, [pc, #336]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b03      	cmp	r3, #3
 8008064:	d101      	bne.n	800806a <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e099      	b.n	800819e <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800806a:	4b50      	ldr	r3, [pc, #320]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a4f      	ldr	r2, [pc, #316]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008070:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008076:	f7f9 f993 	bl	80013a0 <HAL_GetTick>
 800807a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800807c:	e008      	b.n	8008090 <RCCEx_PLL2_Config+0x120>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800807e:	f7f9 f98f 	bl	80013a0 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e086      	b.n	800819e <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008090:	4b46      	ldr	r3, [pc, #280]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f0      	bne.n	800807e <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800809c:	4b43      	ldr	r3, [pc, #268]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800809e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	031b      	lsls	r3, r3, #12
 80080aa:	4940      	ldr	r1, [pc, #256]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	3b01      	subs	r3, #1
 80080c0:	025b      	lsls	r3, r3, #9
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	3b01      	subs	r3, #1
 80080da:	061b      	lsls	r3, r3, #24
 80080dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080e0:	4932      	ldr	r1, [pc, #200]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080e6:	4b31      	ldr	r3, [pc, #196]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 80080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	492e      	ldr	r1, [pc, #184]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080f8:	4b2c      	ldr	r3, [pc, #176]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	f023 0220 	bic.w	r2, r3, #32
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	4929      	ldr	r1, [pc, #164]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800810a:	4b28      	ldr	r3, [pc, #160]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	4a27      	ldr	r2, [pc, #156]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008110:	f023 0310 	bic.w	r3, r3, #16
 8008114:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008116:	4b25      	ldr	r3, [pc, #148]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800811a:	4b25      	ldr	r3, [pc, #148]	@ (80081b0 <RCCEx_PLL2_Config+0x240>)
 800811c:	4013      	ands	r3, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	69d2      	ldr	r2, [r2, #28]
 8008122:	00d2      	lsls	r2, r2, #3
 8008124:	4921      	ldr	r1, [pc, #132]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800812a:	4b20      	ldr	r3, [pc, #128]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	4a1f      	ldr	r2, [pc, #124]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008130:	f043 0310 	orr.w	r3, r3, #16
 8008134:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800813c:	4b1b      	ldr	r3, [pc, #108]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	4a1a      	ldr	r2, [pc, #104]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008146:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008148:	e00f      	b.n	800816a <RCCEx_PLL2_Config+0x1fa>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d106      	bne.n	800815e <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008150:	4b16      	ldr	r3, [pc, #88]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4a15      	ldr	r2, [pc, #84]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800815c:	e005      	b.n	800816a <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800815e:	4b13      	ldr	r3, [pc, #76]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	4a12      	ldr	r2, [pc, #72]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008164:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008168:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800816a:	4b10      	ldr	r3, [pc, #64]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a0f      	ldr	r2, [pc, #60]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008170:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008176:	f7f9 f913 	bl	80013a0 <HAL_GetTick>
 800817a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800817c:	e008      	b.n	8008190 <RCCEx_PLL2_Config+0x220>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800817e:	f7f9 f90f 	bl	80013a0 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e006      	b.n	800819e <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008190:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <RCCEx_PLL2_Config+0x23c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0f0      	beq.n	800817e <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	0800a6c8 	.word	0x0800a6c8
 80081ac:	58024400 	.word	0x58024400
 80081b0:	ffff0007 	.word	0xffff0007

080081b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <RCCEx_PLL3_Config+0x1e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80081d0:	d904      	bls.n	80081dc <RCCEx_PLL3_Config+0x28>
 80081d2:	f640 61da 	movw	r1, #3802	@ 0xeda
 80081d6:	4887      	ldr	r0, [pc, #540]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 80081d8:	f7f8 fe36 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d904      	bls.n	80081ee <RCCEx_PLL3_Config+0x3a>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ec:	d904      	bls.n	80081f8 <RCCEx_PLL3_Config+0x44>
 80081ee:	f640 61db 	movw	r1, #3803	@ 0xedb
 80081f2:	4880      	ldr	r0, [pc, #512]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 80081f4:	f7f8 fe28 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <RCCEx_PLL3_Config+0x54>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b80      	cmp	r3, #128	@ 0x80
 8008206:	d904      	bls.n	8008212 <RCCEx_PLL3_Config+0x5e>
 8008208:	f640 61dc 	movw	r1, #3804	@ 0xedc
 800820c:	4879      	ldr	r0, [pc, #484]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 800820e:	f7f8 fe1b 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <RCCEx_PLL3_Config+0x6e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b80      	cmp	r3, #128	@ 0x80
 8008220:	d904      	bls.n	800822c <RCCEx_PLL3_Config+0x78>
 8008222:	f640 61dd 	movw	r1, #3805	@ 0xedd
 8008226:	4873      	ldr	r0, [pc, #460]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 8008228:	f7f8 fe0e 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <RCCEx_PLL3_Config+0x88>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b80      	cmp	r3, #128	@ 0x80
 800823a:	d904      	bls.n	8008246 <RCCEx_PLL3_Config+0x92>
 800823c:	f640 61de 	movw	r1, #3806	@ 0xede
 8008240:	486c      	ldr	r0, [pc, #432]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 8008242:	f7f8 fe01 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <RCCEx_PLL3_Config+0xc2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008256:	d00e      	beq.n	8008276 <RCCEx_PLL3_Config+0xc2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008260:	d009      	beq.n	8008276 <RCCEx_PLL3_Config+0xc2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800826a:	d004      	beq.n	8008276 <RCCEx_PLL3_Config+0xc2>
 800826c:	f640 61df 	movw	r1, #3807	@ 0xedf
 8008270:	4860      	ldr	r0, [pc, #384]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 8008272:	f7f8 fde9 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <RCCEx_PLL3_Config+0xde>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008286:	d004      	beq.n	8008292 <RCCEx_PLL3_Config+0xde>
 8008288:	f44f 616e 	mov.w	r1, #3808	@ 0xee0
 800828c:	4859      	ldr	r0, [pc, #356]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 800828e:	f7f8 fddb 	bl	8000e48 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829a:	d304      	bcc.n	80082a6 <RCCEx_PLL3_Config+0xf2>
 800829c:	f640 61e1 	movw	r1, #3809	@ 0xee1
 80082a0:	4854      	ldr	r0, [pc, #336]	@ (80083f4 <RCCEx_PLL3_Config+0x240>)
 80082a2:	f7f8 fdd1 	bl	8000e48 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082a6:	4b54      	ldr	r3, [pc, #336]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80082a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d101      	bne.n	80082b6 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e099      	b.n	80083ea <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082b6:	4b50      	ldr	r3, [pc, #320]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a4f      	ldr	r2, [pc, #316]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80082bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c2:	f7f9 f86d 	bl	80013a0 <HAL_GetTick>
 80082c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082c8:	e008      	b.n	80082dc <RCCEx_PLL3_Config+0x128>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082ca:	f7f9 f869 	bl	80013a0 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e086      	b.n	80083ea <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082dc:	4b46      	ldr	r3, [pc, #280]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f0      	bne.n	80082ca <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082e8:	4b43      	ldr	r3, [pc, #268]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80082ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	051b      	lsls	r3, r3, #20
 80082f6:	4940      	ldr	r1, [pc, #256]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	3b01      	subs	r3, #1
 8008302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	3b01      	subs	r3, #1
 800830c:	025b      	lsls	r3, r3, #9
 800830e:	b29b      	uxth	r3, r3
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	3b01      	subs	r3, #1
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	3b01      	subs	r3, #1
 8008326:	061b      	lsls	r3, r3, #24
 8008328:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800832c:	4932      	ldr	r1, [pc, #200]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 800832e:	4313      	orrs	r3, r2
 8008330:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008332:	4b31      	ldr	r3, [pc, #196]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	492e      	ldr	r1, [pc, #184]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008340:	4313      	orrs	r3, r2
 8008342:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008344:	4b2c      	ldr	r3, [pc, #176]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	4929      	ldr	r1, [pc, #164]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008352:	4313      	orrs	r3, r2
 8008354:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008356:	4b28      	ldr	r3, [pc, #160]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	4a27      	ldr	r2, [pc, #156]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 800835c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008360:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008362:	4b25      	ldr	r3, [pc, #148]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008366:	4b25      	ldr	r3, [pc, #148]	@ (80083fc <RCCEx_PLL3_Config+0x248>)
 8008368:	4013      	ands	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	69d2      	ldr	r2, [r2, #28]
 800836e:	00d2      	lsls	r2, r2, #3
 8008370:	4921      	ldr	r1, [pc, #132]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008372:	4313      	orrs	r3, r2
 8008374:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008376:	4b20      	ldr	r3, [pc, #128]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	4a1f      	ldr	r2, [pc, #124]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 800837c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008380:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008388:	4b1b      	ldr	r3, [pc, #108]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	4a1a      	ldr	r2, [pc, #104]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 800838e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008394:	e00f      	b.n	80083b6 <RCCEx_PLL3_Config+0x202>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d106      	bne.n	80083aa <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800839c:	4b16      	ldr	r3, [pc, #88]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	4a15      	ldr	r2, [pc, #84]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80083a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083a8:	e005      	b.n	80083b6 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083aa:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ae:	4a12      	ldr	r2, [pc, #72]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80083b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083b6:	4b10      	ldr	r3, [pc, #64]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a0f      	ldr	r2, [pc, #60]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80083bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c2:	f7f8 ffed 	bl	80013a0 <HAL_GetTick>
 80083c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083c8:	e008      	b.n	80083dc <RCCEx_PLL3_Config+0x228>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083ca:	f7f8 ffe9 	bl	80013a0 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d901      	bls.n	80083dc <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e006      	b.n	80083ea <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083dc:	4b06      	ldr	r3, [pc, #24]	@ (80083f8 <RCCEx_PLL3_Config+0x244>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0f0      	beq.n	80083ca <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	0800a6c8 	.word	0x0800a6c8
 80083f8:	58024400 	.word	0x58024400
 80083fc:	ffff0007 	.word	0xffff0007

08008400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0f5      	b.n	80085fe <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a7c      	ldr	r2, [pc, #496]	@ (8008608 <HAL_TIM_Base_Init+0x208>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d045      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008424:	d040      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a78      	ldr	r2, [pc, #480]	@ (800860c <HAL_TIM_Base_Init+0x20c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d03b      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a76      	ldr	r2, [pc, #472]	@ (8008610 <HAL_TIM_Base_Init+0x210>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d036      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a75      	ldr	r2, [pc, #468]	@ (8008614 <HAL_TIM_Base_Init+0x214>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d031      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a73      	ldr	r2, [pc, #460]	@ (8008618 <HAL_TIM_Base_Init+0x218>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d02c      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a72      	ldr	r2, [pc, #456]	@ (800861c <HAL_TIM_Base_Init+0x21c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d027      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a70      	ldr	r2, [pc, #448]	@ (8008620 <HAL_TIM_Base_Init+0x220>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d022      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a6f      	ldr	r2, [pc, #444]	@ (8008624 <HAL_TIM_Base_Init+0x224>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d01d      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a6d      	ldr	r2, [pc, #436]	@ (8008628 <HAL_TIM_Base_Init+0x228>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d018      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a6c      	ldr	r2, [pc, #432]	@ (800862c <HAL_TIM_Base_Init+0x22c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d013      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a6a      	ldr	r2, [pc, #424]	@ (8008630 <HAL_TIM_Base_Init+0x230>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00e      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a69      	ldr	r2, [pc, #420]	@ (8008634 <HAL_TIM_Base_Init+0x234>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d009      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a67      	ldr	r2, [pc, #412]	@ (8008638 <HAL_TIM_Base_Init+0x238>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <HAL_TIM_Base_Init+0xa8>
 800849e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80084a2:	4866      	ldr	r0, [pc, #408]	@ (800863c <HAL_TIM_Base_Init+0x23c>)
 80084a4:	f7f8 fcd0 	bl	8000e48 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d014      	beq.n	80084da <HAL_TIM_Base_Init+0xda>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d010      	beq.n	80084da <HAL_TIM_Base_Init+0xda>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d00c      	beq.n	80084da <HAL_TIM_Base_Init+0xda>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b40      	cmp	r3, #64	@ 0x40
 80084c6:	d008      	beq.n	80084da <HAL_TIM_Base_Init+0xda>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b60      	cmp	r3, #96	@ 0x60
 80084ce:	d004      	beq.n	80084da <HAL_TIM_Base_Init+0xda>
 80084d0:	f240 1117 	movw	r1, #279	@ 0x117
 80084d4:	4859      	ldr	r0, [pc, #356]	@ (800863c <HAL_TIM_Base_Init+0x23c>)
 80084d6:	f7f8 fcb7 	bl	8000e48 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <HAL_TIM_Base_Init+0x100>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ea:	d009      	beq.n	8008500 <HAL_TIM_Base_Init+0x100>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f4:	d004      	beq.n	8008500 <HAL_TIM_Base_Init+0x100>
 80084f6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80084fa:	4850      	ldr	r0, [pc, #320]	@ (800863c <HAL_TIM_Base_Init+0x23c>)
 80084fc:	f7f8 fca4 	bl	8000e48 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008508:	d004      	beq.n	8008514 <HAL_TIM_Base_Init+0x114>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a41      	ldr	r2, [pc, #260]	@ (8008614 <HAL_TIM_Base_Init+0x214>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d107      	bne.n	8008524 <HAL_TIM_Base_Init+0x124>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	e00e      	b.n	8008542 <HAL_TIM_Base_Init+0x142>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d006      	beq.n	800853a <HAL_TIM_Base_Init+0x13a>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008534:	d201      	bcs.n	800853a <HAL_TIM_Base_Init+0x13a>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <HAL_TIM_Base_Init+0x13c>
 800853a:	2300      	movs	r3, #0
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <HAL_TIM_Base_Init+0x150>
 8008546:	f240 1119 	movw	r1, #281	@ 0x119
 800854a:	483c      	ldr	r0, [pc, #240]	@ (800863c <HAL_TIM_Base_Init+0x23c>)
 800854c:	f7f8 fc7c 	bl	8000e48 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_TIM_Base_Init+0x16a>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b80      	cmp	r3, #128	@ 0x80
 800855e:	d004      	beq.n	800856a <HAL_TIM_Base_Init+0x16a>
 8008560:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8008564:	4835      	ldr	r0, [pc, #212]	@ (800863c <HAL_TIM_Base_Init+0x23c>)
 8008566:	f7f8 fc6f 	bl	8000e48 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7f8 fcf0 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f000 f98c 	bl	80088b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40001000 	.word	0x40001000
 800861c:	40001400 	.word	0x40001400
 8008620:	40010400 	.word	0x40010400
 8008624:	40001800 	.word	0x40001800
 8008628:	40001c00 	.word	0x40001c00
 800862c:	40002000 	.word	0x40002000
 8008630:	40014000 	.word	0x40014000
 8008634:	40014400 	.word	0x40014400
 8008638:	40014800 	.word	0x40014800
 800863c:	0800a704 	.word	0x0800a704

08008640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d020      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0202 	mvn.w	r2, #2
 8008674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8f3 	bl	8008876 <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f8e5 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8f6 	bl	800888a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d020      	beq.n	80086f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01b      	beq.n	80086f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0204 	mvn.w	r2, #4
 80086c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2202      	movs	r2, #2
 80086c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8cd 	bl	8008876 <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f8bf 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f8d0 	bl	800888a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d020      	beq.n	800873c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01b      	beq.n	800873c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0208 	mvn.w	r2, #8
 800870c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2204      	movs	r2, #4
 8008712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8a7 	bl	8008876 <HAL_TIM_IC_CaptureCallback>
 8008728:	e005      	b.n	8008736 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f899 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f8aa 	bl	800888a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f003 0310 	and.w	r3, r3, #16
 8008742:	2b00      	cmp	r3, #0
 8008744:	d020      	beq.n	8008788 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01b      	beq.n	8008788 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f06f 0210 	mvn.w	r2, #16
 8008758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2208      	movs	r2, #8
 800875e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f881 	bl	8008876 <HAL_TIM_IC_CaptureCallback>
 8008774:	e005      	b.n	8008782 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f873 	bl	8008862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f884 	bl	800888a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00c      	beq.n	80087ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0201 	mvn.w	r2, #1
 80087a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f851 	bl	800884e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d104      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa83 	bl	8008ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fa7b 	bl	8008cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f83e 	bl	800889e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0220 	mvn.w	r2, #32
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fa43 	bl	8008ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a46      	ldr	r2, [pc, #280]	@ (80089e0 <TIM_Base_SetConfig+0x12c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d013      	beq.n	80088f4 <TIM_Base_SetConfig+0x40>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088d2:	d00f      	beq.n	80088f4 <TIM_Base_SetConfig+0x40>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a43      	ldr	r2, [pc, #268]	@ (80089e4 <TIM_Base_SetConfig+0x130>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00b      	beq.n	80088f4 <TIM_Base_SetConfig+0x40>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a42      	ldr	r2, [pc, #264]	@ (80089e8 <TIM_Base_SetConfig+0x134>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d007      	beq.n	80088f4 <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a41      	ldr	r2, [pc, #260]	@ (80089ec <TIM_Base_SetConfig+0x138>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d003      	beq.n	80088f4 <TIM_Base_SetConfig+0x40>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a40      	ldr	r2, [pc, #256]	@ (80089f0 <TIM_Base_SetConfig+0x13c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d108      	bne.n	8008906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a35      	ldr	r2, [pc, #212]	@ (80089e0 <TIM_Base_SetConfig+0x12c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01f      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008914:	d01b      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a32      	ldr	r2, [pc, #200]	@ (80089e4 <TIM_Base_SetConfig+0x130>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d017      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a31      	ldr	r2, [pc, #196]	@ (80089e8 <TIM_Base_SetConfig+0x134>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a30      	ldr	r2, [pc, #192]	@ (80089ec <TIM_Base_SetConfig+0x138>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a2f      	ldr	r2, [pc, #188]	@ (80089f0 <TIM_Base_SetConfig+0x13c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a2e      	ldr	r2, [pc, #184]	@ (80089f4 <TIM_Base_SetConfig+0x140>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a2d      	ldr	r2, [pc, #180]	@ (80089f8 <TIM_Base_SetConfig+0x144>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_Base_SetConfig+0x9a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2c      	ldr	r2, [pc, #176]	@ (80089fc <TIM_Base_SetConfig+0x148>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d108      	bne.n	8008960 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a16      	ldr	r2, [pc, #88]	@ (80089e0 <TIM_Base_SetConfig+0x12c>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00f      	beq.n	80089ac <TIM_Base_SetConfig+0xf8>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a18      	ldr	r2, [pc, #96]	@ (80089f0 <TIM_Base_SetConfig+0x13c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00b      	beq.n	80089ac <TIM_Base_SetConfig+0xf8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a17      	ldr	r2, [pc, #92]	@ (80089f4 <TIM_Base_SetConfig+0x140>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_Base_SetConfig+0xf8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a16      	ldr	r2, [pc, #88]	@ (80089f8 <TIM_Base_SetConfig+0x144>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_Base_SetConfig+0xf8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a15      	ldr	r2, [pc, #84]	@ (80089fc <TIM_Base_SetConfig+0x148>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d103      	bne.n	80089b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d105      	bne.n	80089d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f023 0201 	bic.w	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	611a      	str	r2, [r3, #16]
  }
}
 80089d2:	bf00      	nop
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	40010000 	.word	0x40010000
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40010400 	.word	0x40010400
 80089f4:	40014000 	.word	0x40014000
 80089f8:	40014400 	.word	0x40014400
 80089fc:	40014800 	.word	0x40014800

08008a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a37      	ldr	r2, [pc, #220]	@ (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d031      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1c:	d02c      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a33      	ldr	r2, [pc, #204]	@ (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d027      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a31      	ldr	r2, [pc, #196]	@ (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d022      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a30      	ldr	r2, [pc, #192]	@ (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d01d      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a2e      	ldr	r2, [pc, #184]	@ (8008afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d018      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2b      	ldr	r2, [pc, #172]	@ (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00e      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d009      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a28      	ldr	r2, [pc, #160]	@ (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a6e:	f240 71cb 	movw	r1, #1995	@ 0x7cb
 8008a72:	4827      	ldr	r0, [pc, #156]	@ (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a74:	f7f8 f9e8 	bl	8000e48 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d020      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d01c      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d018      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b30      	cmp	r3, #48	@ 0x30
 8008a96:	d014      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b40      	cmp	r3, #64	@ 0x40
 8008a9e:	d010      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b50      	cmp	r3, #80	@ 0x50
 8008aa6:	d00c      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b60      	cmp	r3, #96	@ 0x60
 8008aae:	d008      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b70      	cmp	r3, #112	@ 0x70
 8008ab6:	d004      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008ab8:	f240 71cc 	movw	r1, #1996	@ 0x7cc
 8008abc:	4814      	ldr	r0, [pc, #80]	@ (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008abe:	f7f8 f9c3 	bl	8000e48 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	2b80      	cmp	r3, #128	@ 0x80
 8008ac8:	d008      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008ad2:	f240 71cd 	movw	r1, #1997	@ 0x7cd
 8008ad6:	480e      	ldr	r0, [pc, #56]	@ (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ad8:	f7f8 f9b6 	bl	8000e48 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d116      	bne.n	8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e0db      	b.n	8008ca2 <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 8008aea:	bf00      	nop
 8008aec:	40010000 	.word	0x40010000
 8008af0:	40000400 	.word	0x40000400
 8008af4:	40000800 	.word	0x40000800
 8008af8:	40000c00 	.word	0x40000c00
 8008afc:	40001000 	.word	0x40001000
 8008b00:	40001400 	.word	0x40001400
 8008b04:	40010400 	.word	0x40010400
 8008b08:	40001800 	.word	0x40001800
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	0800a73c 	.word	0x0800a73c
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a5c      	ldr	r2, [pc, #368]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a5b      	ldr	r2, [pc, #364]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d161      	bne.n	8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d054      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b58:	d04f      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b62:	d04a      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b6c:	d045      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b76:	d040      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008b80:	d03b      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b8a:	d036      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b94:	d031      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8008b9e:	d02c      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ba8:	d027      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8008bb2:	d022      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008bbc:	d01d      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8008bc6:	d018      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008bd0:	d013      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8008bda:	d00e      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8008be4:	d009      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8008bee:	d004      	beq.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008bf0:	f240 71df 	movw	r1, #2015	@ 0x7df
 8008bf4:	482f      	ldr	r0, [pc, #188]	@ (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 8008bf6:	f7f8 f927 	bl	8000e48 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a20      	ldr	r2, [pc, #128]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d022      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c38:	d01d      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a14      	ldr	r2, [pc, #80]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a17      	ldr	r2, [pc, #92]	@ (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a15      	ldr	r2, [pc, #84]	@ (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d10c      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	40010000 	.word	0x40010000
 8008cb0:	40010400 	.word	0x40010400
 8008cb4:	0800a73c 	.word	0x0800a73c
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40001800 	.word	0x40001800
 8008cc8:	40014000 	.word	0x40014000

08008ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e0ab      	b.n	8008e72 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d032      	beq.n	8008d88 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a55      	ldr	r2, [pc, #340]	@ (8008e7c <HAL_UART_Init+0x174>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d05f      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a53      	ldr	r2, [pc, #332]	@ (8008e80 <HAL_UART_Init+0x178>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d05a      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a52      	ldr	r2, [pc, #328]	@ (8008e84 <HAL_UART_Init+0x17c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d055      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a50      	ldr	r2, [pc, #320]	@ (8008e88 <HAL_UART_Init+0x180>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d050      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8008e8c <HAL_UART_Init+0x184>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d04b      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a4d      	ldr	r2, [pc, #308]	@ (8008e90 <HAL_UART_Init+0x188>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d046      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a4c      	ldr	r2, [pc, #304]	@ (8008e94 <HAL_UART_Init+0x18c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d041      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e98 <HAL_UART_Init+0x190>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d03c      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a49      	ldr	r2, [pc, #292]	@ (8008e9c <HAL_UART_Init+0x194>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d037      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d7c:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8008d80:	4847      	ldr	r0, [pc, #284]	@ (8008ea0 <HAL_UART_Init+0x198>)
 8008d82:	f7f8 f861 	bl	8000e48 <assert_failed>
 8008d86:	e031      	b.n	8008dec <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8008e7c <HAL_UART_Init+0x174>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d02c      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a3a      	ldr	r2, [pc, #232]	@ (8008e80 <HAL_UART_Init+0x178>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d027      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a38      	ldr	r2, [pc, #224]	@ (8008e84 <HAL_UART_Init+0x17c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d022      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a37      	ldr	r2, [pc, #220]	@ (8008e88 <HAL_UART_Init+0x180>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d01d      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a35      	ldr	r2, [pc, #212]	@ (8008e8c <HAL_UART_Init+0x184>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d018      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a34      	ldr	r2, [pc, #208]	@ (8008e90 <HAL_UART_Init+0x188>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d013      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a32      	ldr	r2, [pc, #200]	@ (8008e94 <HAL_UART_Init+0x18c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00e      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a31      	ldr	r2, [pc, #196]	@ (8008e98 <HAL_UART_Init+0x190>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d009      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8008e9c <HAL_UART_Init+0x194>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <HAL_UART_Init+0xe4>
 8008de2:	f240 1143 	movw	r1, #323	@ 0x143
 8008de6:	482e      	ldr	r0, [pc, #184]	@ (8008ea0 <HAL_UART_Init+0x198>)
 8008de8:	f7f8 f82e 	bl	8000e48 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f8 f8d8 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2224      	movs	r2, #36	@ 0x24
 8008e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0201 	bic.w	r2, r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <HAL_UART_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fe81 	bl	8009b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f83a 	bl	8008ea4 <UART_SetConfig>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_UART_Init+0x132>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e01b      	b.n	8008e72 <HAL_UART_Init+0x16a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0201 	orr.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 ffd2 	bl	8009e14 <UART_CheckIdleState>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	40011000 	.word	0x40011000
 8008e80:	40004400 	.word	0x40004400
 8008e84:	40004800 	.word	0x40004800
 8008e88:	40004c00 	.word	0x40004c00
 8008e8c:	40005000 	.word	0x40005000
 8008e90:	40011400 	.word	0x40011400
 8008e94:	40007800 	.word	0x40007800
 8008e98:	40007c00 	.word	0x40007c00
 8008e9c:	58000c00 	.word	0x58000c00
 8008ea0:	0800a778 	.word	0x0800a778

08008ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ea8:	b092      	sub	sp, #72	@ 0x48
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4a17      	ldr	r2, [pc, #92]	@ (8008f18 <UART_SetConfig+0x74>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d904      	bls.n	8008ec8 <UART_SetConfig+0x24>
 8008ebe:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8008ec2:	4816      	ldr	r0, [pc, #88]	@ (8008f1c <UART_SetConfig+0x78>)
 8008ec4:	f7f7 ffc0 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ed0:	d00d      	beq.n	8008eee <UART_SetConfig+0x4a>
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <UART_SetConfig+0x4a>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee2:	d004      	beq.n	8008eee <UART_SetConfig+0x4a>
 8008ee4:	f640 31ca 	movw	r1, #3018	@ 0xbca
 8008ee8:	480c      	ldr	r0, [pc, #48]	@ (8008f1c <UART_SetConfig+0x78>)
 8008eea:	f7f7 ffad 	bl	8000e48 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8008f20 <UART_SetConfig+0x7c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d115      	bne.n	8008f24 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d037      	beq.n	8008f70 <UART_SetConfig+0xcc>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f08:	d032      	beq.n	8008f70 <UART_SetConfig+0xcc>
 8008f0a:	f640 31cd 	movw	r1, #3021	@ 0xbcd
 8008f0e:	4803      	ldr	r0, [pc, #12]	@ (8008f1c <UART_SetConfig+0x78>)
 8008f10:	f7f7 ff9a 	bl	8000e48 <assert_failed>
 8008f14:	e02c      	b.n	8008f70 <UART_SetConfig+0xcc>
 8008f16:	bf00      	nop
 8008f18:	00bebc20 	.word	0x00bebc20
 8008f1c:	0800a778 	.word	0x0800a778
 8008f20:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f2c:	d012      	beq.n	8008f54 <UART_SetConfig+0xb0>
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00e      	beq.n	8008f54 <UART_SetConfig+0xb0>
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f3e:	d009      	beq.n	8008f54 <UART_SetConfig+0xb0>
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f48:	d004      	beq.n	8008f54 <UART_SetConfig+0xb0>
 8008f4a:	f640 31d1 	movw	r1, #3025	@ 0xbd1
 8008f4e:	48a5      	ldr	r0, [pc, #660]	@ (80091e4 <UART_SetConfig+0x340>)
 8008f50:	f7f7 ff7a 	bl	8000e48 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d009      	beq.n	8008f70 <UART_SetConfig+0xcc>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f64:	d004      	beq.n	8008f70 <UART_SetConfig+0xcc>
 8008f66:	f640 31d2 	movw	r1, #3026	@ 0xbd2
 8008f6a:	489e      	ldr	r0, [pc, #632]	@ (80091e4 <UART_SetConfig+0x340>)
 8008f6c:	f7f7 ff6c 	bl	8000e48 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <UART_SetConfig+0xf2>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f80:	d009      	beq.n	8008f96 <UART_SetConfig+0xf2>
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f8a:	d004      	beq.n	8008f96 <UART_SetConfig+0xf2>
 8008f8c:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 8008f90:	4894      	ldr	r0, [pc, #592]	@ (80091e4 <UART_SetConfig+0x340>)
 8008f92:	f7f7 ff59 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	f023 030c 	bic.w	r3, r3, #12
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d103      	bne.n	8008faa <UART_SetConfig+0x106>
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <UART_SetConfig+0x110>
 8008faa:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 8008fae:	488d      	ldr	r0, [pc, #564]	@ (80091e4 <UART_SetConfig+0x340>)
 8008fb0:	f7f7 ff4a 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d013      	beq.n	8008fe4 <UART_SetConfig+0x140>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc4:	d00e      	beq.n	8008fe4 <UART_SetConfig+0x140>
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fce:	d009      	beq.n	8008fe4 <UART_SetConfig+0x140>
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fd8:	d004      	beq.n	8008fe4 <UART_SetConfig+0x140>
 8008fda:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 8008fde:	4881      	ldr	r0, [pc, #516]	@ (80091e4 <UART_SetConfig+0x340>)
 8008fe0:	f7f7 ff32 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d009      	beq.n	8009000 <UART_SetConfig+0x15c>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ff4:	d004      	beq.n	8009000 <UART_SetConfig+0x15c>
 8008ff6:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8008ffa:	487a      	ldr	r0, [pc, #488]	@ (80091e4 <UART_SetConfig+0x340>)
 8008ffc:	f7f7 ff24 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d030      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900c:	2b01      	cmp	r3, #1
 800900e:	d02c      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009014:	2b02      	cmp	r3, #2
 8009016:	d028      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	2b03      	cmp	r3, #3
 800901e:	d024      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009024:	2b04      	cmp	r3, #4
 8009026:	d020      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	2b05      	cmp	r3, #5
 800902e:	d01c      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009034:	2b06      	cmp	r3, #6
 8009036:	d018      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	2b07      	cmp	r3, #7
 800903e:	d014      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009044:	2b08      	cmp	r3, #8
 8009046:	d010      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904c:	2b09      	cmp	r3, #9
 800904e:	d00c      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	2b0a      	cmp	r3, #10
 8009056:	d008      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905c:	2b0b      	cmp	r3, #11
 800905e:	d004      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009060:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 8009064:	485f      	ldr	r0, [pc, #380]	@ (80091e4 <UART_SetConfig+0x340>)
 8009066:	f7f7 feef 	bl	8000e48 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	431a      	orrs	r2, r3
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	431a      	orrs	r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	4313      	orrs	r3, r2
 8009080:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	4b57      	ldr	r3, [pc, #348]	@ (80091e8 <UART_SetConfig+0x344>)
 800908a:	4013      	ands	r3, r2
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009092:	430b      	orrs	r3, r1
 8009094:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a4d      	ldr	r2, [pc, #308]	@ (80091ec <UART_SetConfig+0x348>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d004      	beq.n	80090c6 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090c2:	4313      	orrs	r3, r2
 80090c4:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	4b48      	ldr	r3, [pc, #288]	@ (80091f0 <UART_SetConfig+0x34c>)
 80090ce:	4013      	ands	r3, r2
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090d6:	430b      	orrs	r3, r1
 80090d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	f023 010f 	bic.w	r1, r3, #15
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a3f      	ldr	r2, [pc, #252]	@ (80091f4 <UART_SetConfig+0x350>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	f040 8084 	bne.w	8009204 <UART_SetConfig+0x360>
 80090fc:	4b3e      	ldr	r3, [pc, #248]	@ (80091f8 <UART_SetConfig+0x354>)
 80090fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009100:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009104:	2b28      	cmp	r3, #40	@ 0x28
 8009106:	d879      	bhi.n	80091fc <UART_SetConfig+0x358>
 8009108:	a201      	add	r2, pc, #4	@ (adr r2, 8009110 <UART_SetConfig+0x26c>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	080091b5 	.word	0x080091b5
 8009114:	080091fd 	.word	0x080091fd
 8009118:	080091fd 	.word	0x080091fd
 800911c:	080091fd 	.word	0x080091fd
 8009120:	080091fd 	.word	0x080091fd
 8009124:	080091fd 	.word	0x080091fd
 8009128:	080091fd 	.word	0x080091fd
 800912c:	080091fd 	.word	0x080091fd
 8009130:	080091bd 	.word	0x080091bd
 8009134:	080091fd 	.word	0x080091fd
 8009138:	080091fd 	.word	0x080091fd
 800913c:	080091fd 	.word	0x080091fd
 8009140:	080091fd 	.word	0x080091fd
 8009144:	080091fd 	.word	0x080091fd
 8009148:	080091fd 	.word	0x080091fd
 800914c:	080091fd 	.word	0x080091fd
 8009150:	080091c5 	.word	0x080091c5
 8009154:	080091fd 	.word	0x080091fd
 8009158:	080091fd 	.word	0x080091fd
 800915c:	080091fd 	.word	0x080091fd
 8009160:	080091fd 	.word	0x080091fd
 8009164:	080091fd 	.word	0x080091fd
 8009168:	080091fd 	.word	0x080091fd
 800916c:	080091fd 	.word	0x080091fd
 8009170:	080091cd 	.word	0x080091cd
 8009174:	080091fd 	.word	0x080091fd
 8009178:	080091fd 	.word	0x080091fd
 800917c:	080091fd 	.word	0x080091fd
 8009180:	080091fd 	.word	0x080091fd
 8009184:	080091fd 	.word	0x080091fd
 8009188:	080091fd 	.word	0x080091fd
 800918c:	080091fd 	.word	0x080091fd
 8009190:	080091d5 	.word	0x080091d5
 8009194:	080091fd 	.word	0x080091fd
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080091fd 	.word	0x080091fd
 80091a0:	080091fd 	.word	0x080091fd
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	080091dd 	.word	0x080091dd
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ba:	e22a      	b.n	8009612 <UART_SetConfig+0x76e>
 80091bc:	2304      	movs	r3, #4
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c2:	e226      	b.n	8009612 <UART_SetConfig+0x76e>
 80091c4:	2308      	movs	r3, #8
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e222      	b.n	8009612 <UART_SetConfig+0x76e>
 80091cc:	2310      	movs	r3, #16
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e21e      	b.n	8009612 <UART_SetConfig+0x76e>
 80091d4:	2320      	movs	r3, #32
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e21a      	b.n	8009612 <UART_SetConfig+0x76e>
 80091dc:	2340      	movs	r3, #64	@ 0x40
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e2:	e216      	b.n	8009612 <UART_SetConfig+0x76e>
 80091e4:	0800a778 	.word	0x0800a778
 80091e8:	cfff69f3 	.word	0xcfff69f3
 80091ec:	58000c00 	.word	0x58000c00
 80091f0:	11fff4ff 	.word	0x11fff4ff
 80091f4:	40011000 	.word	0x40011000
 80091f8:	58024400 	.word	0x58024400
 80091fc:	2380      	movs	r3, #128	@ 0x80
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e206      	b.n	8009612 <UART_SetConfig+0x76e>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4ac3      	ldr	r2, [pc, #780]	@ (8009518 <UART_SetConfig+0x674>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d130      	bne.n	8009270 <UART_SetConfig+0x3cc>
 800920e:	4bc3      	ldr	r3, [pc, #780]	@ (800951c <UART_SetConfig+0x678>)
 8009210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	2b05      	cmp	r3, #5
 8009218:	d826      	bhi.n	8009268 <UART_SetConfig+0x3c4>
 800921a:	a201      	add	r2, pc, #4	@ (adr r2, 8009220 <UART_SetConfig+0x37c>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	08009239 	.word	0x08009239
 8009224:	08009241 	.word	0x08009241
 8009228:	08009249 	.word	0x08009249
 800922c:	08009251 	.word	0x08009251
 8009230:	08009259 	.word	0x08009259
 8009234:	08009261 	.word	0x08009261
 8009238:	2300      	movs	r3, #0
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e1e8      	b.n	8009612 <UART_SetConfig+0x76e>
 8009240:	2304      	movs	r3, #4
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e1e4      	b.n	8009612 <UART_SetConfig+0x76e>
 8009248:	2308      	movs	r3, #8
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924e:	e1e0      	b.n	8009612 <UART_SetConfig+0x76e>
 8009250:	2310      	movs	r3, #16
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009256:	e1dc      	b.n	8009612 <UART_SetConfig+0x76e>
 8009258:	2320      	movs	r3, #32
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e1d8      	b.n	8009612 <UART_SetConfig+0x76e>
 8009260:	2340      	movs	r3, #64	@ 0x40
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e1d4      	b.n	8009612 <UART_SetConfig+0x76e>
 8009268:	2380      	movs	r3, #128	@ 0x80
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e1d0      	b.n	8009612 <UART_SetConfig+0x76e>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4aaa      	ldr	r2, [pc, #680]	@ (8009520 <UART_SetConfig+0x67c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d130      	bne.n	80092dc <UART_SetConfig+0x438>
 800927a:	4ba8      	ldr	r3, [pc, #672]	@ (800951c <UART_SetConfig+0x678>)
 800927c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	2b05      	cmp	r3, #5
 8009284:	d826      	bhi.n	80092d4 <UART_SetConfig+0x430>
 8009286:	a201      	add	r2, pc, #4	@ (adr r2, 800928c <UART_SetConfig+0x3e8>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	080092a5 	.word	0x080092a5
 8009290:	080092ad 	.word	0x080092ad
 8009294:	080092b5 	.word	0x080092b5
 8009298:	080092bd 	.word	0x080092bd
 800929c:	080092c5 	.word	0x080092c5
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e1b2      	b.n	8009612 <UART_SetConfig+0x76e>
 80092ac:	2304      	movs	r3, #4
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e1ae      	b.n	8009612 <UART_SetConfig+0x76e>
 80092b4:	2308      	movs	r3, #8
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ba:	e1aa      	b.n	8009612 <UART_SetConfig+0x76e>
 80092bc:	2310      	movs	r3, #16
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e1a6      	b.n	8009612 <UART_SetConfig+0x76e>
 80092c4:	2320      	movs	r3, #32
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e1a2      	b.n	8009612 <UART_SetConfig+0x76e>
 80092cc:	2340      	movs	r3, #64	@ 0x40
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d2:	e19e      	b.n	8009612 <UART_SetConfig+0x76e>
 80092d4:	2380      	movs	r3, #128	@ 0x80
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e19a      	b.n	8009612 <UART_SetConfig+0x76e>
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a90      	ldr	r2, [pc, #576]	@ (8009524 <UART_SetConfig+0x680>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d130      	bne.n	8009348 <UART_SetConfig+0x4a4>
 80092e6:	4b8d      	ldr	r3, [pc, #564]	@ (800951c <UART_SetConfig+0x678>)
 80092e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ea:	f003 0307 	and.w	r3, r3, #7
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d826      	bhi.n	8009340 <UART_SetConfig+0x49c>
 80092f2:	a201      	add	r2, pc, #4	@ (adr r2, 80092f8 <UART_SetConfig+0x454>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009311 	.word	0x08009311
 80092fc:	08009319 	.word	0x08009319
 8009300:	08009321 	.word	0x08009321
 8009304:	08009329 	.word	0x08009329
 8009308:	08009331 	.word	0x08009331
 800930c:	08009339 	.word	0x08009339
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e17c      	b.n	8009612 <UART_SetConfig+0x76e>
 8009318:	2304      	movs	r3, #4
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931e:	e178      	b.n	8009612 <UART_SetConfig+0x76e>
 8009320:	2308      	movs	r3, #8
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009326:	e174      	b.n	8009612 <UART_SetConfig+0x76e>
 8009328:	2310      	movs	r3, #16
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e170      	b.n	8009612 <UART_SetConfig+0x76e>
 8009330:	2320      	movs	r3, #32
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e16c      	b.n	8009612 <UART_SetConfig+0x76e>
 8009338:	2340      	movs	r3, #64	@ 0x40
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e168      	b.n	8009612 <UART_SetConfig+0x76e>
 8009340:	2380      	movs	r3, #128	@ 0x80
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e164      	b.n	8009612 <UART_SetConfig+0x76e>
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a76      	ldr	r2, [pc, #472]	@ (8009528 <UART_SetConfig+0x684>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d130      	bne.n	80093b4 <UART_SetConfig+0x510>
 8009352:	4b72      	ldr	r3, [pc, #456]	@ (800951c <UART_SetConfig+0x678>)
 8009354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b05      	cmp	r3, #5
 800935c:	d826      	bhi.n	80093ac <UART_SetConfig+0x508>
 800935e:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <UART_SetConfig+0x4c0>)
 8009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009364:	0800937d 	.word	0x0800937d
 8009368:	08009385 	.word	0x08009385
 800936c:	0800938d 	.word	0x0800938d
 8009370:	08009395 	.word	0x08009395
 8009374:	0800939d 	.word	0x0800939d
 8009378:	080093a5 	.word	0x080093a5
 800937c:	2300      	movs	r3, #0
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e146      	b.n	8009612 <UART_SetConfig+0x76e>
 8009384:	2304      	movs	r3, #4
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e142      	b.n	8009612 <UART_SetConfig+0x76e>
 800938c:	2308      	movs	r3, #8
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e13e      	b.n	8009612 <UART_SetConfig+0x76e>
 8009394:	2310      	movs	r3, #16
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e13a      	b.n	8009612 <UART_SetConfig+0x76e>
 800939c:	2320      	movs	r3, #32
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e136      	b.n	8009612 <UART_SetConfig+0x76e>
 80093a4:	2340      	movs	r3, #64	@ 0x40
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e132      	b.n	8009612 <UART_SetConfig+0x76e>
 80093ac:	2380      	movs	r3, #128	@ 0x80
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e12e      	b.n	8009612 <UART_SetConfig+0x76e>
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a5c      	ldr	r2, [pc, #368]	@ (800952c <UART_SetConfig+0x688>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d176      	bne.n	80094ac <UART_SetConfig+0x608>
 80093be:	4b57      	ldr	r3, [pc, #348]	@ (800951c <UART_SetConfig+0x678>)
 80093c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093c6:	2b28      	cmp	r3, #40	@ 0x28
 80093c8:	d86c      	bhi.n	80094a4 <UART_SetConfig+0x600>
 80093ca:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <UART_SetConfig+0x52c>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009475 	.word	0x08009475
 80093d4:	080094a5 	.word	0x080094a5
 80093d8:	080094a5 	.word	0x080094a5
 80093dc:	080094a5 	.word	0x080094a5
 80093e0:	080094a5 	.word	0x080094a5
 80093e4:	080094a5 	.word	0x080094a5
 80093e8:	080094a5 	.word	0x080094a5
 80093ec:	080094a5 	.word	0x080094a5
 80093f0:	0800947d 	.word	0x0800947d
 80093f4:	080094a5 	.word	0x080094a5
 80093f8:	080094a5 	.word	0x080094a5
 80093fc:	080094a5 	.word	0x080094a5
 8009400:	080094a5 	.word	0x080094a5
 8009404:	080094a5 	.word	0x080094a5
 8009408:	080094a5 	.word	0x080094a5
 800940c:	080094a5 	.word	0x080094a5
 8009410:	08009485 	.word	0x08009485
 8009414:	080094a5 	.word	0x080094a5
 8009418:	080094a5 	.word	0x080094a5
 800941c:	080094a5 	.word	0x080094a5
 8009420:	080094a5 	.word	0x080094a5
 8009424:	080094a5 	.word	0x080094a5
 8009428:	080094a5 	.word	0x080094a5
 800942c:	080094a5 	.word	0x080094a5
 8009430:	0800948d 	.word	0x0800948d
 8009434:	080094a5 	.word	0x080094a5
 8009438:	080094a5 	.word	0x080094a5
 800943c:	080094a5 	.word	0x080094a5
 8009440:	080094a5 	.word	0x080094a5
 8009444:	080094a5 	.word	0x080094a5
 8009448:	080094a5 	.word	0x080094a5
 800944c:	080094a5 	.word	0x080094a5
 8009450:	08009495 	.word	0x08009495
 8009454:	080094a5 	.word	0x080094a5
 8009458:	080094a5 	.word	0x080094a5
 800945c:	080094a5 	.word	0x080094a5
 8009460:	080094a5 	.word	0x080094a5
 8009464:	080094a5 	.word	0x080094a5
 8009468:	080094a5 	.word	0x080094a5
 800946c:	080094a5 	.word	0x080094a5
 8009470:	0800949d 	.word	0x0800949d
 8009474:	2301      	movs	r3, #1
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e0ca      	b.n	8009612 <UART_SetConfig+0x76e>
 800947c:	2304      	movs	r3, #4
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e0c6      	b.n	8009612 <UART_SetConfig+0x76e>
 8009484:	2308      	movs	r3, #8
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e0c2      	b.n	8009612 <UART_SetConfig+0x76e>
 800948c:	2310      	movs	r3, #16
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e0be      	b.n	8009612 <UART_SetConfig+0x76e>
 8009494:	2320      	movs	r3, #32
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e0ba      	b.n	8009612 <UART_SetConfig+0x76e>
 800949c:	2340      	movs	r3, #64	@ 0x40
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e0b6      	b.n	8009612 <UART_SetConfig+0x76e>
 80094a4:	2380      	movs	r3, #128	@ 0x80
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e0b2      	b.n	8009612 <UART_SetConfig+0x76e>
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a1f      	ldr	r2, [pc, #124]	@ (8009530 <UART_SetConfig+0x68c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d13e      	bne.n	8009534 <UART_SetConfig+0x690>
 80094b6:	4b19      	ldr	r3, [pc, #100]	@ (800951c <UART_SetConfig+0x678>)
 80094b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d826      	bhi.n	8009510 <UART_SetConfig+0x66c>
 80094c2:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <UART_SetConfig+0x624>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094e1 	.word	0x080094e1
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094f1 	.word	0x080094f1
 80094d4:	080094f9 	.word	0x080094f9
 80094d8:	08009501 	.word	0x08009501
 80094dc:	08009509 	.word	0x08009509
 80094e0:	2300      	movs	r3, #0
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e094      	b.n	8009612 <UART_SetConfig+0x76e>
 80094e8:	2304      	movs	r3, #4
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e090      	b.n	8009612 <UART_SetConfig+0x76e>
 80094f0:	2308      	movs	r3, #8
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e08c      	b.n	8009612 <UART_SetConfig+0x76e>
 80094f8:	2310      	movs	r3, #16
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e088      	b.n	8009612 <UART_SetConfig+0x76e>
 8009500:	2320      	movs	r3, #32
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e084      	b.n	8009612 <UART_SetConfig+0x76e>
 8009508:	2340      	movs	r3, #64	@ 0x40
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e080      	b.n	8009612 <UART_SetConfig+0x76e>
 8009510:	2380      	movs	r3, #128	@ 0x80
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e07c      	b.n	8009612 <UART_SetConfig+0x76e>
 8009518:	40004400 	.word	0x40004400
 800951c:	58024400 	.word	0x58024400
 8009520:	40004800 	.word	0x40004800
 8009524:	40004c00 	.word	0x40004c00
 8009528:	40005000 	.word	0x40005000
 800952c:	40011400 	.word	0x40011400
 8009530:	40007800 	.word	0x40007800
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4aae      	ldr	r2, [pc, #696]	@ (80097f4 <UART_SetConfig+0x950>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d130      	bne.n	80095a0 <UART_SetConfig+0x6fc>
 800953e:	4bae      	ldr	r3, [pc, #696]	@ (80097f8 <UART_SetConfig+0x954>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b05      	cmp	r3, #5
 8009548:	d826      	bhi.n	8009598 <UART_SetConfig+0x6f4>
 800954a:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <UART_SetConfig+0x6ac>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009569 	.word	0x08009569
 8009554:	08009571 	.word	0x08009571
 8009558:	08009579 	.word	0x08009579
 800955c:	08009581 	.word	0x08009581
 8009560:	08009589 	.word	0x08009589
 8009564:	08009591 	.word	0x08009591
 8009568:	2300      	movs	r3, #0
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e050      	b.n	8009612 <UART_SetConfig+0x76e>
 8009570:	2304      	movs	r3, #4
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e04c      	b.n	8009612 <UART_SetConfig+0x76e>
 8009578:	2308      	movs	r3, #8
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e048      	b.n	8009612 <UART_SetConfig+0x76e>
 8009580:	2310      	movs	r3, #16
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e044      	b.n	8009612 <UART_SetConfig+0x76e>
 8009588:	2320      	movs	r3, #32
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e040      	b.n	8009612 <UART_SetConfig+0x76e>
 8009590:	2340      	movs	r3, #64	@ 0x40
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e03c      	b.n	8009612 <UART_SetConfig+0x76e>
 8009598:	2380      	movs	r3, #128	@ 0x80
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e038      	b.n	8009612 <UART_SetConfig+0x76e>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a95      	ldr	r2, [pc, #596]	@ (80097fc <UART_SetConfig+0x958>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d130      	bne.n	800960c <UART_SetConfig+0x768>
 80095aa:	4b93      	ldr	r3, [pc, #588]	@ (80097f8 <UART_SetConfig+0x954>)
 80095ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	d826      	bhi.n	8009604 <UART_SetConfig+0x760>
 80095b6:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <UART_SetConfig+0x718>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095d5 	.word	0x080095d5
 80095c0:	080095dd 	.word	0x080095dd
 80095c4:	080095e5 	.word	0x080095e5
 80095c8:	080095ed 	.word	0x080095ed
 80095cc:	080095f5 	.word	0x080095f5
 80095d0:	080095fd 	.word	0x080095fd
 80095d4:	2302      	movs	r3, #2
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e01a      	b.n	8009612 <UART_SetConfig+0x76e>
 80095dc:	2304      	movs	r3, #4
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e016      	b.n	8009612 <UART_SetConfig+0x76e>
 80095e4:	2308      	movs	r3, #8
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e012      	b.n	8009612 <UART_SetConfig+0x76e>
 80095ec:	2310      	movs	r3, #16
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e00e      	b.n	8009612 <UART_SetConfig+0x76e>
 80095f4:	2320      	movs	r3, #32
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e00a      	b.n	8009612 <UART_SetConfig+0x76e>
 80095fc:	2340      	movs	r3, #64	@ 0x40
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e006      	b.n	8009612 <UART_SetConfig+0x76e>
 8009604:	2380      	movs	r3, #128	@ 0x80
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e002      	b.n	8009612 <UART_SetConfig+0x76e>
 800960c:	2380      	movs	r3, #128	@ 0x80
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a79      	ldr	r2, [pc, #484]	@ (80097fc <UART_SetConfig+0x958>)
 8009618:	4293      	cmp	r3, r2
 800961a:	f040 80f7 	bne.w	800980c <UART_SetConfig+0x968>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800961e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009622:	2b20      	cmp	r3, #32
 8009624:	dc46      	bgt.n	80096b4 <UART_SetConfig+0x810>
 8009626:	2b02      	cmp	r3, #2
 8009628:	db75      	blt.n	8009716 <UART_SetConfig+0x872>
 800962a:	3b02      	subs	r3, #2
 800962c:	2b1e      	cmp	r3, #30
 800962e:	d872      	bhi.n	8009716 <UART_SetConfig+0x872>
 8009630:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x794>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	080096bb 	.word	0x080096bb
 800963c:	08009717 	.word	0x08009717
 8009640:	080096c3 	.word	0x080096c3
 8009644:	08009717 	.word	0x08009717
 8009648:	08009717 	.word	0x08009717
 800964c:	08009717 	.word	0x08009717
 8009650:	080096d3 	.word	0x080096d3
 8009654:	08009717 	.word	0x08009717
 8009658:	08009717 	.word	0x08009717
 800965c:	08009717 	.word	0x08009717
 8009660:	08009717 	.word	0x08009717
 8009664:	08009717 	.word	0x08009717
 8009668:	08009717 	.word	0x08009717
 800966c:	08009717 	.word	0x08009717
 8009670:	080096e3 	.word	0x080096e3
 8009674:	08009717 	.word	0x08009717
 8009678:	08009717 	.word	0x08009717
 800967c:	08009717 	.word	0x08009717
 8009680:	08009717 	.word	0x08009717
 8009684:	08009717 	.word	0x08009717
 8009688:	08009717 	.word	0x08009717
 800968c:	08009717 	.word	0x08009717
 8009690:	08009717 	.word	0x08009717
 8009694:	08009717 	.word	0x08009717
 8009698:	08009717 	.word	0x08009717
 800969c:	08009717 	.word	0x08009717
 80096a0:	08009717 	.word	0x08009717
 80096a4:	08009717 	.word	0x08009717
 80096a8:	08009717 	.word	0x08009717
 80096ac:	08009717 	.word	0x08009717
 80096b0:	08009709 	.word	0x08009709
 80096b4:	2b40      	cmp	r3, #64	@ 0x40
 80096b6:	d02a      	beq.n	800970e <UART_SetConfig+0x86a>
 80096b8:	e02d      	b.n	8009716 <UART_SetConfig+0x872>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096ba:	f7fe f849 	bl	8007750 <HAL_RCCEx_GetD3PCLK1Freq>
 80096be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096c0:	e02f      	b.n	8009722 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe f858 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d0:	e027      	b.n	8009722 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d2:	f107 0318 	add.w	r3, r7, #24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe f9a4 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e01f      	b.n	8009722 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096e2:	4b45      	ldr	r3, [pc, #276]	@ (80097f8 <UART_SetConfig+0x954>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <UART_SetConfig+0x85e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ee:	4b42      	ldr	r3, [pc, #264]	@ (80097f8 <UART_SetConfig+0x954>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	08db      	lsrs	r3, r3, #3
 80096f4:	f003 0303 	and.w	r3, r3, #3
 80096f8:	4a41      	ldr	r2, [pc, #260]	@ (8009800 <UART_SetConfig+0x95c>)
 80096fa:	fa22 f303 	lsr.w	r3, r2, r3
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009700:	e00f      	b.n	8009722 <UART_SetConfig+0x87e>
          pclk = (uint32_t) HSI_VALUE;
 8009702:	4b3f      	ldr	r3, [pc, #252]	@ (8009800 <UART_SetConfig+0x95c>)
 8009704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009706:	e00c      	b.n	8009722 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009708:	4b3e      	ldr	r3, [pc, #248]	@ (8009804 <UART_SetConfig+0x960>)
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970c:	e009      	b.n	8009722 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800970e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009714:	e005      	b.n	8009722 <UART_SetConfig+0x87e>
      default:
        pclk = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 81e3 	beq.w	8009af0 <UART_SetConfig+0xc4c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972e:	4a36      	ldr	r2, [pc, #216]	@ (8009808 <UART_SetConfig+0x964>)
 8009730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009734:	461a      	mov	r2, r3
 8009736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009738:	fbb3 f3f2 	udiv	r3, r3, r2
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	4413      	add	r3, r2
 8009748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974a:	429a      	cmp	r2, r3
 800974c:	d305      	bcc.n	800975a <UART_SetConfig+0x8b6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009756:	429a      	cmp	r2, r3
 8009758:	d903      	bls.n	8009762 <UART_SetConfig+0x8be>
      {
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009760:	e1c6      	b.n	8009af0 <UART_SetConfig+0xc4c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	2200      	movs	r2, #0
 8009766:	60bb      	str	r3, [r7, #8]
 8009768:	60fa      	str	r2, [r7, #12]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976e:	4a26      	ldr	r2, [pc, #152]	@ (8009808 <UART_SetConfig+0x964>)
 8009770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009774:	b29b      	uxth	r3, r3
 8009776:	2200      	movs	r2, #0
 8009778:	603b      	str	r3, [r7, #0]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009784:	f7f6 fda8 	bl	80002d8 <__aeabi_uldivmod>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4610      	mov	r0, r2
 800978e:	4619      	mov	r1, r3
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	020b      	lsls	r3, r1, #8
 800979a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800979e:	0202      	lsls	r2, r0, #8
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	6849      	ldr	r1, [r1, #4]
 80097a4:	0849      	lsrs	r1, r1, #1
 80097a6:	2000      	movs	r0, #0
 80097a8:	460c      	mov	r4, r1
 80097aa:	4605      	mov	r5, r0
 80097ac:	eb12 0804 	adds.w	r8, r2, r4
 80097b0:	eb43 0905 	adc.w	r9, r3, r5
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	469a      	mov	sl, r3
 80097bc:	4693      	mov	fp, r2
 80097be:	4652      	mov	r2, sl
 80097c0:	465b      	mov	r3, fp
 80097c2:	4640      	mov	r0, r8
 80097c4:	4649      	mov	r1, r9
 80097c6:	f7f6 fd87 	bl	80002d8 <__aeabi_uldivmod>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4613      	mov	r3, r2
 80097d0:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097d8:	d308      	bcc.n	80097ec <UART_SetConfig+0x948>
 80097da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097e0:	d204      	bcs.n	80097ec <UART_SetConfig+0x948>
        {
          huart->Instance->BRR = usartdiv;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097e8:	60da      	str	r2, [r3, #12]
 80097ea:	e181      	b.n	8009af0 <UART_SetConfig+0xc4c>
        }
        else
        {
          ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097f2:	e17d      	b.n	8009af0 <UART_SetConfig+0xc4c>
 80097f4:	40007c00 	.word	0x40007c00
 80097f8:	58024400 	.word	0x58024400
 80097fc:	58000c00 	.word	0x58000c00
 8009800:	03d09000 	.word	0x03d09000
 8009804:	003d0900 	.word	0x003d0900
 8009808:	0800a800 	.word	0x0800a800
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009814:	f040 80be 	bne.w	8009994 <UART_SetConfig+0xaf0>
  {
    switch (clocksource)
 8009818:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800981c:	2b20      	cmp	r3, #32
 800981e:	dc49      	bgt.n	80098b4 <UART_SetConfig+0xa10>
 8009820:	2b00      	cmp	r3, #0
 8009822:	db7c      	blt.n	800991e <UART_SetConfig+0xa7a>
 8009824:	2b20      	cmp	r3, #32
 8009826:	d87a      	bhi.n	800991e <UART_SetConfig+0xa7a>
 8009828:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x98c>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	080098bb 	.word	0x080098bb
 8009834:	080098c3 	.word	0x080098c3
 8009838:	0800991f 	.word	0x0800991f
 800983c:	0800991f 	.word	0x0800991f
 8009840:	080098cb 	.word	0x080098cb
 8009844:	0800991f 	.word	0x0800991f
 8009848:	0800991f 	.word	0x0800991f
 800984c:	0800991f 	.word	0x0800991f
 8009850:	080098db 	.word	0x080098db
 8009854:	0800991f 	.word	0x0800991f
 8009858:	0800991f 	.word	0x0800991f
 800985c:	0800991f 	.word	0x0800991f
 8009860:	0800991f 	.word	0x0800991f
 8009864:	0800991f 	.word	0x0800991f
 8009868:	0800991f 	.word	0x0800991f
 800986c:	0800991f 	.word	0x0800991f
 8009870:	080098eb 	.word	0x080098eb
 8009874:	0800991f 	.word	0x0800991f
 8009878:	0800991f 	.word	0x0800991f
 800987c:	0800991f 	.word	0x0800991f
 8009880:	0800991f 	.word	0x0800991f
 8009884:	0800991f 	.word	0x0800991f
 8009888:	0800991f 	.word	0x0800991f
 800988c:	0800991f 	.word	0x0800991f
 8009890:	0800991f 	.word	0x0800991f
 8009894:	0800991f 	.word	0x0800991f
 8009898:	0800991f 	.word	0x0800991f
 800989c:	0800991f 	.word	0x0800991f
 80098a0:	0800991f 	.word	0x0800991f
 80098a4:	0800991f 	.word	0x0800991f
 80098a8:	0800991f 	.word	0x0800991f
 80098ac:	0800991f 	.word	0x0800991f
 80098b0:	08009911 	.word	0x08009911
 80098b4:	2b40      	cmp	r3, #64	@ 0x40
 80098b6:	d02e      	beq.n	8009916 <UART_SetConfig+0xa72>
 80098b8:	e031      	b.n	800991e <UART_SetConfig+0xa7a>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098ba:	f7fb fc6d 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 80098be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098c0:	e033      	b.n	800992a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c2:	f7fb fc7f 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 80098c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098c8:	e02f      	b.n	800992a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd ff54 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d8:	e027      	b.n	800992a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098da:	f107 0318 	add.w	r3, r7, #24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f8a0 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e8:	e01f      	b.n	800992a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ea:	4b8c      	ldr	r3, [pc, #560]	@ (8009b1c <UART_SetConfig+0xc78>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d009      	beq.n	800990a <UART_SetConfig+0xa66>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098f6:	4b89      	ldr	r3, [pc, #548]	@ (8009b1c <UART_SetConfig+0xc78>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	08db      	lsrs	r3, r3, #3
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	4a87      	ldr	r2, [pc, #540]	@ (8009b20 <UART_SetConfig+0xc7c>)
 8009902:	fa22 f303 	lsr.w	r3, r2, r3
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009908:	e00f      	b.n	800992a <UART_SetConfig+0xa86>
          pclk = (uint32_t) HSI_VALUE;
 800990a:	4b85      	ldr	r3, [pc, #532]	@ (8009b20 <UART_SetConfig+0xc7c>)
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990e:	e00c      	b.n	800992a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009910:	4b84      	ldr	r3, [pc, #528]	@ (8009b24 <UART_SetConfig+0xc80>)
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009914:	e009      	b.n	800992a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991c:	e005      	b.n	800992a <UART_SetConfig+0xa86>
      default:
        pclk = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009928:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800992a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 80df 	beq.w	8009af0 <UART_SetConfig+0xc4c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009936:	4a7c      	ldr	r2, [pc, #496]	@ (8009b28 <UART_SetConfig+0xc84>)
 8009938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993c:	461a      	mov	r2, r3
 800993e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009940:	fbb3 f3f2 	udiv	r3, r3, r2
 8009944:	005a      	lsls	r2, r3, #1
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	441a      	add	r2, r3
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	2b0f      	cmp	r3, #15
 800995c:	d916      	bls.n	800998c <UART_SetConfig+0xae8>
 800995e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009964:	d212      	bcs.n	800998c <UART_SetConfig+0xae8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	b29b      	uxth	r3, r3
 800996a:	f023 030f 	bic.w	r3, r3, #15
 800996e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	085b      	lsrs	r3, r3, #1
 8009974:	b29b      	uxth	r3, r3
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	b29a      	uxth	r2, r3
 800997c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800997e:	4313      	orrs	r3, r2
 8009980:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009988:	60da      	str	r2, [r3, #12]
 800998a:	e0b1      	b.n	8009af0 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009992:	e0ad      	b.n	8009af0 <UART_SetConfig+0xc4c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009994:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009998:	2b20      	cmp	r3, #32
 800999a:	dc49      	bgt.n	8009a30 <UART_SetConfig+0xb8c>
 800999c:	2b00      	cmp	r3, #0
 800999e:	db7c      	blt.n	8009a9a <UART_SetConfig+0xbf6>
 80099a0:	2b20      	cmp	r3, #32
 80099a2:	d87a      	bhi.n	8009a9a <UART_SetConfig+0xbf6>
 80099a4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ac <UART_SetConfig+0xb08>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	08009a37 	.word	0x08009a37
 80099b0:	08009a3f 	.word	0x08009a3f
 80099b4:	08009a9b 	.word	0x08009a9b
 80099b8:	08009a9b 	.word	0x08009a9b
 80099bc:	08009a47 	.word	0x08009a47
 80099c0:	08009a9b 	.word	0x08009a9b
 80099c4:	08009a9b 	.word	0x08009a9b
 80099c8:	08009a9b 	.word	0x08009a9b
 80099cc:	08009a57 	.word	0x08009a57
 80099d0:	08009a9b 	.word	0x08009a9b
 80099d4:	08009a9b 	.word	0x08009a9b
 80099d8:	08009a9b 	.word	0x08009a9b
 80099dc:	08009a9b 	.word	0x08009a9b
 80099e0:	08009a9b 	.word	0x08009a9b
 80099e4:	08009a9b 	.word	0x08009a9b
 80099e8:	08009a9b 	.word	0x08009a9b
 80099ec:	08009a67 	.word	0x08009a67
 80099f0:	08009a9b 	.word	0x08009a9b
 80099f4:	08009a9b 	.word	0x08009a9b
 80099f8:	08009a9b 	.word	0x08009a9b
 80099fc:	08009a9b 	.word	0x08009a9b
 8009a00:	08009a9b 	.word	0x08009a9b
 8009a04:	08009a9b 	.word	0x08009a9b
 8009a08:	08009a9b 	.word	0x08009a9b
 8009a0c:	08009a9b 	.word	0x08009a9b
 8009a10:	08009a9b 	.word	0x08009a9b
 8009a14:	08009a9b 	.word	0x08009a9b
 8009a18:	08009a9b 	.word	0x08009a9b
 8009a1c:	08009a9b 	.word	0x08009a9b
 8009a20:	08009a9b 	.word	0x08009a9b
 8009a24:	08009a9b 	.word	0x08009a9b
 8009a28:	08009a9b 	.word	0x08009a9b
 8009a2c:	08009a8d 	.word	0x08009a8d
 8009a30:	2b40      	cmp	r3, #64	@ 0x40
 8009a32:	d02e      	beq.n	8009a92 <UART_SetConfig+0xbee>
 8009a34:	e031      	b.n	8009a9a <UART_SetConfig+0xbf6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a36:	f7fb fbaf 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 8009a3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a3c:	e033      	b.n	8009aa6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a3e:	f7fb fbc1 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8009a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a44:	e02f      	b.n	8009aa6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fd fe96 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a54:	e027      	b.n	8009aa6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a56:	f107 0318 	add.w	r3, r7, #24
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd ffe2 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a64:	e01f      	b.n	8009aa6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a66:	4b2d      	ldr	r3, [pc, #180]	@ (8009b1c <UART_SetConfig+0xc78>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d009      	beq.n	8009a86 <UART_SetConfig+0xbe2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a72:	4b2a      	ldr	r3, [pc, #168]	@ (8009b1c <UART_SetConfig+0xc78>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	08db      	lsrs	r3, r3, #3
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	4a28      	ldr	r2, [pc, #160]	@ (8009b20 <UART_SetConfig+0xc7c>)
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a84:	e00f      	b.n	8009aa6 <UART_SetConfig+0xc02>
          pclk = (uint32_t) HSI_VALUE;
 8009a86:	4b26      	ldr	r3, [pc, #152]	@ (8009b20 <UART_SetConfig+0xc7c>)
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a8a:	e00c      	b.n	8009aa6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a8c:	4b25      	ldr	r3, [pc, #148]	@ (8009b24 <UART_SetConfig+0xc80>)
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a90:	e009      	b.n	8009aa6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a98:	e005      	b.n	8009aa6 <UART_SetConfig+0xc02>
      default:
        pclk = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8009aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d021      	beq.n	8009af0 <UART_SetConfig+0xc4c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b28 <UART_SetConfig+0xc84>)
 8009ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	441a      	add	r2, r3
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ace:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad2:	2b0f      	cmp	r3, #15
 8009ad4:	d909      	bls.n	8009aea <UART_SetConfig+0xc46>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009adc:	d205      	bcs.n	8009aea <UART_SetConfig+0xc46>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60da      	str	r2, [r3, #12]
 8009ae8:	e002      	b.n	8009af0 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2200      	movs	r2, #0
 8009b04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b0c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3748      	adds	r7, #72	@ 0x48
 8009b14:	46bd      	mov	sp, r7
 8009b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	03d09000 	.word	0x03d09000
 8009b24:	003d0900 	.word	0x003d0900
 8009b28:	0800a800 	.word	0x0800a800

08009b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b38:	2bff      	cmp	r3, #255	@ 0xff
 8009b3a:	d904      	bls.n	8009b46 <UART_AdvFeatureConfig+0x1a>
 8009b3c:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 8009b40:	4893      	ldr	r0, [pc, #588]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009b42:	f7f7 f981 	bl	8000e48 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d018      	beq.n	8009b84 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d009      	beq.n	8009b6e <UART_AdvFeatureConfig+0x42>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b62:	d004      	beq.n	8009b6e <UART_AdvFeatureConfig+0x42>
 8009b64:	f640 41cc 	movw	r1, #3276	@ 0xccc
 8009b68:	4889      	ldr	r0, [pc, #548]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009b6a:	f7f7 f96d 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d018      	beq.n	8009bc2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <UART_AdvFeatureConfig+0x80>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ba0:	d004      	beq.n	8009bac <UART_AdvFeatureConfig+0x80>
 8009ba2:	f640 41d3 	movw	r1, #3283	@ 0xcd3
 8009ba6:	487a      	ldr	r0, [pc, #488]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009ba8:	f7f7 f94e 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d018      	beq.n	8009c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d009      	beq.n	8009bea <UART_AdvFeatureConfig+0xbe>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bde:	d004      	beq.n	8009bea <UART_AdvFeatureConfig+0xbe>
 8009be0:	f640 41da 	movw	r1, #3290	@ 0xcda
 8009be4:	486a      	ldr	r0, [pc, #424]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009be6:	f7f7 f92f 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d018      	beq.n	8009c3e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <UART_AdvFeatureConfig+0xfc>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c1c:	d004      	beq.n	8009c28 <UART_AdvFeatureConfig+0xfc>
 8009c1e:	f640 41e1 	movw	r1, #3297	@ 0xce1
 8009c22:	485b      	ldr	r0, [pc, #364]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009c24:	f7f7 f910 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d018      	beq.n	8009c7c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <UART_AdvFeatureConfig+0x13a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5a:	d004      	beq.n	8009c66 <UART_AdvFeatureConfig+0x13a>
 8009c5c:	f640 41e8 	movw	r1, #3304	@ 0xce8
 8009c60:	484b      	ldr	r0, [pc, #300]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009c62:	f7f7 f8f1 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c80:	f003 0320 	and.w	r3, r3, #32
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d018      	beq.n	8009cba <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <UART_AdvFeatureConfig+0x178>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c98:	d004      	beq.n	8009ca4 <UART_AdvFeatureConfig+0x178>
 8009c9a:	f640 41ef 	movw	r1, #3311	@ 0xcef
 8009c9e:	483c      	ldr	r0, [pc, #240]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009ca0:	f7f7 f8d2 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 8081 	beq.w	8009dca <UART_AdvFeatureConfig+0x29e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a31      	ldr	r2, [pc, #196]	@ (8009d94 <UART_AdvFeatureConfig+0x268>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d027      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a30      	ldr	r2, [pc, #192]	@ (8009d98 <UART_AdvFeatureConfig+0x26c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d022      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8009d9c <UART_AdvFeatureConfig+0x270>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d01d      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a2d      	ldr	r2, [pc, #180]	@ (8009da0 <UART_AdvFeatureConfig+0x274>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d018      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8009da4 <UART_AdvFeatureConfig+0x278>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d013      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8009da8 <UART_AdvFeatureConfig+0x27c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00e      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a28      	ldr	r2, [pc, #160]	@ (8009dac <UART_AdvFeatureConfig+0x280>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d009      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a27      	ldr	r2, [pc, #156]	@ (8009db0 <UART_AdvFeatureConfig+0x284>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d004      	beq.n	8009d22 <UART_AdvFeatureConfig+0x1f6>
 8009d18:	f640 41f6 	movw	r1, #3318	@ 0xcf6
 8009d1c:	481c      	ldr	r0, [pc, #112]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009d1e:	f7f7 f893 	bl	8000e48 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d009      	beq.n	8009d3e <UART_AdvFeatureConfig+0x212>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d32:	d004      	beq.n	8009d3e <UART_AdvFeatureConfig+0x212>
 8009d34:	f640 41f7 	movw	r1, #3319	@ 0xcf7
 8009d38:	4815      	ldr	r0, [pc, #84]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009d3a:	f7f7 f885 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d5c:	d135      	bne.n	8009dca <UART_AdvFeatureConfig+0x29e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d026      	beq.n	8009db4 <UART_AdvFeatureConfig+0x288>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d6e:	d021      	beq.n	8009db4 <UART_AdvFeatureConfig+0x288>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d78:	d01c      	beq.n	8009db4 <UART_AdvFeatureConfig+0x288>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d82:	d017      	beq.n	8009db4 <UART_AdvFeatureConfig+0x288>
 8009d84:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 8009d88:	4801      	ldr	r0, [pc, #4]	@ (8009d90 <UART_AdvFeatureConfig+0x264>)
 8009d8a:	f7f7 f85d 	bl	8000e48 <assert_failed>
 8009d8e:	e011      	b.n	8009db4 <UART_AdvFeatureConfig+0x288>
 8009d90:	0800a778 	.word	0x0800a778
 8009d94:	40011000 	.word	0x40011000
 8009d98:	40004400 	.word	0x40004400
 8009d9c:	40004800 	.word	0x40004800
 8009da0:	40004c00 	.word	0x40004c00
 8009da4:	40005000 	.word	0x40005000
 8009da8:	40011400 	.word	0x40011400
 8009dac:	40007800 	.word	0x40007800
 8009db0:	40007c00 	.word	0x40007c00
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d018      	beq.n	8009e08 <UART_AdvFeatureConfig+0x2dc>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d009      	beq.n	8009df2 <UART_AdvFeatureConfig+0x2c6>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009de6:	d004      	beq.n	8009df2 <UART_AdvFeatureConfig+0x2c6>
 8009de8:	f640 5104 	movw	r1, #3332	@ 0xd04
 8009dec:	4808      	ldr	r0, [pc, #32]	@ (8009e10 <UART_AdvFeatureConfig+0x2e4>)
 8009dee:	f7f7 f82b 	bl	8000e48 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	605a      	str	r2, [r3, #4]
  }
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	0800a778 	.word	0x0800a778

08009e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b098      	sub	sp, #96	@ 0x60
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e24:	f7f7 fabc 	bl	80013a0 <HAL_GetTick>
 8009e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0308 	and.w	r3, r3, #8
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d12f      	bne.n	8009e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e40:	2200      	movs	r2, #0
 8009e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f88e 	bl	8009f68 <UART_WaitOnFlagUntilTimeout>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d022      	beq.n	8009e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e6      	bne.n	8009e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e063      	b.n	8009f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d149      	bne.n	8009f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f857 	bl	8009f68 <UART_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d03c      	beq.n	8009f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e6      	bne.n	8009ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f023 0301 	bic.w	r3, r3, #1
 8009f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f12:	61fa      	str	r2, [r7, #28]
 8009f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	69b9      	ldr	r1, [r7, #24]
 8009f18:	69fa      	ldr	r2, [r7, #28]
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e012      	b.n	8009f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3758      	adds	r7, #88	@ 0x58
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f78:	e04f      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f80:	d04b      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f82:	f7f7 fa0d 	bl	80013a0 <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e04e      	b.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d037      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b80      	cmp	r3, #128	@ 0x80
 8009fae:	d034      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b40      	cmp	r3, #64	@ 0x40
 8009fb4:	d031      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d110      	bne.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2208      	movs	r2, #8
 8009fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 f839 	bl	800a044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e029      	b.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ff4:	d111      	bne.n	800a01a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f81f 	bl	800a044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e00f      	b.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69da      	ldr	r2, [r3, #28]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	4013      	ands	r3, r2
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	429a      	cmp	r2, r3
 800a028:	bf0c      	ite	eq
 800a02a:	2301      	moveq	r3, #1
 800a02c:	2300      	movne	r3, #0
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	429a      	cmp	r2, r3
 800a036:	d0a0      	beq.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b095      	sub	sp, #84	@ 0x54
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a06a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a06c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e6      	bne.n	800a04c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3308      	adds	r3, #8
 800a084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	e853 3f00 	ldrex	r3, [r3]
 800a08c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	4b1e      	ldr	r3, [pc, #120]	@ (800a10c <UART_EndRxTransfer+0xc8>)
 800a092:	4013      	ands	r3, r2
 800a094:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0a6:	e841 2300 	strex	r3, r2, [r1]
 800a0aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1e5      	bne.n	800a07e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d118      	bne.n	800a0ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f023 0310 	bic.w	r3, r3, #16
 800a0ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e6      	bne.n	800a0ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a100:	bf00      	nop
 800a102:	3754      	adds	r7, #84	@ 0x54
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	effffffe 	.word	0xeffffffe

0800a110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a2e      	ldr	r2, [pc, #184]	@ (800a1d8 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d027      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a2d      	ldr	r2, [pc, #180]	@ (800a1dc <HAL_UARTEx_DisableFifoMode+0xcc>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d022      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a2b      	ldr	r2, [pc, #172]	@ (800a1e0 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01d      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e4 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d018      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a28      	ldr	r2, [pc, #160]	@ (800a1e8 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a27      	ldr	r2, [pc, #156]	@ (800a1ec <HAL_UARTEx_DisableFifoMode+0xdc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a25      	ldr	r2, [pc, #148]	@ (800a1f0 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a24      	ldr	r2, [pc, #144]	@ (800a1f4 <HAL_UARTEx_DisableFifoMode+0xe4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d004      	beq.n	800a172 <HAL_UARTEx_DisableFifoMode+0x62>
 800a168:	f240 2136 	movw	r1, #566	@ 0x236
 800a16c:	4822      	ldr	r0, [pc, #136]	@ (800a1f8 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800a16e:	f7f6 fe6b 	bl	8000e48 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_UARTEx_DisableFifoMode+0x70>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e027      	b.n	800a1d0 <HAL_UARTEx_DisableFifoMode+0xc0>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2224      	movs	r2, #36	@ 0x24
 800a18c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0201 	bic.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40011000 	.word	0x40011000
 800a1dc:	40004400 	.word	0x40004400
 800a1e0:	40004800 	.word	0x40004800
 800a1e4:	40004c00 	.word	0x40004c00
 800a1e8:	40005000 	.word	0x40005000
 800a1ec:	40011400 	.word	0x40011400
 800a1f0:	40007800 	.word	0x40007800
 800a1f4:	40007c00 	.word	0x40007c00
 800a1f8:	0800a7b4 	.word	0x0800a7b4

0800a1fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a40      	ldr	r2, [pc, #256]	@ (800a30c <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d027      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a3e      	ldr	r2, [pc, #248]	@ (800a310 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d022      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a3d      	ldr	r2, [pc, #244]	@ (800a314 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d01d      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a3b      	ldr	r2, [pc, #236]	@ (800a318 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d018      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a3a      	ldr	r2, [pc, #232]	@ (800a31c <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d013      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a38      	ldr	r2, [pc, #224]	@ (800a320 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00e      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a37      	ldr	r2, [pc, #220]	@ (800a324 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d009      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a35      	ldr	r2, [pc, #212]	@ (800a328 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a256:	f44f 7119 	mov.w	r1, #612	@ 0x264
 800a25a:	4834      	ldr	r0, [pc, #208]	@ (800a32c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a25c:	f7f6 fdf4 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d018      	beq.n	800a298 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a26c:	d014      	beq.n	800a298 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a274:	d010      	beq.n	800a298 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a27c:	d00c      	beq.n	800a298 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a284:	d008      	beq.n	800a298 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800a28c:	d004      	beq.n	800a298 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a28e:	f240 2165 	movw	r1, #613	@ 0x265
 800a292:	4826      	ldr	r0, [pc, #152]	@ (800a32c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a294:	f7f6 fdd8 	bl	8000e48 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e02d      	b.n	800a302 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2224      	movs	r2, #36	@ 0x24
 800a2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0201 	bic.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f8be 	bl	800a464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40011000 	.word	0x40011000
 800a310:	40004400 	.word	0x40004400
 800a314:	40004800 	.word	0x40004800
 800a318:	40004c00 	.word	0x40004c00
 800a31c:	40005000 	.word	0x40005000
 800a320:	40011400 	.word	0x40011400
 800a324:	40007800 	.word	0x40007800
 800a328:	40007c00 	.word	0x40007c00
 800a32c:	0800a7b4 	.word	0x0800a7b4

0800a330 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a40      	ldr	r2, [pc, #256]	@ (800a440 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d027      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a3e      	ldr	r2, [pc, #248]	@ (800a444 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d022      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a3d      	ldr	r2, [pc, #244]	@ (800a448 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d01d      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a3b      	ldr	r2, [pc, #236]	@ (800a44c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d018      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a3a      	ldr	r2, [pc, #232]	@ (800a450 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a38      	ldr	r2, [pc, #224]	@ (800a454 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00e      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a37      	ldr	r2, [pc, #220]	@ (800a458 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d009      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a35      	ldr	r2, [pc, #212]	@ (800a45c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d004      	beq.n	800a394 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a38a:	f240 2195 	movw	r1, #661	@ 0x295
 800a38e:	4834      	ldr	r0, [pc, #208]	@ (800a460 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a390:	f7f6 fd5a 	bl	8000e48 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d018      	beq.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3a0:	d014      	beq.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3a8:	d010      	beq.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800a3b0:	d00c      	beq.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3b8:	d008      	beq.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800a3c0:	d004      	beq.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a3c2:	f240 2196 	movw	r1, #662	@ 0x296
 800a3c6:	4826      	ldr	r0, [pc, #152]	@ (800a460 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a3c8:	f7f6 fd3e 	bl	8000e48 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d101      	bne.n	800a3da <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e02d      	b.n	800a436 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2224      	movs	r2, #36	@ 0x24
 800a3e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0201 	bic.w	r2, r2, #1
 800a400:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f824 	bl	800a464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2220      	movs	r2, #32
 800a428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	40011000 	.word	0x40011000
 800a444:	40004400 	.word	0x40004400
 800a448:	40004800 	.word	0x40004800
 800a44c:	40004c00 	.word	0x40004c00
 800a450:	40005000 	.word	0x40005000
 800a454:	40011400 	.word	0x40011400
 800a458:	40007800 	.word	0x40007800
 800a45c:	40007c00 	.word	0x40007c00
 800a460:	0800a7b4 	.word	0x0800a7b4

0800a464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a470:	2b00      	cmp	r3, #0
 800a472:	d108      	bne.n	800a486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a484:	e031      	b.n	800a4ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a486:	2310      	movs	r3, #16
 800a488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a48a:	2310      	movs	r3, #16
 800a48c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	0e5b      	lsrs	r3, r3, #25
 800a496:	b2db      	uxtb	r3, r3
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	0f5b      	lsrs	r3, r3, #29
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	7b3a      	ldrb	r2, [r7, #12]
 800a4b2:	4911      	ldr	r1, [pc, #68]	@ (800a4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a4b4:	5c8a      	ldrb	r2, [r1, r2]
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4ba:	7b3a      	ldrb	r2, [r7, #12]
 800a4bc:	490f      	ldr	r1, [pc, #60]	@ (800a4fc <UARTEx_SetNbDataToProcess+0x98>)
 800a4be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	7b7a      	ldrb	r2, [r7, #13]
 800a4d0:	4909      	ldr	r1, [pc, #36]	@ (800a4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a4d2:	5c8a      	ldrb	r2, [r1, r2]
 800a4d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4d8:	7b7a      	ldrb	r2, [r7, #13]
 800a4da:	4908      	ldr	r1, [pc, #32]	@ (800a4fc <UARTEx_SetNbDataToProcess+0x98>)
 800a4dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4ea:	bf00      	nop
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	0800a818 	.word	0x0800a818
 800a4fc:	0800a820 	.word	0x0800a820

0800a500 <memset>:
 800a500:	4402      	add	r2, r0
 800a502:	4603      	mov	r3, r0
 800a504:	4293      	cmp	r3, r2
 800a506:	d100      	bne.n	800a50a <memset+0xa>
 800a508:	4770      	bx	lr
 800a50a:	f803 1b01 	strb.w	r1, [r3], #1
 800a50e:	e7f9      	b.n	800a504 <memset+0x4>

0800a510 <__libc_init_array>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4d0d      	ldr	r5, [pc, #52]	@ (800a548 <__libc_init_array+0x38>)
 800a514:	4c0d      	ldr	r4, [pc, #52]	@ (800a54c <__libc_init_array+0x3c>)
 800a516:	1b64      	subs	r4, r4, r5
 800a518:	10a4      	asrs	r4, r4, #2
 800a51a:	2600      	movs	r6, #0
 800a51c:	42a6      	cmp	r6, r4
 800a51e:	d109      	bne.n	800a534 <__libc_init_array+0x24>
 800a520:	4d0b      	ldr	r5, [pc, #44]	@ (800a550 <__libc_init_array+0x40>)
 800a522:	4c0c      	ldr	r4, [pc, #48]	@ (800a554 <__libc_init_array+0x44>)
 800a524:	f000 f818 	bl	800a558 <_init>
 800a528:	1b64      	subs	r4, r4, r5
 800a52a:	10a4      	asrs	r4, r4, #2
 800a52c:	2600      	movs	r6, #0
 800a52e:	42a6      	cmp	r6, r4
 800a530:	d105      	bne.n	800a53e <__libc_init_array+0x2e>
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	f855 3b04 	ldr.w	r3, [r5], #4
 800a538:	4798      	blx	r3
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7ee      	b.n	800a51c <__libc_init_array+0xc>
 800a53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a542:	4798      	blx	r3
 800a544:	3601      	adds	r6, #1
 800a546:	e7f2      	b.n	800a52e <__libc_init_array+0x1e>
 800a548:	0800a830 	.word	0x0800a830
 800a54c:	0800a830 	.word	0x0800a830
 800a550:	0800a830 	.word	0x0800a830
 800a554:	0800a834 	.word	0x0800a834

0800a558 <_init>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	bf00      	nop
 800a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55e:	bc08      	pop	{r3}
 800a560:	469e      	mov	lr, r3
 800a562:	4770      	bx	lr

0800a564 <_fini>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	bf00      	nop
 800a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56a:	bc08      	pop	{r3}
 800a56c:	469e      	mov	lr, r3
 800a56e:	4770      	bx	lr
