
ADC_Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a10  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f2c  08009f2c  0000af2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f34  08009f34  0000af34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009f38  08009f38  0000af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08009f3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000230  24000014  08009f50  0000b014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000244  08009f50  0000b244  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017305  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002756  00000000  00000000  00022347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001238  00000000  00000000  00024aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e56  00000000  00000000  00025cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389e7  00000000  00000000  00026b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cb85  00000000  00000000  0005f515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175cdd  00000000  00000000  0007c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1d77  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004da4  00000000  00000000  001f1dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  001f6b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009c90 	.word	0x08009c90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08009c90 	.word	0x08009c90

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <adc_custom_init>:

uint16_t data_buffer[BUFFER_SIZE];
uint8_t *data_buffer_char_p = data_buffer;
uint16_t data_buffer_index;

void adc_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->CR &= ~ADC_CR_ADSTART;
 80005cc:	4b3f      	ldr	r3, [pc, #252]	@ (80006cc <adc_custom_init+0x104>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a3e      	ldr	r2, [pc, #248]	@ (80006cc <adc_custom_init+0x104>)
 80005d2:	f023 0304 	bic.w	r3, r3, #4
 80005d6:	6093      	str	r3, [r2, #8]

	ADC3->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005d8:	4b3c      	ldr	r3, [pc, #240]	@ (80006cc <adc_custom_init+0x104>)
 80005da:	2200      	movs	r2, #0
 80005dc:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005de:	4b3b      	ldr	r3, [pc, #236]	@ (80006cc <adc_custom_init+0x104>)
 80005e0:	4a3a      	ldr	r2, [pc, #232]	@ (80006cc <adc_custom_init+0x104>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (18 << ADC_SQR1_SQ1_Pos);
 80005e6:	4b39      	ldr	r3, [pc, #228]	@ (80006cc <adc_custom_init+0x104>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a38      	ldr	r2, [pc, #224]	@ (80006cc <adc_custom_init+0x104>)
 80005ec:	f443 6390 	orr.w	r3, r3, #1152	@ 0x480
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL = 0;
 80005f2:	4b36      	ldr	r3, [pc, #216]	@ (80006cc <adc_custom_init+0x104>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
	ADC3->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + 18)); // Dichiaro quali canali leggere : 18 e 19
 80005f8:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <adc_custom_init+0x104>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a33      	ldr	r2, [pc, #204]	@ (80006cc <adc_custom_init+0x104>)
 80005fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000602:	61d3      	str	r3, [r2, #28]

	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <adc_custom_init+0x104>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <adc_custom_init+0x104>)
 800060a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800060e:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <adc_custom_init+0x104>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4a2d      	ldr	r2, [pc, #180]	@ (80006cc <adc_custom_init+0x104>)
 8000616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800061a:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 800061c:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <adc_custom_init+0x104>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4a2a      	ldr	r2, [pc, #168]	@ (80006cc <adc_custom_init+0x104>)
 8000622:	f023 0301 	bic.w	r3, r3, #1
 8000626:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <adc_custom_init+0x104>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <adc_custom_init+0x104>)
 800062e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000632:	6093      	str	r3, [r2, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){}
 8000634:	bf00      	nop
 8000636:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <adc_custom_init+0x104>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	dbfb      	blt.n	8000636 <adc_custom_init+0x6e>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <adc_custom_init+0x104>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a22      	ldr	r2, [pc, #136]	@ (80006cc <adc_custom_init+0x104>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <adc_custom_init+0x104>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <adc_custom_init+0x104>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000656:	bf00      	nop
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <adc_custom_init+0x104>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f9      	bne.n	8000658 <adc_custom_init+0x90>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <adc_custom_init+0x104>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <adc_custom_init+0x104>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]
	// Fine accensione

	/* ADR INIZIALIZZATO */

	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP18_Pos);	// Indico Il tempo prima della misura
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <adc_custom_init+0x104>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <adc_custom_init+0x104>)
 8000676:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800067a:	6193      	str	r3, [r2, #24]
//	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP19_Pos);

	TIM6->PSC = 48;
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <adc_custom_init+0x108>)
 800067e:	2230      	movs	r2, #48	@ 0x30
 8000680:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1000;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <adc_custom_init+0x108>)
 8000684:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000688:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <adc_custom_init+0x108>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <adc_custom_init+0x108>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <adc_custom_init+0x108>)
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <adc_custom_init+0x108>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0b      	ldr	r2, [pc, #44]	@ (80006d0 <adc_custom_init+0x108>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]

	ADC3->IER |= ADC_IER_EOCIE;					// Abilito l'interrupt di fine conversione
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <adc_custom_init+0x104>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <adc_custom_init+0x104>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6053      	str	r3, [r2, #4]
	ADC3->CR  |= ADC_CR_ADSTART;				// Inizio le misurazioni
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <adc_custom_init+0x104>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <adc_custom_init+0x104>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6093      	str	r3, [r2, #8]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	58026000 	.word	0x58026000
 80006d0:	40001000 	.word	0x40001000

080006d4 <adc_custom_interr>:


void adc_custom_interr(){
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

	if(data_buffer_index < BUFFER_SIZE){
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <adc_custom_interr+0x48>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2b63      	cmp	r3, #99	@ 0x63
 80006de:	d809      	bhi.n	80006f4 <adc_custom_interr+0x20>

		data_buffer[data_buffer_index] = ADC3->DR;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <adc_custom_interr+0x4c>)
 80006e2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <adc_custom_interr+0x48>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	b289      	uxth	r1, r1
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <adc_custom_interr+0x50>)
 80006ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80006f2:	e007      	b.n	8000704 <adc_custom_interr+0x30>
	}
	else{
		data_buffer_index=0;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <adc_custom_interr+0x48>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	801a      	strh	r2, [r3, #0]
		data_buffer[0] = ADC3->DR;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <adc_custom_interr+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <adc_custom_interr+0x50>)
 8000702:	801a      	strh	r2, [r3, #0]
	}

	++data_buffer_index;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <adc_custom_interr+0x48>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <adc_custom_interr+0x48>)
 800070e:	801a      	strh	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	240000f8 	.word	0x240000f8
 8000720:	58026000 	.word	0x58026000
 8000724:	24000030 	.word	0x24000030

08000728 <usart_custom_init>:

#include "Custom_USART.h"

uint16_t tx_buff_index=0;

void usart_custom_init(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;	// attivo trasmissione
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <usart_custom_init+0x4c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <usart_custom_init+0x4c>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;	// attivo ricezione
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <usart_custom_init+0x4c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <usart_custom_init+0x4c>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;	// spegno interr fine trasmissione
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <usart_custom_init+0x4c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0a      	ldr	r2, [pc, #40]	@ (8000774 <usart_custom_init+0x4c>)
 800074a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800074e:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;	// spegno interr fine ricezione
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <usart_custom_init+0x4c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <usart_custom_init+0x4c>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;	// abilito la periferica
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <usart_custom_init+0x4c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <usart_custom_init+0x4c>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40004800 	.word	0x40004800

08000778 <usart_custom_interr>:

void usart_custom_interr(){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 800077e:	4b53      	ldr	r3, [pc, #332]	@ (80008cc <usart_custom_interr+0x154>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	2b00      	cmp	r3, #0
 8000788:	d054      	beq.n	8000834 <usart_custom_interr+0xbc>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 800078a:	4b50      	ldr	r3, [pc, #320]	@ (80008cc <usart_custom_interr+0x154>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000792:	2b00      	cmp	r3, #0
 8000794:	d04e      	beq.n	8000834 <usart_custom_interr+0xbc>

			char received_data = USART3->RDR;
 8000796:	4b4d      	ldr	r3, [pc, #308]	@ (80008cc <usart_custom_interr+0x154>)
 8000798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800079a:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 &= ~USART_CR1_TXEIE;
 800079c:	4b4b      	ldr	r3, [pc, #300]	@ (80008cc <usart_custom_interr+0x154>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a4a      	ldr	r2, [pc, #296]	@ (80008cc <usart_custom_interr+0x154>)
 80007a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007a6:	6013      	str	r3, [r2, #0]

			if(received_data=='e'){
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b65      	cmp	r3, #101	@ 0x65
 80007ac:	d10f      	bne.n	80007ce <usart_custom_interr+0x56>

				TIM6->CR1 &= ~TIM_CR1_CEN;
 80007ae:	4b48      	ldr	r3, [pc, #288]	@ (80008d0 <usart_custom_interr+0x158>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a47      	ldr	r2, [pc, #284]	@ (80008d0 <usart_custom_interr+0x158>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	6013      	str	r3, [r2, #0]
				tx_buff_index=0;
 80007ba:	4b46      	ldr	r3, [pc, #280]	@ (80008d4 <usart_custom_interr+0x15c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	801a      	strh	r2, [r3, #0]
				//data_buffer_index=0;	// resetto l'indeice dell'array

				USART3->CR1 |= USART_CR1_TXEIE;	// abilito interrupt di fine trasmissione
 80007c0:	4b42      	ldr	r3, [pc, #264]	@ (80008cc <usart_custom_interr+0x154>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a41      	ldr	r2, [pc, #260]	@ (80008cc <usart_custom_interr+0x154>)
 80007c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	e032      	b.n	8000834 <usart_custom_interr+0xbc>
			}

			else if(received_data == 't'){
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b74      	cmp	r3, #116	@ 0x74
 80007d2:	d116      	bne.n	8000802 <usart_custom_interr+0x8a>

				USART3->TDR = ((unsigned char*)&TS_CAL_30C) [0];
 80007d4:	4b40      	ldr	r3, [pc, #256]	@ (80008d8 <usart_custom_interr+0x160>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b3c      	ldr	r3, [pc, #240]	@ (80008cc <usart_custom_interr+0x154>)
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
				while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80007dc:	bf00      	nop
 80007de:	4b3b      	ldr	r3, [pc, #236]	@ (80008cc <usart_custom_interr+0x154>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <usart_custom_interr+0x66>
				USART3->TDR = ((unsigned char*)&TS_CAL_30C) [1];
 80007ea:	4b3c      	ldr	r3, [pc, #240]	@ (80008dc <usart_custom_interr+0x164>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b37      	ldr	r3, [pc, #220]	@ (80008cc <usart_custom_interr+0x154>)
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
				while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80007f2:	bf00      	nop
 80007f4:	4b35      	ldr	r3, [pc, #212]	@ (80008cc <usart_custom_interr+0x154>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f9      	beq.n	80007f4 <usart_custom_interr+0x7c>
 8000800:	e018      	b.n	8000834 <usart_custom_interr+0xbc>
			}

			else if(received_data == 'T'){
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b54      	cmp	r3, #84	@ 0x54
 8000806:	d115      	bne.n	8000834 <usart_custom_interr+0xbc>

				USART3->TDR = ((unsigned char*)&TS_CAL_110C) [0];
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <usart_custom_interr+0x168>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <usart_custom_interr+0x154>)
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
				while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000810:	bf00      	nop
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <usart_custom_interr+0x154>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <usart_custom_interr+0x9a>
				USART3->TDR = ((unsigned char*)&TS_CAL_110C) [1];
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <usart_custom_interr+0x16c>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <usart_custom_interr+0x154>)
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
				while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000826:	bf00      	nop
 8000828:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <usart_custom_interr+0x154>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f9      	beq.n	8000828 <usart_custom_interr+0xb0>
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <usart_custom_interr+0x154>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083c:	2b00      	cmp	r3, #0
 800083e:	d02d      	beq.n	800089c <usart_custom_interr+0x124>
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <usart_custom_interr+0x154>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000848:	2b00      	cmp	r3, #0
 800084a:	d027      	beq.n	800089c <usart_custom_interr+0x124>
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <usart_custom_interr+0x154>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	2b00      	cmp	r3, #0
 8000856:	d121      	bne.n	800089c <usart_custom_interr+0x124>

		if( tx_buff_index < BUFFER_SIZE*sizeof(data_buffer[0])){
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <usart_custom_interr+0x15c>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	2bc7      	cmp	r3, #199	@ 0xc7
 800085e:	d80e      	bhi.n	800087e <usart_custom_interr+0x106>

			USART3->TDR = data_buffer_char_p[tx_buff_index];
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <usart_custom_interr+0x170>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <usart_custom_interr+0x15c>)
 8000866:	8812      	ldrh	r2, [r2, #0]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <usart_custom_interr+0x154>)
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
			++tx_buff_index;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <usart_custom_interr+0x15c>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <usart_custom_interr+0x15c>)
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	e00e      	b.n	800089c <usart_custom_interr+0x124>

		}else{

			USART3->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <usart_custom_interr+0x154>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <usart_custom_interr+0x154>)
 8000884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000888:	6013      	str	r3, [r2, #0]
			tx_buff_index=0;
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <usart_custom_interr+0x15c>)
 800088c:	2200      	movs	r2, #0
 800088e:	801a      	strh	r2, [r3, #0]
			TIM6->CR1 |= TIM_CR1_CEN;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <usart_custom_interr+0x158>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <usart_custom_interr+0x158>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]
		}
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <usart_custom_interr+0x154>)
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <usart_custom_interr+0x154>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <usart_custom_interr+0x154>)
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <usart_custom_interr+0x154>)
 80008ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b2:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <usart_custom_interr+0x154>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <usart_custom_interr+0x154>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	6193      	str	r3, [r2, #24]


}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40004800 	.word	0x40004800
 80008d0:	40001000 	.word	0x40001000
 80008d4:	240000fa 	.word	0x240000fa
 80008d8:	1ff1e820 	.word	0x1ff1e820
 80008dc:	1ff1e821 	.word	0x1ff1e821
 80008e0:	1ff1e840 	.word	0x1ff1e840
 80008e4:	1ff1e841 	.word	0x1ff1e841
 80008e8:	24000000 	.word	0x24000000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fce4 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f80e 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f9b0 	bl	8000c5c <MX_GPIO_Init>
  MX_ADC3_Init();
 80008fc:	f000 f8b8 	bl	8000a70 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000900:	f000 f95e 	bl	8000bc0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000904:	f000 f926 	bl	8000b54 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  usart_custom_init();
 8000908:	f7ff ff0e 	bl	8000728 <usart_custom_init>
  adc_custom_init();
 800090c:	f7ff fe5c 	bl	80005c8 <adc_custom_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <main+0x24>

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09e      	sub	sp, #120	@ 0x78
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800091e:	224c      	movs	r2, #76	@ 0x4c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f009 f988 	bl	8009c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2220      	movs	r2, #32
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f009 f981 	bl	8009c38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000936:	2002      	movs	r0, #2
 8000938:	f002 fe12 	bl	8003560 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <SystemClock_Config+0x150>)
 8000942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000944:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <SystemClock_Config+0x150>)
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800094c:	4b45      	ldr	r3, [pc, #276]	@ (8000a64 <SystemClock_Config+0x150>)
 800094e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <SystemClock_Config+0x154>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a43      	ldr	r2, [pc, #268]	@ (8000a68 <SystemClock_Config+0x154>)
 800095c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b41      	ldr	r3, [pc, #260]	@ (8000a68 <SystemClock_Config+0x154>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096e:	bf00      	nop
 8000970:	4b3d      	ldr	r3, [pc, #244]	@ (8000a68 <SystemClock_Config+0x154>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800097c:	d1f8      	bne.n	8000970 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <SystemClock_Config+0x158>)
 8000980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000984:	4a39      	ldr	r2, [pc, #228]	@ (8000a6c <SystemClock_Config+0x158>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800098e:	4b37      	ldr	r3, [pc, #220]	@ (8000a6c <SystemClock_Config+0x158>)
 8000990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <SystemClock_Config+0x154>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a30      	ldr	r2, [pc, #192]	@ (8000a68 <SystemClock_Config+0x154>)
 80009a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000a68 <SystemClock_Config+0x154>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <SystemClock_Config+0x150>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <SystemClock_Config+0x150>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <SystemClock_Config+0x150>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ce:	bf00      	nop
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SystemClock_Config+0x154>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009dc:	d1f8      	bne.n	80009d0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ec:	2302      	movs	r3, #2
 80009ee:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fde9 	bl	80035ec <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a20:	f000 fa4c 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	233f      	movs	r3, #63	@ 0x3f
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a30:	2308      	movs	r3, #8
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a38:	2340      	movs	r3, #64	@ 0x40
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a42:	2340      	movs	r3, #64	@ 0x40
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fb7d 	bl	800414c <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a58:	f000 fa30 	bl	8000ebc <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3778      	adds	r7, #120	@ 0x78
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58000400 	.word	0x58000400
 8000a68:	58024800 	.word	0x58024800
 8000a6c:	58024400 	.word	0x58024400

08000a70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000a8a:	4a30      	ldr	r2, [pc, #192]	@ (8000b4c <MX_ADC3_Init+0xdc>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000aba:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ac0:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000aea:	f000 fe35 	bl	8001758 <HAL_ADC_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000af4:	f000 f9e2 	bl	8000ebc <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000afe:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000b00:	f000 fe2a 	bl	8001758 <HAL_ADC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 f9d7 	bl	8000ebc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_ADC3_Init+0xe0>)
 8000b10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b12:	2306      	movs	r3, #6
 8000b14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b1e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b20:	2304      	movs	r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_ADC3_Init+0xd8>)
 8000b32:	f001 f9e3 	bl	8001efc <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b3c:	f000 f9be 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	240000fc 	.word	0x240000fc
 8000b4c:	58026000 	.word	0x58026000
 8000b50:	cb840000 	.word	0xcb840000

08000b54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b66:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <MX_TIM6_Init+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b86:	f007 f92f 	bl	8007de8 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b90:	f000 f994 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b94:	2320      	movs	r3, #32
 8000b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000ba2:	f007 fae7 	bl	8008174 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f986 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	24000160 	.word	0x24000160
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <MX_USART3_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bcc:	4a22      	ldr	r2, [pc, #136]	@ (8000c58 <MX_USART3_UART_Init+0x98>)
 8000bce:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be4:	220c      	movs	r2, #12
 8000be6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c06:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c08:	f007 fc1a 	bl	8008440 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000c12:	f000 f953 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c1a:	f008 fe8b 	bl	8009934 <HAL_UARTEx_SetTxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000c24:	f000 f94a 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c2c:	f008 ff1c 	bl	8009a68 <HAL_UARTEx_SetRxFifoThreshold>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000c36:	f000 f941 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f008 fe04 	bl	8009848 <HAL_UARTEx_DisableFifoMode>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000c46:	f000 f939 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	240001ac 	.word	0x240001ac
 8000c54:	40004800 	.word	0x40004800
 8000c58:	000f4240 	.word	0x000f4240

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	@ 0x30
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b8b      	ldr	r3, [pc, #556]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a89      	ldr	r2, [pc, #548]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b87      	ldr	r3, [pc, #540]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c90:	4b83      	ldr	r3, [pc, #524]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a82      	ldr	r2, [pc, #520]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b7c      	ldr	r3, [pc, #496]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b78      	ldr	r3, [pc, #480]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b74      	ldr	r3, [pc, #464]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	4a73      	ldr	r2, [pc, #460]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cdc:	4b70      	ldr	r3, [pc, #448]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b6d      	ldr	r3, [pc, #436]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfa:	4b69      	ldr	r3, [pc, #420]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d08:	4b65      	ldr	r3, [pc, #404]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0e:	4a64      	ldr	r2, [pc, #400]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d18:	4b61      	ldr	r3, [pc, #388]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d26:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2c:	4a5c      	ldr	r2, [pc, #368]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d36:	4b5a      	ldr	r3, [pc, #360]	@ (8000ea0 <MX_GPIO_Init+0x244>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d4a:	4856      	ldr	r0, [pc, #344]	@ (8000ea4 <MX_GPIO_Init+0x248>)
 8000d4c:	f002 fbdc 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d56:	4854      	ldr	r0, [pc, #336]	@ (8000ea8 <MX_GPIO_Init+0x24c>)
 8000d58:	f002 fbd6 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4852      	ldr	r0, [pc, #328]	@ (8000eac <MX_GPIO_Init+0x250>)
 8000d62:	f002 fbd1 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	484d      	ldr	r0, [pc, #308]	@ (8000eb0 <MX_GPIO_Init+0x254>)
 8000d7c:	f002 f91a 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d80:	2332      	movs	r3, #50	@ 0x32
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d90:	230b      	movs	r3, #11
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4845      	ldr	r0, [pc, #276]	@ (8000eb0 <MX_GPIO_Init+0x254>)
 8000d9c:	f002 f90a 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000da0:	2386      	movs	r3, #134	@ 0x86
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db0:	230b      	movs	r3, #11
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	483e      	ldr	r0, [pc, #248]	@ (8000eb4 <MX_GPIO_Init+0x258>)
 8000dbc:	f002 f8fa 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dc0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4832      	ldr	r0, [pc, #200]	@ (8000ea4 <MX_GPIO_Init+0x248>)
 8000dda:	f002 f8eb 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df0:	230b      	movs	r3, #11
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	482a      	ldr	r0, [pc, #168]	@ (8000ea4 <MX_GPIO_Init+0x248>)
 8000dfc:	f002 f8da 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4823      	ldr	r0, [pc, #140]	@ (8000ea8 <MX_GPIO_Init+0x24c>)
 8000e1a:	f002 f8cb 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4821      	ldr	r0, [pc, #132]	@ (8000eb8 <MX_GPIO_Init+0x25c>)
 8000e34:	f002 f8be 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e38:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4817      	ldr	r0, [pc, #92]	@ (8000eb4 <MX_GPIO_Init+0x258>)
 8000e56:	f002 f8ad 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4810      	ldr	r0, [pc, #64]	@ (8000eb8 <MX_GPIO_Init+0x25c>)
 8000e78:	f002 f89c 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	@ (8000eac <MX_GPIO_Init+0x250>)
 8000e94:	f002 f88e 	bl	8002fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	@ 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020400 	.word	0x58020400
 8000ea8:	58020c00 	.word	0x58020c00
 8000eac:	58021000 	.word	0x58021000
 8000eb0:	58020800 	.word	0x58020800
 8000eb4:	58020000 	.word	0x58020000
 8000eb8:	58021800 	.word	0x58021800

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eec:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <HAL_MspInit+0x30>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_MspInit+0x30>)
 8000ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	58024400 	.word	0x58024400

08000f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b4      	sub	sp, #208	@ 0xd0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	22c0      	movs	r2, #192	@ 0xc0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 fe87 	bl	8009c38 <memset>
  if(hadc->Instance==ADC3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <HAL_ADC_MspInit+0x9c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d139      	bne.n	8000fa8 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f34:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000f44:	2313      	movs	r3, #19
 8000f46:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f54:	23c0      	movs	r3, #192	@ 0xc0
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fe34 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000f76:	f7ff ffa1 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	207f      	movs	r0, #127	@ 0x7f
 8000f9e:	f001 ffbb 	bl	8002f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000fa2:	207f      	movs	r0, #127	@ 0x7f
 8000fa4:	f001 ffe2 	bl	8002f6c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000fa8:	bf00      	nop
 8000faa:	37d0      	adds	r7, #208	@ 0xd0
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	58026000 	.word	0x58026000
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10e      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x40>)
 8000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd0:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x40>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x40>)
 8000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40001000 	.word	0x40001000
 8000ff8:	58024400 	.word	0x58024400

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ba      	sub	sp, #232	@ 0xe8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	22c0      	movs	r2, #192	@ 0xc0
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f008 fe0b 	bl	8009c38 <memset>
  if(huart->Instance==USART3)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a2b      	ldr	r2, [pc, #172]	@ (80010d4 <HAL_UART_MspInit+0xd8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d14e      	bne.n	80010ca <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800102c:	f04f 0202 	mov.w	r2, #2
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fdc8 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800104e:	f7ff ff35 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 8001054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001058:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 800105a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800105e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 8001064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_UART_MspInit+0xdc>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800108e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a8:	2307      	movs	r3, #7
 80010aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <HAL_UART_MspInit+0xe0>)
 80010b6:	f001 ff7d 	bl	8002fb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2027      	movs	r0, #39	@ 0x27
 80010c0:	f001 ff2a 	bl	8002f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010c4:	2027      	movs	r0, #39	@ 0x27
 80010c6:	f001 ff51 	bl	8002f6c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010ca:	bf00      	nop
 80010cc:	37e8      	adds	r7, #232	@ 0xe8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40004800 	.word	0x40004800
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58020c00 	.word	0x58020c00

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 f933 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart_custom_interr();
 8001142:	f7ff fb19 	bl	8000778 <usart_custom_interr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

	adc_custom_interr();
 800114e:	f7ff fac1 	bl	80006d4 <adc_custom_interr>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800115c:	4b37      	ldr	r3, [pc, #220]	@ (800123c <SystemInit+0xe4>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a36      	ldr	r2, [pc, #216]	@ (800123c <SystemInit+0xe4>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800116c:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <SystemInit+0xe8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	2b06      	cmp	r3, #6
 8001176:	d807      	bhi.n	8001188 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001178:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <SystemInit+0xe8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 030f 	bic.w	r3, r3, #15
 8001180:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <SystemInit+0xe8>)
 8001182:	f043 0307 	orr.w	r3, r3, #7
 8001186:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001188:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <SystemInit+0xec>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2d      	ldr	r2, [pc, #180]	@ (8001244 <SystemInit+0xec>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <SystemInit+0xec>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800119a:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <SystemInit+0xec>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4929      	ldr	r1, [pc, #164]	@ (8001244 <SystemInit+0xec>)
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <SystemInit+0xf0>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <SystemInit+0xe8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <SystemInit+0xe8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <SystemInit+0xe8>)
 80011bc:	f043 0307 	orr.w	r3, r3, #7
 80011c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <SystemInit+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <SystemInit+0xec>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <SystemInit+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <SystemInit+0xec>)
 80011d6:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <SystemInit+0xf4>)
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <SystemInit+0xec>)
 80011dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <SystemInit+0xf8>)
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <SystemInit+0xec>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <SystemInit+0xfc>)
 80011e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <SystemInit+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <SystemInit+0xec>)
 80011ee:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <SystemInit+0xfc>)
 80011f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <SystemInit+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <SystemInit+0xec>)
 80011fa:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <SystemInit+0xfc>)
 80011fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <SystemInit+0xec>)
 8001200:	2200      	movs	r2, #0
 8001202:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <SystemInit+0xec>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <SystemInit+0xec>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <SystemInit+0xec>)
 8001212:	2200      	movs	r2, #0
 8001214:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <SystemInit+0x100>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <SystemInit+0x104>)
 800121c:	4013      	ands	r3, r2
 800121e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001222:	d202      	bcs.n	800122a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <SystemInit+0x108>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <SystemInit+0x10c>)
 800122c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001230:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	52002000 	.word	0x52002000
 8001244:	58024400 	.word	0x58024400
 8001248:	eaf6ed7f 	.word	0xeaf6ed7f
 800124c:	02020200 	.word	0x02020200
 8001250:	01ff0000 	.word	0x01ff0000
 8001254:	01010280 	.word	0x01010280
 8001258:	5c001000 	.word	0x5c001000
 800125c:	ffff0000 	.word	0xffff0000
 8001260:	51008108 	.word	0x51008108
 8001264:	52004000 	.word	0x52004000

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800126c:	f7ff ff74 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	@ (80012a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001296:	f008 fcd7 	bl	8009c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fb27 	bl	80008ec <main>
  bx  lr
 800129e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012a8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80012ac:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 80012b0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80012b4:	24000244 	.word	0x24000244

080012b8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c2:	2003      	movs	r0, #3
 80012c4:	f001 fe08 	bl	8002ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c8:	f003 fab0 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_Init+0x68>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	4913      	ldr	r1, [pc, #76]	@ (8001328 <HAL_Init+0x6c>)
 80012da:	5ccb      	ldrb	r3, [r1, r3]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_Init+0x68>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001328 <HAL_Init+0x6c>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_Init+0x70>)
 80012fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_Init+0x74>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f814 	bl	8001334 <HAL_InitTick>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e002      	b.n	800131c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001316:	f7ff fde3 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58024400 	.word	0x58024400
 8001328:	08009ef4 	.word	0x08009ef4
 800132c:	24000008 	.word	0x24000008
 8001330:	24000004 	.word	0x24000004

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_InitTick+0x60>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e021      	b.n	800138c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <HAL_InitTick+0x64>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_InitTick+0x60>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fe1c 	bl	8002f9c <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f001 fdcc 	bl	8002f18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	@ (800139c <HAL_InitTick+0x68>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	24000010 	.word	0x24000010
 8001398:	24000004 	.word	0x24000004
 800139c:	2400000c 	.word	0x2400000c

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	24000010 	.word	0x24000010
 80013c4:	24000240 	.word	0x24000240

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	24000240 	.word	0x24000240

080013e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetREVID+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	5c001000 	.word	0x5c001000

080013f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	609a      	str	r2, [r3, #8]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_6B  (2)
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC3
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
    }
  }

#else  /* ADC_VER_V5_V90 */
  if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <LL_ADC_GetResolution+0x44>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001474:	d104      	bne.n	8001480 <LL_ADC_GetResolution+0x20>
  {
    return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f003 031c 	and.w	r3, r3, #28
 800147e:	e00b      	b.n	8001498 <LL_ADC_GetResolution+0x38>
  }
  else /* Rev.V */
  {
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 031c 	and.w	r3, r3, #28
 8001488:	2b1c      	cmp	r3, #28
 800148a:	d101      	bne.n	8001490 <LL_ADC_GetResolution+0x30>
    {
      return (LL_ADC_RESOLUTION_8B);
 800148c:	2310      	movs	r3, #16
 800148e:	e003      	b.n	8001498 <LL_ADC_GetResolution+0x38>
    }
    else
    {
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 031c 	and.w	r3, r3, #28
    }
  }

#endif /* ADC_VER_V5_X */
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	5c001000 	.word	0x5c001000

080014a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3360      	adds	r3, #96	@ 0x60
 80014ba:	461a      	mov	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	611a      	str	r2, [r3, #16]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800151a:	b480      	push	{r7}
 800151c:	b087      	sub	sp, #28
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3360      	adds	r3, #96	@ 0x60
 800152a:	461a      	mov	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]
  }
}
 8001544:	bf00      	nop
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3330      	adds	r3, #48	@ 0x30
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	211f      	movs	r1, #31
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0e9b      	lsrs	r3, r3, #26
 8001588:	f003 011f 	and.w	r1, r3, #31
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3314      	adds	r3, #20
 80015b8:	461a      	mov	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	0e5b      	lsrs	r3, r3, #25
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	0d1b      	lsrs	r3, r3, #20
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2107      	movs	r1, #7
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	401a      	ands	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0d1b      	lsrs	r3, r3, #20
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0318 	and.w	r3, r3, #24
 8001622:	4908      	ldr	r1, [pc, #32]	@ (8001644 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001624:	40d9      	lsrs	r1, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	400b      	ands	r3, r1
 800162a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	000fffff 	.word	0x000fffff

08001648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001656:	4013      	ands	r3, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6093      	str	r3, [r2, #8]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	5fffffc0 	.word	0x5fffffc0

0800166c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800167c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001680:	d101      	bne.n	8001686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	6fffffc0 	.word	0x6fffffc0

080016bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016d0:	d101      	bne.n	80016d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <LL_ADC_IsEnabled+0x18>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <LL_ADC_IsEnabled+0x1a>
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b04      	cmp	r3, #4
 800171c:	d101      	bne.n	8001722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b08      	cmp	r3, #8
 8001742:	d101      	bne.n	8001748 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e3bf      	b.n	8001ef2 <HAL_ADC_Init+0x79a>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5a      	ldr	r2, [pc, #360]	@ (80018e0 <HAL_ADC_Init+0x188>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00e      	beq.n	800179a <HAL_ADC_Init+0x42>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_ADC_Init+0x18c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_ADC_Init+0x42>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a57      	ldr	r2, [pc, #348]	@ (80018e8 <HAL_ADC_Init+0x190>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_ADC_Init+0x42>
 8001790:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8001794:	4855      	ldr	r0, [pc, #340]	@ (80018ec <HAL_ADC_Init+0x194>)
 8001796:	f7ff fb97 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a2:	d049      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017ac:	d044      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80017b6:	d03f      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d03b      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017c8:	d036      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80017d2:	d031      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80017dc:	d02c      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80017e6:	d027      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80017f0:	d022      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80017fa:	d01d      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001804:	d018      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800180e:	d013      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001818:	d00e      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001822:	d009      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800182c:	d004      	beq.n	8001838 <HAL_ADC_Init+0xe0>
 800182e:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8001832:	482e      	ldr	r0, [pc, #184]	@ (80018ec <HAL_ADC_Init+0x194>)
 8001834:	f7ff fb48 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01c      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d018      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b14      	cmp	r3, #20
 800184e:	d014      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b08      	cmp	r3, #8
 8001856:	d010      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b18      	cmp	r3, #24
 800185e:	d00c      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d008      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b10      	cmp	r3, #16
 800186e:	d004      	beq.n	800187a <HAL_ADC_Init+0x122>
 8001870:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8001874:	481d      	ldr	r0, [pc, #116]	@ (80018ec <HAL_ADC_Init+0x194>)
 8001876:	f7ff fb27 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_ADC_Init+0x13c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d004      	beq.n	8001894 <HAL_ADC_Init+0x13c>
 800188a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800188e:	4817      	ldr	r0, [pc, #92]	@ (80018ec <HAL_ADC_Init+0x194>)
 8001890:	f7ff fb1a 	bl	8000ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7d5b      	ldrb	r3, [r3, #21]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_ADC_Init+0x156>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7d5b      	ldrb	r3, [r3, #21]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Init+0x156>
 80018a4:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80018a8:	4810      	ldr	r0, [pc, #64]	@ (80018ec <HAL_ADC_Init+0x194>)
 80018aa:	f7ff fb0d 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01c      	beq.n	80018f0 <HAL_ADC_Init+0x198>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018be:	d017      	beq.n	80018f0 <HAL_ADC_Init+0x198>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018c8:	d012      	beq.n	80018f0 <HAL_ADC_Init+0x198>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80018d2:	d00d      	beq.n	80018f0 <HAL_ADC_Init+0x198>
 80018d4:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80018d8:	4804      	ldr	r0, [pc, #16]	@ (80018ec <HAL_ADC_Init+0x194>)
 80018da:	f7ff faf5 	bl	8000ec8 <assert_failed>
 80018de:	e007      	b.n	80018f0 <HAL_ADC_Init+0x198>
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40022100 	.word	0x40022100
 80018e8:	58026000 	.word	0x58026000
 80018ec:	08009ca8 	.word	0x08009ca8
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f8:	d06c      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8001902:	d067      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800190c:	d062      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8001916:	d05d      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001920:	d058      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 800192a:	d053      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8001934:	d04e      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 800193e:	d049      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001948:	d044      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8001952:	d03f      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 800195c:	d03a      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001966:	d035      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8001970:	d030      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 800197a:	d02b      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8001984:	d026      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 800198e:	d021      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001998:	d01c      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 80019a2:	d017      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80019ac:	d012      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 80019b6:	d00d      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80019c0:	d008      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_Init+0x27c>
 80019ca:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80019ce:	4895      	ldr	r0, [pc, #596]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 80019d0:	f7ff fa7a 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d010      	beq.n	80019fe <HAL_ADC_Init+0x2a6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d00c      	beq.n	80019fe <HAL_ADC_Init+0x2a6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d008      	beq.n	80019fe <HAL_ADC_Init+0x2a6>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d004      	beq.n	80019fe <HAL_ADC_Init+0x2a6>
 80019f4:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80019f8:	488a      	ldr	r0, [pc, #552]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 80019fa:	f7ff fa65 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d008      	beq.n	8001a18 <HAL_ADC_Init+0x2c0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_Init+0x2c0>
 8001a0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8001a12:	4884      	ldr	r0, [pc, #528]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001a14:	f7ff fa58 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_ADC_Init+0x2dc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a28:	d004      	beq.n	8001a34 <HAL_ADC_Init+0x2dc>
 8001a2a:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001a2e:	487d      	ldr	r0, [pc, #500]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001a30:	f7ff fa4a 	bl	8000ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7d1b      	ldrb	r3, [r3, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_ADC_Init+0x2f6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7d1b      	ldrb	r3, [r3, #20]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d004      	beq.n	8001a4e <HAL_ADC_Init+0x2f6>
 8001a44:	f240 11b1 	movw	r1, #433	@ 0x1b1
 8001a48:	4876      	ldr	r0, [pc, #472]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001a4a:	f7ff fa3d 	bl	8000ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <HAL_ADC_Init+0x314>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d004      	beq.n	8001a6c <HAL_ADC_Init+0x314>
 8001a62:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8001a66:	486f      	ldr	r0, [pc, #444]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001a68:	f7ff fa2e 	bl	8000ec8 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d02a      	beq.n	8001aca <HAL_ADC_Init+0x372>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_ADC_Init+0x32c>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d904      	bls.n	8001a8e <HAL_ADC_Init+0x336>
 8001a84:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8001a88:	4866      	ldr	r0, [pc, #408]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001a8a:	f7ff fa1d 	bl	8000ec8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_ADC_Init+0x350>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7f1b      	ldrb	r3, [r3, #28]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_Init+0x350>
 8001a9e:	f240 11b7 	movw	r1, #439	@ 0x1b7
 8001aa2:	4860      	ldr	r0, [pc, #384]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001aa4:	f7ff fa10 	bl	8000ec8 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7f1b      	ldrb	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d10c      	bne.n	8001aca <HAL_ADC_Init+0x372>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_ADC_Init+0x368>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d904      	bls.n	8001aca <HAL_ADC_Init+0x372>
 8001ac0:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8001ac4:	4857      	ldr	r0, [pc, #348]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001ac6:	f7ff f9ff 	bl	8000ec8 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7f1b      	ldrb	r3, [r3, #28]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_ADC_Init+0x38c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7d5b      	ldrb	r3, [r3, #21]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d104      	bne.n	8001ae4 <HAL_ADC_Init+0x38c>
 8001ada:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001ade:	4851      	ldr	r0, [pc, #324]	@ (8001c24 <HAL_ADC_Init+0x4cc>)
 8001ae0:	f7ff f9f2 	bl	8000ec8 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_ADC_Init+0x3a8>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fa11 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fdb1 	bl	800166c <LL_ADC_IsDeepPowerDownEnabled>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_Init+0x3c2>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fd97 	bl	8001648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fdcc 	bl	80016bc <LL_ADC_IsInternalRegulatorEnabled>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d114      	bne.n	8001b54 <HAL_ADC_Init+0x3fc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fdb0 	bl	8001694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b34:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <HAL_ADC_Init+0x4d0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c2c <HAL_ADC_Init+0x4d4>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	3301      	adds	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b46:	e002      	b.n	8001b4e <HAL_ADC_Init+0x3f6>
    {
      wait_loop_index--;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <HAL_ADC_Init+0x3f0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fdaf 	bl	80016bc <LL_ADC_IsInternalRegulatorEnabled>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10d      	bne.n	8001b80 <HAL_ADC_Init+0x428>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	f043 0210 	orr.w	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fdc0 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 8001b8a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 81a3 	bne.w	8001ee0 <HAL_ADC_Init+0x788>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 819f 	bne.w	8001ee0 <HAL_ADC_Init+0x788>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd94 	bl	80016e4 <LL_ADC_IsEnabled>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d145      	bne.n	8001c4e <HAL_ADC_Init+0x4f6>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_ADC_Init+0x4d8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_Init+0x47e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_ADC_Init+0x4dc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_ADC_Init+0x49c>
 8001bd6:	4816      	ldr	r0, [pc, #88]	@ (8001c30 <HAL_ADC_Init+0x4d8>)
 8001bd8:	f7ff fd84 	bl	80016e4 <LL_ADC_IsEnabled>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4815      	ldr	r0, [pc, #84]	@ (8001c34 <HAL_ADC_Init+0x4dc>)
 8001be0:	f7ff fd80 	bl	80016e4 <LL_ADC_IsEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4323      	orrs	r3, r4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e008      	b.n	8001c06 <HAL_ADC_Init+0x4ae>
 8001bf4:	4810      	ldr	r0, [pc, #64]	@ (8001c38 <HAL_ADC_Init+0x4e0>)
 8001bf6:	f7ff fd75 	bl	80016e4 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d021      	beq.n	8001c4e <HAL_ADC_Init+0x4f6>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_ADC_Init+0x4d8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d004      	beq.n	8001c1e <HAL_ADC_Init+0x4c6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <HAL_ADC_Init+0x4dc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d110      	bne.n	8001c40 <HAL_ADC_Init+0x4e8>
 8001c1e:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_ADC_Init+0x4e4>)
 8001c20:	e00f      	b.n	8001c42 <HAL_ADC_Init+0x4ea>
 8001c22:	bf00      	nop
 8001c24:	08009ca8 	.word	0x08009ca8
 8001c28:	24000004 	.word	0x24000004
 8001c2c:	053e2d63 	.word	0x053e2d63
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022100 	.word	0x40022100
 8001c38:	58026000 	.word	0x58026000
 8001c3c:	40022300 	.word	0x40022300
 8001c40:	4a86      	ldr	r2, [pc, #536]	@ (8001e5c <HAL_ADC_Init+0x704>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f7ff fbd5 	bl	80013f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c4e:	f7ff fbc7 	bl	80013e0 <HAL_GetREVID>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d914      	bls.n	8001c86 <HAL_ADC_Init+0x52e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d110      	bne.n	8001c86 <HAL_ADC_Init+0x52e>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7d5b      	ldrb	r3, [r3, #21]
 8001c68:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c6e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c74:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7f1b      	ldrb	r3, [r3, #28]
 8001c7a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c7c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c7e:	f043 030c 	orr.w	r3, r3, #12
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	e00d      	b.n	8001ca2 <HAL_ADC_Init+0x54a>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7d5b      	ldrb	r3, [r3, #21]
 8001c8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c90:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7f1b      	ldrb	r3, [r3, #28]
 8001c9c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7f1b      	ldrb	r3, [r3, #28]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_Init+0x560>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	045b      	lsls	r3, r3, #17
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HAL_ADC_Init+0x57c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4b61      	ldr	r3, [pc, #388]	@ (8001e60 <HAL_ADC_Init+0x708>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fd0c 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 8001cf2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fd19 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 8001cfe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 80ca 	bne.w	8001e9c <HAL_ADC_Init+0x744>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 80c6 	bne.w	8001e9c <HAL_ADC_Init+0x744>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b4f      	ldr	r3, [pc, #316]	@ (8001e64 <HAL_ADC_Init+0x70c>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	69b9      	ldr	r1, [r7, #24]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	f040 8099 	bne.w	8001e70 <HAL_ADC_Init+0x718>
        else
        {
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        }
#else
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_ADC_Init+0x5f8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4e:	d904      	bls.n	8001d5a <HAL_ADC_Init+0x602>
 8001d50:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001d54:	4844      	ldr	r0, [pc, #272]	@ (8001e68 <HAL_ADC_Init+0x710>)
 8001d56:	f7ff f8b7 	bl	8000ec8 <assert_failed>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d034      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d030      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	2b40      	cmp	r3, #64	@ 0x40
 8001d70:	d02c      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	2b60      	cmp	r3, #96	@ 0x60
 8001d78:	d028      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	2b80      	cmp	r3, #128	@ 0x80
 8001d80:	d024      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d88:	d020      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001d90:	d01c      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	2be0      	cmp	r3, #224	@ 0xe0
 8001d98:	d018      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001da2:	d013      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001dac:	d00e      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001db6:	d009      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f5b3 7fb0 	cmp.w	r3, #352	@ 0x160
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_Init+0x674>
 8001dc2:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8001dc6:	4828      	ldr	r0, [pc, #160]	@ (8001e68 <HAL_ADC_Init+0x710>)
 8001dc8:	f7ff f87e 	bl	8000ec8 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_ADC_Init+0x690>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_Init+0x690>
 8001dde:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8001de2:	4821      	ldr	r0, [pc, #132]	@ (8001e68 <HAL_ADC_Init+0x710>)
 8001de4:	f7ff f870 	bl	8000ec8 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d00a      	beq.n	8001e06 <HAL_ADC_Init+0x6ae>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df4:	f240 4201 	movw	r2, #1025	@ 0x401
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Init+0x6ae>
 8001dfc:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8001e00:	4819      	ldr	r0, [pc, #100]	@ (8001e68 <HAL_ADC_Init+0x710>)
 8001e02:	f7ff f861 	bl	8000ec8 <assert_failed>

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_ADC_Init+0x6be>
            || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d108      	bne.n	8001e28 <HAL_ADC_Init+0x6d0>
        {
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_Init+0x6d0>
 8001e1e:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8001e22:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <HAL_ADC_Init+0x710>)
 8001e24:	f7ff f850 	bl	8000ec8 <assert_failed>
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <HAL_ADC_Init+0x714>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e36:	3a01      	subs	r2, #1
 8001e38:	0411      	lsls	r1, r2, #16
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	e012      	b.n	8001e80 <HAL_ADC_Init+0x728>
 8001e5a:	bf00      	nop
 8001e5c:	58026300 	.word	0x58026300
 8001e60:	fff0c003 	.word	0xfff0c003
 8001e64:	ffffbffc 	.word	0xffffbffc
 8001e68:	08009ca8 	.word	0x08009ca8
 8001e6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fe42 	bl	8002b20 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10c      	bne.n	8001ebe <HAL_ADC_Init+0x766>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f023 010f 	bic.w	r1, r3, #15
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ebc:	e007      	b.n	8001ece <HAL_ADC_Init+0x776>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020f 	bic.w	r2, r2, #15
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ede:	e007      	b.n	8001ef0 <HAL_ADC_Init+0x798>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	f043 0210 	orr.w	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop

08001efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b0a1      	sub	sp, #132	@ 0x84
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a69      	ldr	r2, [pc, #420]	@ (80020bc <HAL_ADC_ConfigChannel+0x1c0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00e      	beq.n	8001f38 <HAL_ADC_ConfigChannel+0x3c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a68      	ldr	r2, [pc, #416]	@ (80020c0 <HAL_ADC_ConfigChannel+0x1c4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_ADC_ConfigChannel+0x3c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a66      	ldr	r2, [pc, #408]	@ (80020c4 <HAL_ADC_ConfigChannel+0x1c8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_ADC_ConfigChannel+0x3c>
 8001f2e:	f640 310d 	movw	r1, #2829	@ 0xb0d
 8001f32:	4865      	ldr	r0, [pc, #404]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1cc>)
 8001f34:	f7fe ffc8 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d04f      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d04b      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d047      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b18      	cmp	r3, #24
 8001f56:	d043      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f60:	d03e      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001f6a:	d039      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8001f74:	d034      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8001f7e:	d02f      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001f88:	d02a      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f92:	d025      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f240 2206 	movw	r2, #518	@ 0x206
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f240 2212 	movw	r2, #530	@ 0x212
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d014      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001fbe:	d00f      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f240 3206 	movw	r2, #774	@ 0x306
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0xe4>
 8001fd6:	f640 310e 	movw	r1, #2830	@ 0xb0e
 8001fda:	483b      	ldr	r0, [pc, #236]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1cc>)
 8001fdc:	f7fe ff74 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d01c      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d018      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d014      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d010      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d00c      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d008      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b07      	cmp	r3, #7
 800201e:	d004      	beq.n	800202a <HAL_ADC_ConfigChannel+0x12e>
 8002020:	f640 310f 	movw	r1, #2831	@ 0xb0f
 8002024:	4828      	ldr	r0, [pc, #160]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1cc>)
 8002026:	f7fe ff4f 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002032:	4293      	cmp	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_ADC_ConfigChannel+0x14e>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <HAL_ADC_ConfigChannel+0x1d0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_ADC_ConfigChannel+0x14e>
 8002040:	f44f 6131 	mov.w	r1, #2832	@ 0xb10
 8002044:	4820      	ldr	r0, [pc, #128]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1cc>)
 8002046:	f7fe ff3f 	bl	8000ec8 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d014      	beq.n	800207c <HAL_ADC_ConfigChannel+0x180>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d010      	beq.n	800207c <HAL_ADC_ConfigChannel+0x180>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d00c      	beq.n	800207c <HAL_ADC_ConfigChannel+0x180>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d008      	beq.n	800207c <HAL_ADC_ConfigChannel+0x180>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d004      	beq.n	800207c <HAL_ADC_ConfigChannel+0x180>
 8002072:	f640 3111 	movw	r1, #2833	@ 0xb11
 8002076:	4814      	ldr	r0, [pc, #80]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1cc>)
 8002078:	f7fe ff26 	bl	8000ec8 <assert_failed>
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002082:	2b01      	cmp	r3, #1
 8002084:	d124      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.Ratio + 1U)));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	3301      	adds	r3, #1
 8002090:	fbb2 f4f3 	udiv	r4, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f9e1 	bl	8001460 <LL_ADC_GetResolution>
 800209e:	4603      	mov	r3, r0
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	429c      	cmp	r4, r3
 80020ac:	d924      	bls.n	80020f8 <HAL_ADC_ConfigChannel+0x1fc>
 80020ae:	f640 3115 	movw	r1, #2837	@ 0xb15
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1cc>)
 80020b4:	f7fe ff08 	bl	8000ec8 <assert_failed>
 80020b8:	e01e      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1fc>
 80020ba:	bf00      	nop
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40022100 	.word	0x40022100
 80020c4:	58026000 	.word	0x58026000
 80020c8:	08009ca8 	.word	0x08009ca8
 80020cc:	47ff0000 	.word	0x47ff0000
      assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
    }
    else
#endif /* ADC_VER_V5_V90 */
    {
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	695c      	ldr	r4, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f9c1 	bl	8001460 <LL_ADC_GetResolution>
 80020de:	4603      	mov	r3, r0
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	429c      	cmp	r4, r3
 80020ec:	d904      	bls.n	80020f8 <HAL_ADC_ConfigChannel+0x1fc>
 80020ee:	f640 3121 	movw	r1, #2849	@ 0xb21
 80020f2:	4859      	ldr	r0, [pc, #356]	@ (8002258 <HAL_ADC_ConfigChannel+0x35c>)
 80020f4:	f7fe fee8 	bl	8000ec8 <assert_failed>
    }
  }

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d009      	beq.n	8002114 <HAL_ADC_ConfigChannel+0x218>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002106:	2b01      	cmp	r3, #1
 8002108:	d104      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x218>
 800210a:	f640 3127 	movw	r1, #2855	@ 0xb27
 800210e:	4852      	ldr	r0, [pc, #328]	@ (8002258 <HAL_ADC_ConfigChannel+0x35c>)
 8002110:	f7fe feda 	bl	8000ec8 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a50      	ldr	r2, [pc, #320]	@ (800225c <HAL_ADC_ConfigChannel+0x360>)
 800211a:	4293      	cmp	r3, r2
 800211c:	f000 80ce 	beq.w	80022bc <HAL_ADC_ConfigChannel+0x3c0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	f000 8178 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a4c      	ldr	r2, [pc, #304]	@ (8002260 <HAL_ADC_ConfigChannel+0x364>)
 8002130:	4293      	cmp	r3, r2
 8002132:	f000 8172 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a4a      	ldr	r2, [pc, #296]	@ (8002264 <HAL_ADC_ConfigChannel+0x368>)
 800213c:	4293      	cmp	r3, r2
 800213e:	f000 816c 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a48      	ldr	r2, [pc, #288]	@ (8002268 <HAL_ADC_ConfigChannel+0x36c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	f000 8166 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a46      	ldr	r2, [pc, #280]	@ (800226c <HAL_ADC_ConfigChannel+0x370>)
 8002154:	4293      	cmp	r3, r2
 8002156:	f000 8160 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a44      	ldr	r2, [pc, #272]	@ (8002270 <HAL_ADC_ConfigChannel+0x374>)
 8002160:	4293      	cmp	r3, r2
 8002162:	f000 815a 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a42      	ldr	r2, [pc, #264]	@ (8002274 <HAL_ADC_ConfigChannel+0x378>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f000 8154 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a40      	ldr	r2, [pc, #256]	@ (8002278 <HAL_ADC_ConfigChannel+0x37c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	f000 814e 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3e      	ldr	r2, [pc, #248]	@ (800227c <HAL_ADC_ConfigChannel+0x380>)
 8002184:	4293      	cmp	r3, r2
 8002186:	f000 8148 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3c      	ldr	r2, [pc, #240]	@ (8002280 <HAL_ADC_ConfigChannel+0x384>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f000 8142 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3a      	ldr	r2, [pc, #232]	@ (8002284 <HAL_ADC_ConfigChannel+0x388>)
 800219c:	4293      	cmp	r3, r2
 800219e:	f000 813c 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a38      	ldr	r2, [pc, #224]	@ (8002288 <HAL_ADC_ConfigChannel+0x38c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	f000 8136 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a36      	ldr	r2, [pc, #216]	@ (800228c <HAL_ADC_ConfigChannel+0x390>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f000 8130 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a34      	ldr	r2, [pc, #208]	@ (8002290 <HAL_ADC_ConfigChannel+0x394>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f000 812a 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <HAL_ADC_ConfigChannel+0x398>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f000 8124 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a30      	ldr	r2, [pc, #192]	@ (8002298 <HAL_ADC_ConfigChannel+0x39c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	f000 811e 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2e      	ldr	r2, [pc, #184]	@ (800229c <HAL_ADC_ConfigChannel+0x3a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	f000 8118 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <HAL_ADC_ConfigChannel+0x3a4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f000 8112 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <HAL_ADC_ConfigChannel+0x3a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f000 810c 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <HAL_ADC_ConfigChannel+0x3ac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	f000 8106 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a26      	ldr	r2, [pc, #152]	@ (80022ac <HAL_ADC_ConfigChannel+0x3b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	f000 8100 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <HAL_ADC_ConfigChannel+0x3b4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	f000 80fa 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <HAL_ADC_ConfigChannel+0x3b8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	f000 80f4 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_ADC_ConfigChannel+0x3b4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	f000 80ee 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_ADC_ConfigChannel+0x3bc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	f000 80e8 	beq.w	800241a <HAL_ADC_ConfigChannel+0x51e>
 800224a:	f640 312c 	movw	r1, #2860	@ 0xb2c
 800224e:	4802      	ldr	r0, [pc, #8]	@ (8002258 <HAL_ADC_ConfigChannel+0x35c>)
 8002250:	f7fe fe3a 	bl	8000ec8 <assert_failed>
 8002254:	e0e1      	b.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002256:	bf00      	nop
 8002258:	08009ca8 	.word	0x08009ca8
 800225c:	47ff0000 	.word	0x47ff0000
 8002260:	04300002 	.word	0x04300002
 8002264:	08600004 	.word	0x08600004
 8002268:	0c900008 	.word	0x0c900008
 800226c:	10c00010 	.word	0x10c00010
 8002270:	14f00020 	.word	0x14f00020
 8002274:	19200040 	.word	0x19200040
 8002278:	1d500080 	.word	0x1d500080
 800227c:	21800100 	.word	0x21800100
 8002280:	25b00200 	.word	0x25b00200
 8002284:	2a000400 	.word	0x2a000400
 8002288:	2e300800 	.word	0x2e300800
 800228c:	32601000 	.word	0x32601000
 8002290:	36902000 	.word	0x36902000
 8002294:	3ac04000 	.word	0x3ac04000
 8002298:	3ef08000 	.word	0x3ef08000
 800229c:	43210000 	.word	0x43210000
 80022a0:	47520000 	.word	0x47520000
 80022a4:	4b840000 	.word	0x4b840000
 80022a8:	4fb80000 	.word	0x4fb80000
 80022ac:	cb840000 	.word	0xcb840000
 80022b0:	c7520000 	.word	0xc7520000
 80022b4:	c3210000 	.word	0xc3210000
 80022b8:	cfb80000 	.word	0xcfb80000
  }
  else
  {
    if (hadc->Instance == ADC1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a70      	ldr	r2, [pc, #448]	@ (8002484 <HAL_ADC_ConfigChannel+0x588>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d136      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x438>
    {
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002488 <HAL_ADC_ConfigChannel+0x58c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d031      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6d      	ldr	r2, [pc, #436]	@ (800248c <HAL_ADC_ConfigChannel+0x590>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02c      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6c      	ldr	r2, [pc, #432]	@ (8002490 <HAL_ADC_ConfigChannel+0x594>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d027      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_ADC_ConfigChannel+0x598>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d022      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a69      	ldr	r2, [pc, #420]	@ (8002498 <HAL_ADC_ConfigChannel+0x59c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d01d      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a67      	ldr	r2, [pc, #412]	@ (800249c <HAL_ADC_ConfigChannel+0x5a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d018      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a66      	ldr	r2, [pc, #408]	@ (80024a0 <HAL_ADC_ConfigChannel+0x5a4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a64      	ldr	r2, [pc, #400]	@ (80024a4 <HAL_ADC_ConfigChannel+0x5a8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00e      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a63      	ldr	r2, [pc, #396]	@ (80024a8 <HAL_ADC_ConfigChannel+0x5ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a61      	ldr	r2, [pc, #388]	@ (80024ac <HAL_ADC_ConfigChannel+0x5b0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x438>
 800232a:	f640 3132 	movw	r1, #2866	@ 0xb32
 800232e:	4860      	ldr	r0, [pc, #384]	@ (80024b0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002330:	f7fe fdca 	bl	8000ec8 <assert_failed>
    }
    if (hadc->Instance == ADC2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5e      	ldr	r2, [pc, #376]	@ (80024b4 <HAL_ADC_ConfigChannel+0x5b8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d131      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
    {
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a51      	ldr	r2, [pc, #324]	@ (8002488 <HAL_ADC_ConfigChannel+0x58c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d02c      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a4f      	ldr	r2, [pc, #316]	@ (800248c <HAL_ADC_ConfigChannel+0x590>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d027      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a4e      	ldr	r2, [pc, #312]	@ (8002490 <HAL_ADC_ConfigChannel+0x594>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a4c      	ldr	r2, [pc, #304]	@ (8002494 <HAL_ADC_ConfigChannel+0x598>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01d      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a4b      	ldr	r2, [pc, #300]	@ (8002498 <HAL_ADC_ConfigChannel+0x59c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d018      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a49      	ldr	r2, [pc, #292]	@ (800249c <HAL_ADC_ConfigChannel+0x5a0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a48      	ldr	r2, [pc, #288]	@ (80024a0 <HAL_ADC_ConfigChannel+0x5a4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a46      	ldr	r2, [pc, #280]	@ (80024a4 <HAL_ADC_ConfigChannel+0x5a8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a46      	ldr	r2, [pc, #280]	@ (80024ac <HAL_ADC_ConfigChannel+0x5b0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x4a6>
 8002398:	f640 3136 	movw	r1, #2870	@ 0xb36
 800239c:	4844      	ldr	r0, [pc, #272]	@ (80024b0 <HAL_ADC_ConfigChannel+0x5b4>)
 800239e:	f7fe fd93 	bl	8000ec8 <assert_failed>
    }
#if defined(ADC3)
    /* ADC3 is not available on some STM32H7 products */
    if (hadc->Instance == ADC3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a44      	ldr	r2, [pc, #272]	@ (80024b8 <HAL_ADC_ConfigChannel+0x5bc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d136      	bne.n	800241a <HAL_ADC_ConfigChannel+0x51e>
    {
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <HAL_ADC_ConfigChannel+0x58c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d031      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a34      	ldr	r2, [pc, #208]	@ (800248c <HAL_ADC_ConfigChannel+0x590>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d02c      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <HAL_ADC_ConfigChannel+0x594>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d027      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a31      	ldr	r2, [pc, #196]	@ (8002494 <HAL_ADC_ConfigChannel+0x598>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d022      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002498 <HAL_ADC_ConfigChannel+0x59c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01d      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2e      	ldr	r2, [pc, #184]	@ (800249c <HAL_ADC_ConfigChannel+0x5a0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d018      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2c      	ldr	r2, [pc, #176]	@ (80024a0 <HAL_ADC_ConfigChannel+0x5a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a31      	ldr	r2, [pc, #196]	@ (80024bc <HAL_ADC_ConfigChannel+0x5c0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d00e      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2f      	ldr	r2, [pc, #188]	@ (80024c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d004      	beq.n	800241a <HAL_ADC_ConfigChannel+0x51e>
 8002410:	f640 313c 	movw	r1, #2876	@ 0xb3c
 8002414:	4826      	ldr	r0, [pc, #152]	@ (80024b0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002416:	f7fe fd57 	bl	8000ec8 <assert_failed>
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x52c>
 8002424:	2302      	movs	r3, #2
 8002426:	e362      	b.n	8002aee <HAL_ADC_ConfigChannel+0xbf2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f968 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 8347 	bne.w	8002ad0 <HAL_ADC_ConfigChannel+0xbd4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db4e      	blt.n	80024e8 <HAL_ADC_ConfigChannel+0x5ec>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x56c>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2201      	movs	r2, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	e038      	b.n	80024da <HAL_ADC_ConfigChannel+0x5de>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002478:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800247a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800247c:	2b00      	cmp	r3, #0
 800247e:	d123      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5cc>
  {
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e025      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x5d4>
 8002484:	40022000 	.word	0x40022000
 8002488:	04300002 	.word	0x04300002
 800248c:	08600004 	.word	0x08600004
 8002490:	0c900008 	.word	0x0c900008
 8002494:	10c00010 	.word	0x10c00010
 8002498:	14f00020 	.word	0x14f00020
 800249c:	2a000400 	.word	0x2a000400
 80024a0:	2e300800 	.word	0x2e300800
 80024a4:	32601000 	.word	0x32601000
 80024a8:	43210000 	.word	0x43210000
 80024ac:	4b840000 	.word	0x4b840000
 80024b0:	08009ca8 	.word	0x08009ca8
 80024b4:	40022100 	.word	0x40022100
 80024b8:	58026000 	.word	0x58026000
 80024bc:	36902000 	.word	0x36902000
 80024c0:	3ac04000 	.word	0x3ac04000
 80024c4:	3ef08000 	.word	0x3ef08000
  }
  return __builtin_clz(value);
 80024c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2201      	movs	r2, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	69d1      	ldr	r1, [r2, #28]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f7ff f82b 	bl	8001550 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f903 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 8002504:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f910 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 8002510:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 80cd 	bne.w	80026b4 <HAL_ADC_ConfigChannel+0x7b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800251a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 80c9 	bne.w	80026b4 <HAL_ADC_ConfigChannel+0x7b8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	461a      	mov	r2, r3
 8002530:	f7ff f83a 	bl	80015a8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002534:	4b91      	ldr	r3, [pc, #580]	@ (800277c <HAL_ADC_ConfigChannel+0x880>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800253c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002540:	d10b      	bne.n	800255a <HAL_ADC_ConfigChannel+0x65e>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	e01d      	b.n	8002596 <HAL_ADC_ConfigChannel+0x69a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x684>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	e00a      	b.n	8002596 <HAL_ADC_ConfigChannel+0x69a>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d041      	beq.n	8002624 <HAL_ADC_ConfigChannel+0x728>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6919      	ldr	r1, [r3, #16]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ae:	f7fe ff7b 	bl	80014a8 <LL_ADC_SetOffset>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7e5b      	ldrb	r3, [r3, #25]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_ADC_ConfigChannel+0x6d0>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	7e5b      	ldrb	r3, [r3, #25]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d004      	beq.n	80025cc <HAL_ADC_ConfigChannel+0x6d0>
 80025c2:	f640 318a 	movw	r1, #2954	@ 0xb8a
 80025c6:	486e      	ldr	r0, [pc, #440]	@ (8002780 <HAL_ADC_ConfigChannel+0x884>)
 80025c8:	f7fe fc7e 	bl	8000ec8 <assert_failed>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7e5b      	ldrb	r3, [r3, #25]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x6e6>
 80025dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80025e0:	e000      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x6e8>
 80025e2:	2300      	movs	r3, #0
 80025e4:	461a      	mov	r2, r3
 80025e6:	f7fe ff98 	bl	800151a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7e1b      	ldrb	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x708>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	7e1b      	ldrb	r3, [r3, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d004      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x708>
 80025fa:	f640 318e 	movw	r1, #2958	@ 0xb8e
 80025fe:	4860      	ldr	r0, [pc, #384]	@ (8002780 <HAL_ADC_ConfigChannel+0x884>)
 8002600:	f7fe fc62 	bl	8000ec8 <assert_failed>
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7e1b      	ldrb	r3, [r3, #24]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_ADC_ConfigChannel+0x71e>
 8002614:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002618:	e000      	b.n	800261c <HAL_ADC_ConfigChannel+0x720>
 800261a:	2300      	movs	r3, #0
 800261c:	461a      	mov	r2, r3
 800261e:	f7fe ff63 	bl	80014e8 <LL_ADC_SetDataRightShift>
 8002622:	e047      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x7b8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	429a      	cmp	r2, r3
 8002636:	d107      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x74c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002646:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800264e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_ADC_ConfigChannel+0x770>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800266a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002672:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	069b      	lsls	r3, r3, #26
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x794>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800268e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002696:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	069b      	lsls	r3, r3, #26
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x7b8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f813 	bl	80016e4 <LL_ADC_IsEnabled>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f040 820e 	bne.w	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f7fe ff94 	bl	8001600 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a29      	ldr	r2, [pc, #164]	@ (8002784 <HAL_ADC_ConfigChannel+0x888>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 8134 	bne.w	800294c <HAL_ADC_ConfigChannel+0xa50>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_ADC_ConfigChannel+0x810>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0e9b      	lsrs	r3, r3, #26
 80026fa:	3301      	adds	r3, #1
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2b09      	cmp	r3, #9
 8002702:	bf94      	ite	ls
 8002704:	2301      	movls	r3, #1
 8002706:	2300      	movhi	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e019      	b.n	8002740 <HAL_ADC_ConfigChannel+0x844>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800271e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x82c>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x834>
  return __builtin_clz(value);
 8002728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2b09      	cmp	r3, #9
 8002738:	bf94      	ite	ls
 800273a:	2301      	movls	r3, #1
 800273c:	2300      	movhi	r3, #0
 800273e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	2b00      	cmp	r3, #0
 8002742:	d07f      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x948>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x864>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	3301      	adds	r3, #1
 8002758:	069b      	lsls	r3, r3, #26
 800275a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800275e:	e01b      	b.n	8002798 <HAL_ADC_ConfigChannel+0x89c>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002770:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x88c>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e009      	b.n	8002790 <HAL_ADC_ConfigChannel+0x894>
 800277c:	5c001000 	.word	0x5c001000
 8002780:	08009ca8 	.word	0x08009ca8
 8002784:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x8bc>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	e017      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x8ec>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x8d8>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e003      	b.n	80027dc <HAL_ADC_ConfigChannel+0x8e0>
  return __builtin_clz(value);
 80027d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	ea42 0103 	orr.w	r1, r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_ADC_ConfigChannel+0x912>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	e018      	b.n	8002840 <HAL_ADC_ConfigChannel+0x944>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800281c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x92e>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e003      	b.n	8002832 <HAL_ADC_ConfigChannel+0x936>
  return __builtin_clz(value);
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	430b      	orrs	r3, r1
 8002842:	e07e      	b.n	8002942 <HAL_ADC_ConfigChannel+0xa46>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x964>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800285e:	e015      	b.n	800288c <HAL_ADC_ConfigChannel+0x990>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x980>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x988>
  return __builtin_clz(value);
 800287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x9b0>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	e017      	b.n	80028dc <HAL_ADC_ConfigChannel+0x9e0>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	61bb      	str	r3, [r7, #24]
  return result;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x9cc>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x9d4>
  return __builtin_clz(value);
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_ADC_ConfigChannel+0xa0c>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	3b1e      	subs	r3, #30
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002906:	e01b      	b.n	8002940 <HAL_ADC_ConfigChannel+0xa44>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	60fb      	str	r3, [r7, #12]
  return result;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0xa28>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e003      	b.n	800292c <HAL_ADC_ConfigChannel+0xa30>
  return __builtin_clz(value);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	3b1e      	subs	r3, #30
 800293a:	051b      	lsls	r3, r3, #20
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002940:	430b      	orrs	r3, r1
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	4619      	mov	r1, r3
 8002948:	f7fe fe2e 	bl	80015a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f280 80c6 	bge.w	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a67      	ldr	r2, [pc, #412]	@ (8002af8 <HAL_ADC_ConfigChannel+0xbfc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_ADC_ConfigChannel+0xa6e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a65      	ldr	r2, [pc, #404]	@ (8002afc <HAL_ADC_ConfigChannel+0xc00>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0xa72>
 800296a:	4b65      	ldr	r3, [pc, #404]	@ (8002b00 <HAL_ADC_ConfigChannel+0xc04>)
 800296c:	e000      	b.n	8002970 <HAL_ADC_ConfigChannel+0xa74>
 800296e:	4b65      	ldr	r3, [pc, #404]	@ (8002b04 <HAL_ADC_ConfigChannel+0xc08>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fd67 	bl	8001444 <LL_ADC_GetCommonPathInternalCh>
 8002976:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5e      	ldr	r2, [pc, #376]	@ (8002af8 <HAL_ADC_ConfigChannel+0xbfc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_ADC_ConfigChannel+0xa90>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a5d      	ldr	r2, [pc, #372]	@ (8002afc <HAL_ADC_ConfigChannel+0xc00>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10e      	bne.n	80029aa <HAL_ADC_ConfigChannel+0xaae>
 800298c:	485a      	ldr	r0, [pc, #360]	@ (8002af8 <HAL_ADC_ConfigChannel+0xbfc>)
 800298e:	f7fe fea9 	bl	80016e4 <LL_ADC_IsEnabled>
 8002992:	4604      	mov	r4, r0
 8002994:	4859      	ldr	r0, [pc, #356]	@ (8002afc <HAL_ADC_ConfigChannel+0xc00>)
 8002996:	f7fe fea5 	bl	80016e4 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	4323      	orrs	r3, r4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e008      	b.n	80029bc <HAL_ADC_ConfigChannel+0xac0>
 80029aa:	4857      	ldr	r0, [pc, #348]	@ (8002b08 <HAL_ADC_ConfigChannel+0xc0c>)
 80029ac:	f7fe fe9a 	bl	80016e4 <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d07d      	beq.n	8002abc <HAL_ADC_ConfigChannel+0xbc0>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a51      	ldr	r2, [pc, #324]	@ (8002b0c <HAL_ADC_ConfigChannel+0xc10>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d130      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0xb30>
 80029ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12b      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0xb30>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b08 <HAL_ADC_ConfigChannel+0xc0c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	f040 8081 	bne.w	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a44      	ldr	r2, [pc, #272]	@ (8002af8 <HAL_ADC_ConfigChannel+0xbfc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0xaf8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a43      	ldr	r2, [pc, #268]	@ (8002afc <HAL_ADC_ConfigChannel+0xc00>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0xafc>
 80029f4:	4a42      	ldr	r2, [pc, #264]	@ (8002b00 <HAL_ADC_ConfigChannel+0xc04>)
 80029f6:	e000      	b.n	80029fa <HAL_ADC_ConfigChannel+0xafe>
 80029f8:	4a42      	ldr	r2, [pc, #264]	@ (8002b04 <HAL_ADC_ConfigChannel+0xc08>)
 80029fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7fe fd0b 	bl	800141e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a08:	4b41      	ldr	r3, [pc, #260]	@ (8002b10 <HAL_ADC_ConfigChannel+0xc14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	4a41      	ldr	r2, [pc, #260]	@ (8002b14 <HAL_ADC_ConfigChannel+0xc18>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_ConfigChannel+0xb28>
              {
                wait_loop_index--;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f9      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0xb22>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2a:	e05a      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a39      	ldr	r2, [pc, #228]	@ (8002b18 <HAL_ADC_ConfigChannel+0xc1c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d11e      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0xb78>
 8002a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d119      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0xb78>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a30      	ldr	r2, [pc, #192]	@ (8002b08 <HAL_ADC_ConfigChannel+0xc0c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d14b      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <HAL_ADC_ConfigChannel+0xbfc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0xb62>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a28      	ldr	r2, [pc, #160]	@ (8002afc <HAL_ADC_ConfigChannel+0xc00>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0xb66>
 8002a5e:	4a28      	ldr	r2, [pc, #160]	@ (8002b00 <HAL_ADC_ConfigChannel+0xc04>)
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_ConfigChannel+0xb68>
 8002a62:	4a28      	ldr	r2, [pc, #160]	@ (8002b04 <HAL_ADC_ConfigChannel+0xc08>)
 8002a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7fe fcd6 	bl	800141e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a72:	e036      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_ADC_ConfigChannel+0xc20>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d131      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
 8002a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d12c      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b08 <HAL_ADC_ConfigChannel+0xc0c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d127      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a18      	ldr	r2, [pc, #96]	@ (8002af8 <HAL_ADC_ConfigChannel+0xbfc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0xbaa>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	@ (8002afc <HAL_ADC_ConfigChannel+0xc00>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0xbae>
 8002aa6:	4a16      	ldr	r2, [pc, #88]	@ (8002b00 <HAL_ADC_ConfigChannel+0xc04>)
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_ConfigChannel+0xbb0>
 8002aaa:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_ADC_ConfigChannel+0xc08>)
 8002aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7fe fcb2 	bl	800141e <LL_ADC_SetCommonPathInternalCh>
 8002aba:	e012      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ace:	e008      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3784      	adds	r7, #132	@ 0x84
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40022100 	.word	0x40022100
 8002b00:	40022300 	.word	0x40022300
 8002b04:	58026300 	.word	0x58026300
 8002b08:	58026000 	.word	0x58026000
 8002b0c:	cb840000 	.word	0xcb840000
 8002b10:	24000004 	.word	0x24000004
 8002b14:	053e2d63 	.word	0x053e2d63
 8002b18:	c7520000 	.word	0xc7520000
 8002b1c:	cfb80000 	.word	0xcfb80000

08002b20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002d18 <ADC_ConfigureBoostMode+0x1f8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <ADC_ConfigureBoostMode+0x1c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a79      	ldr	r2, [pc, #484]	@ (8002d1c <ADC_ConfigureBoostMode+0x1fc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d109      	bne.n	8002b50 <ADC_ConfigureBoostMode+0x30>
 8002b3c:	4b78      	ldr	r3, [pc, #480]	@ (8002d20 <ADC_ConfigureBoostMode+0x200>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e008      	b.n	8002b62 <ADC_ConfigureBoostMode+0x42>
 8002b50:	4b74      	ldr	r3, [pc, #464]	@ (8002d24 <ADC_ConfigureBoostMode+0x204>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01c      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b66:	f001 ffdb 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8002b6a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b74:	d010      	beq.n	8002b98 <ADC_ConfigureBoostMode+0x78>
 8002b76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b7a:	d873      	bhi.n	8002c64 <ADC_ConfigureBoostMode+0x144>
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b80:	d002      	beq.n	8002b88 <ADC_ConfigureBoostMode+0x68>
 8002b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b86:	d16d      	bne.n	8002c64 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	60fb      	str	r3, [r7, #12]
        break;
 8002b96:	e068      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	60fb      	str	r3, [r7, #12]
        break;
 8002b9e:	e064      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ba0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f003 fd46 	bl	8006638 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bb6:	d051      	beq.n	8002c5c <ADC_ConfigureBoostMode+0x13c>
 8002bb8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bbc:	d854      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bbe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bc2:	d047      	beq.n	8002c54 <ADC_ConfigureBoostMode+0x134>
 8002bc4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bc8:	d84e      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bce:	d03d      	beq.n	8002c4c <ADC_ConfigureBoostMode+0x12c>
 8002bd0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bd4:	d848      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bda:	d033      	beq.n	8002c44 <ADC_ConfigureBoostMode+0x124>
 8002bdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002be0:	d842      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002be2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002be6:	d029      	beq.n	8002c3c <ADC_ConfigureBoostMode+0x11c>
 8002be8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bec:	d83c      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bf2:	d01a      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002bf4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bf8:	d836      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bfa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bfe:	d014      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c00:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c04:	d830      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c0a:	d00e      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c10:	d82a      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002c12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c16:	d008      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c1c:	d824      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c22:	d002      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c28:	d11e      	bne.n	8002c68 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	e016      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
        break;
 8002c42:	e012      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	60fb      	str	r3, [r7, #12]
        break;
 8002c4a:	e00e      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	60fb      	str	r3, [r7, #12]
        break;
 8002c52:	e00a      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
        break;
 8002c5a:	e006      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	60fb      	str	r3, [r7, #12]
        break;
 8002c62:	e002      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002c68:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c6a:	f7fe fbb9 	bl	80013e0 <HAL_GetREVID>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d815      	bhi.n	8002ca4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <ADC_ConfigureBoostMode+0x208>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d908      	bls.n	8002c92 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c90:	e03e      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca0:	609a      	str	r2, [r3, #8]
}
 8002ca2:	e035      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <ADC_ConfigureBoostMode+0x20c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d808      	bhi.n	8002cc4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	e025      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d30 <ADC_ConfigureBoostMode+0x210>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d80a      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	e016      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <ADC_ConfigureBoostMode+0x214>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d80a      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	e007      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40022100 	.word	0x40022100
 8002d20:	40022300 	.word	0x40022300
 8002d24:	58026300 	.word	0x58026300
 8002d28:	01312d00 	.word	0x01312d00
 8002d2c:	005f5e10 	.word	0x005f5e10
 8002d30:	00bebc20 	.word	0x00bebc20
 8002d34:	017d7840 	.word	0x017d7840

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <__NVIC_SetPriorityGrouping+0x40>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d66:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <__NVIC_SetPriorityGrouping+0x40>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	60d3      	str	r3, [r2, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00
 8002d7c:	05fa0000 	.word	0x05fa0000

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	@ (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	@ (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	@ (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ea4:	d301      	bcc.n	8002eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00f      	b.n	8002eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <SysTick_Config+0x40>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	f7ff ff8e 	bl	8002dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <SysTick_Config+0x40>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec2:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <SysTick_Config+0x40>)
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	e000e010 	.word	0xe000e010

08002ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b07      	cmp	r3, #7
 8002ee4:	d00f      	beq.n	8002f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d00c      	beq.n	8002f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d009      	beq.n	8002f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d006      	beq.n	8002f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d003      	beq.n	8002f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002efe:	2191      	movs	r1, #145	@ 0x91
 8002f00:	4804      	ldr	r0, [pc, #16]	@ (8002f14 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002f02:	f7fd ffe1 	bl	8000ec8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff16 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	08009ce0 	.word	0x08009ce0

08002f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d903      	bls.n	8002f34 <HAL_NVIC_SetPriority+0x1c>
 8002f2c:	21a9      	movs	r1, #169	@ 0xa9
 8002f2e:	480e      	ldr	r0, [pc, #56]	@ (8002f68 <HAL_NVIC_SetPriority+0x50>)
 8002f30:	f7fd ffca 	bl	8000ec8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	d903      	bls.n	8002f42 <HAL_NVIC_SetPriority+0x2a>
 8002f3a:	21aa      	movs	r1, #170	@ 0xaa
 8002f3c:	480a      	ldr	r0, [pc, #40]	@ (8002f68 <HAL_NVIC_SetPriority+0x50>)
 8002f3e:	f7fd ffc3 	bl	8000ec8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f42:	f7ff ff1d 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002f46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f7ff ff6d 	bl	8002e2c <NVIC_EncodePriority>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff3c 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002f60:	bf00      	nop
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	08009ce0 	.word	0x08009ce0

08002f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da03      	bge.n	8002f86 <HAL_NVIC_EnableIRQ+0x1a>
 8002f7e:	21bd      	movs	r1, #189	@ 0xbd
 8002f80:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f82:	f7fd ffa1 	bl	8000ec8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff06 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	08009ce0 	.word	0x08009ce0

08002f9c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff75 	bl	8002e94 <SysTick_Config>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fc2:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_GPIO_Init+0x11c>)
 8002fc4:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a42      	ldr	r2, [pc, #264]	@ (80030d4 <HAL_GPIO_Init+0x120>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02b      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <HAL_GPIO_Init+0x124>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d027      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a40      	ldr	r2, [pc, #256]	@ (80030dc <HAL_GPIO_Init+0x128>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d023      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a3f      	ldr	r2, [pc, #252]	@ (80030e0 <HAL_GPIO_Init+0x12c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a3e      	ldr	r2, [pc, #248]	@ (80030e4 <HAL_GPIO_Init+0x130>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01b      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a3d      	ldr	r2, [pc, #244]	@ (80030e8 <HAL_GPIO_Init+0x134>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d017      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80030ec <HAL_GPIO_Init+0x138>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a3b      	ldr	r2, [pc, #236]	@ (80030f0 <HAL_GPIO_Init+0x13c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00f      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a3a      	ldr	r2, [pc, #232]	@ (80030f4 <HAL_GPIO_Init+0x140>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00b      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a39      	ldr	r2, [pc, #228]	@ (80030f8 <HAL_GPIO_Init+0x144>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <HAL_GPIO_Init+0x148>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x72>
 800301e:	21b3      	movs	r1, #179	@ 0xb3
 8003020:	4837      	ldr	r0, [pc, #220]	@ (8003100 <HAL_GPIO_Init+0x14c>)
 8003022:	f7fd ff51 	bl	8000ec8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_GPIO_Init+0x86>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003038:	d303      	bcc.n	8003042 <HAL_GPIO_Init+0x8e>
 800303a:	21b4      	movs	r1, #180	@ 0xb4
 800303c:	4830      	ldr	r0, [pc, #192]	@ (8003100 <HAL_GPIO_Init+0x14c>)
 800303e:	f7fd ff43 	bl	8000ec8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 824f 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	f000 824a 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b11      	cmp	r3, #17
 800305c:	f000 8245 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b02      	cmp	r3, #2
 8003066:	f000 8240 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b12      	cmp	r3, #18
 8003070:	f000 823b 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800307c:	f000 8235 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003088:	f000 822f 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003094:	f000 8229 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80030a0:	f000 8223 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80030ac:	f000 821d 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80030b8:	f000 8217 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	f000 8212 	beq.w	80034ea <HAL_GPIO_Init+0x536>
 80030c6:	21b5      	movs	r1, #181	@ 0xb5
 80030c8:	480d      	ldr	r0, [pc, #52]	@ (8003100 <HAL_GPIO_Init+0x14c>)
 80030ca:	f7fd fefd 	bl	8000ec8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ce:	e20c      	b.n	80034ea <HAL_GPIO_Init+0x536>
 80030d0:	58000080 	.word	0x58000080
 80030d4:	58020000 	.word	0x58020000
 80030d8:	58020400 	.word	0x58020400
 80030dc:	58020800 	.word	0x58020800
 80030e0:	58020c00 	.word	0x58020c00
 80030e4:	58021000 	.word	0x58021000
 80030e8:	58021400 	.word	0x58021400
 80030ec:	58021800 	.word	0x58021800
 80030f0:	58021c00 	.word	0x58021c00
 80030f4:	58022000 	.word	0x58022000
 80030f8:	58022400 	.word	0x58022400
 80030fc:	58022800 	.word	0x58022800
 8003100:	08009d1c 	.word	0x08009d1c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 81e4 	beq.w	80034e4 <HAL_GPIO_Init+0x530>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x180>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d144      	bne.n	80031be <HAL_GPIO_Init+0x20a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00f      	beq.n	800315c <HAL_GPIO_Init+0x1a8>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d00b      	beq.n	800315c <HAL_GPIO_Init+0x1a8>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d007      	beq.n	800315c <HAL_GPIO_Init+0x1a8>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x1a8>
 8003154:	21c4      	movs	r1, #196	@ 0xc4
 8003156:	489a      	ldr	r0, [pc, #616]	@ (80033c0 <HAL_GPIO_Init+0x40c>)
 8003158:	f7fd feb6 	bl	8000ec8 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003192:	2201      	movs	r2, #1
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 0201 	and.w	r2, r3, #1
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d027      	beq.n	800321a <HAL_GPIO_Init+0x266>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 80031e2:	21d6      	movs	r1, #214	@ 0xd6
 80031e4:	4876      	ldr	r0, [pc, #472]	@ (80033c0 <HAL_GPIO_Init+0x40c>)
 80031e6:	f7fd fe6f 	bl	8000ec8 <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d15b      	bne.n	80032de <HAL_GPIO_Init+0x32a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a66      	ldr	r2, [pc, #408]	@ (80033c4 <HAL_GPIO_Init+0x410>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02b      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a65      	ldr	r2, [pc, #404]	@ (80033c8 <HAL_GPIO_Init+0x414>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d027      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a64      	ldr	r2, [pc, #400]	@ (80033cc <HAL_GPIO_Init+0x418>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d023      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a63      	ldr	r2, [pc, #396]	@ (80033d0 <HAL_GPIO_Init+0x41c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01f      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a62      	ldr	r2, [pc, #392]	@ (80033d4 <HAL_GPIO_Init+0x420>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01b      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a61      	ldr	r2, [pc, #388]	@ (80033d8 <HAL_GPIO_Init+0x424>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d017      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a60      	ldr	r2, [pc, #384]	@ (80033dc <HAL_GPIO_Init+0x428>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a5f      	ldr	r2, [pc, #380]	@ (80033e0 <HAL_GPIO_Init+0x42c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00f      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a5e      	ldr	r2, [pc, #376]	@ (80033e4 <HAL_GPIO_Init+0x430>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00b      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a5d      	ldr	r2, [pc, #372]	@ (80033e8 <HAL_GPIO_Init+0x434>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a5c      	ldr	r2, [pc, #368]	@ (80033ec <HAL_GPIO_Init+0x438>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x2d2>
 800327e:	21e3      	movs	r1, #227	@ 0xe3
 8003280:	484f      	ldr	r0, [pc, #316]	@ (80033c0 <HAL_GPIO_Init+0x40c>)
 8003282:	f7fd fe21 	bl	8000ec8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d903      	bls.n	8003296 <HAL_GPIO_Init+0x2e2>
 800328e:	21e4      	movs	r1, #228	@ 0xe4
 8003290:	484b      	ldr	r0, [pc, #300]	@ (80033c0 <HAL_GPIO_Init+0x40c>)
 8003292:	f7fd fe19 	bl	8000ec8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	69b9      	ldr	r1, [r7, #24]
 80032da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2203      	movs	r2, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0203 	and.w	r2, r3, #3
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80e2 	beq.w	80034e4 <HAL_GPIO_Init+0x530>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_GPIO_Init+0x43c>)
 8003322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003326:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <HAL_GPIO_Init+0x43c>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003330:	4b2f      	ldr	r3, [pc, #188]	@ (80033f0 <HAL_GPIO_Init+0x43c>)
 8003332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333e:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <HAL_GPIO_Init+0x440>)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_GPIO_Init+0x410>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d054      	beq.n	8003414 <HAL_GPIO_Init+0x460>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a16      	ldr	r2, [pc, #88]	@ (80033c8 <HAL_GPIO_Init+0x414>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04e      	beq.n	8003410 <HAL_GPIO_Init+0x45c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <HAL_GPIO_Init+0x418>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d048      	beq.n	800340c <HAL_GPIO_Init+0x458>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <HAL_GPIO_Init+0x41c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d042      	beq.n	8003408 <HAL_GPIO_Init+0x454>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <HAL_GPIO_Init+0x420>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03c      	beq.n	8003404 <HAL_GPIO_Init+0x450>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <HAL_GPIO_Init+0x424>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d036      	beq.n	8003400 <HAL_GPIO_Init+0x44c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <HAL_GPIO_Init+0x428>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d030      	beq.n	80033fc <HAL_GPIO_Init+0x448>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a10      	ldr	r2, [pc, #64]	@ (80033e0 <HAL_GPIO_Init+0x42c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02a      	beq.n	80033f8 <HAL_GPIO_Init+0x444>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0f      	ldr	r2, [pc, #60]	@ (80033e4 <HAL_GPIO_Init+0x430>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x406>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0e      	ldr	r2, [pc, #56]	@ (80033e8 <HAL_GPIO_Init+0x434>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x402>
 80033b2:	2309      	movs	r3, #9
 80033b4:	e02f      	b.n	8003416 <HAL_GPIO_Init+0x462>
 80033b6:	230a      	movs	r3, #10
 80033b8:	e02d      	b.n	8003416 <HAL_GPIO_Init+0x462>
 80033ba:	2308      	movs	r3, #8
 80033bc:	e02b      	b.n	8003416 <HAL_GPIO_Init+0x462>
 80033be:	bf00      	nop
 80033c0:	08009d1c 	.word	0x08009d1c
 80033c4:	58020000 	.word	0x58020000
 80033c8:	58020400 	.word	0x58020400
 80033cc:	58020800 	.word	0x58020800
 80033d0:	58020c00 	.word	0x58020c00
 80033d4:	58021000 	.word	0x58021000
 80033d8:	58021400 	.word	0x58021400
 80033dc:	58021800 	.word	0x58021800
 80033e0:	58021c00 	.word	0x58021c00
 80033e4:	58022000 	.word	0x58022000
 80033e8:	58022400 	.word	0x58022400
 80033ec:	58022800 	.word	0x58022800
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58000400 	.word	0x58000400
 80033f8:	2307      	movs	r3, #7
 80033fa:	e00c      	b.n	8003416 <HAL_GPIO_Init+0x462>
 80033fc:	2306      	movs	r3, #6
 80033fe:	e00a      	b.n	8003416 <HAL_GPIO_Init+0x462>
 8003400:	2305      	movs	r3, #5
 8003402:	e008      	b.n	8003416 <HAL_GPIO_Init+0x462>
 8003404:	2304      	movs	r3, #4
 8003406:	e006      	b.n	8003416 <HAL_GPIO_Init+0x462>
 8003408:	2303      	movs	r3, #3
 800340a:	e004      	b.n	8003416 <HAL_GPIO_Init+0x462>
 800340c:	2302      	movs	r3, #2
 800340e:	e002      	b.n	8003416 <HAL_GPIO_Init+0x462>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_GPIO_Init+0x462>
 8003414:	2300      	movs	r3, #0
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	f002 0203 	and.w	r2, r2, #3
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	4093      	lsls	r3, r2
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003426:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_GPIO_Init+0x550>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x4a6>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800345a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x500>
        {
          temp |= iocurrent;
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x52a>
        {
          temp |= iocurrent;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	3301      	adds	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f ae05 	bne.w	8003104 <HAL_GPIO_Init+0x150>
  }
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	58000400 	.word	0x58000400

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003518:	887b      	ldrh	r3, [r7, #2]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_GPIO_WritePin+0x20>
 800351e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003522:	480e      	ldr	r0, [pc, #56]	@ (800355c <HAL_GPIO_WritePin+0x54>)
 8003524:	f7fd fcd0 	bl	8000ec8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_GPIO_WritePin+0x36>
 800352e:	787b      	ldrb	r3, [r7, #1]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d004      	beq.n	800353e <HAL_GPIO_WritePin+0x36>
 8003534:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8003538:	4808      	ldr	r0, [pc, #32]	@ (800355c <HAL_GPIO_WritePin+0x54>)
 800353a:	f7fd fcc5 	bl	8000ec8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800353e:	787b      	ldrb	r3, [r7, #1]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800354a:	e003      	b.n	8003554 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	041a      	lsls	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	08009d1c 	.word	0x08009d1c

08003560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d007      	beq.n	800357e <HAL_PWREx_ConfigSupply+0x1e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d004      	beq.n	800357e <HAL_PWREx_ConfigSupply+0x1e>
 8003574:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8003578:	481a      	ldr	r0, [pc, #104]	@ (80035e4 <HAL_PWREx_ConfigSupply+0x84>)
 800357a:	f7fd fca5 	bl	8000ec8 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800357e:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <HAL_PWREx_ConfigSupply+0x88>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d00a      	beq.n	80035a0 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800358a:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <HAL_PWREx_ConfigSupply+0x88>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01f      	b.n	80035dc <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e01d      	b.n	80035dc <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_PWREx_ConfigSupply+0x88>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f023 0207 	bic.w	r2, r3, #7
 80035a8:	490f      	ldr	r1, [pc, #60]	@ (80035e8 <HAL_PWREx_ConfigSupply+0x88>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035b0:	f7fd ff0a 	bl	80013c8 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035b6:	e009      	b.n	80035cc <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035b8:	f7fd ff06 	bl	80013c8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035c6:	d901      	bls.n	80035cc <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e007      	b.n	80035dc <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035cc:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_PWREx_ConfigSupply+0x88>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035d8:	d1ee      	bne.n	80035b8 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08009d58 	.word	0x08009d58
 80035e8:	58024800 	.word	0x58024800

080035ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	@ 0x30
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f000 bd9c 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d028      	beq.n	800365a <HAL_RCC_OscConfig+0x6e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d122      	bne.n	800365a <HAL_RCC_OscConfig+0x6e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11c      	bne.n	800365a <HAL_RCC_OscConfig+0x6e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <HAL_RCC_OscConfig+0x6e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d110      	bne.n	800365a <HAL_RCC_OscConfig+0x6e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_RCC_OscConfig+0x6e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <HAL_RCC_OscConfig+0x6e>
 8003650:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8003654:	4897      	ldr	r0, [pc, #604]	@ (80038b4 <HAL_RCC_OscConfig+0x2c8>)
 8003656:	f7fd fc37 	bl	8000ec8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 809d 	beq.w	80037a2 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <HAL_RCC_OscConfig+0xa2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003678:	d009      	beq.n	800368e <HAL_RCC_OscConfig+0xa2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003682:	d004      	beq.n	800368e <HAL_RCC_OscConfig+0xa2>
 8003684:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8003688:	488a      	ldr	r0, [pc, #552]	@ (80038b4 <HAL_RCC_OscConfig+0x2c8>)
 800368a:	f7fd fc1d 	bl	8000ec8 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800368e:	4b8a      	ldr	r3, [pc, #552]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003698:	4b87      	ldr	r3, [pc, #540]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d007      	beq.n	80036b4 <HAL_RCC_OscConfig+0xc8>
 80036a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a6:	2b18      	cmp	r3, #24
 80036a8:	d111      	bne.n	80036ce <HAL_RCC_OscConfig+0xe2>
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0xe2>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b80      	ldr	r3, [pc, #512]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d06f      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1b4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d16b      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f000 bd35 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0xfa>
 80036d8:	4b77      	ldr	r3, [pc, #476]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a76      	ldr	r2, [pc, #472]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e02e      	b.n	8003744 <HAL_RCC_OscConfig+0x158>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x11c>
 80036ee:	4b72      	ldr	r3, [pc, #456]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a71      	ldr	r2, [pc, #452]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b6f      	ldr	r3, [pc, #444]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6e      	ldr	r2, [pc, #440]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e01d      	b.n	8003744 <HAL_RCC_OscConfig+0x158>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x140>
 8003712:	4b69      	ldr	r3, [pc, #420]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a68      	ldr	r2, [pc, #416]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a65      	ldr	r2, [pc, #404]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0x158>
 800372c:	4b62      	ldr	r3, [pc, #392]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a61      	ldr	r2, [pc, #388]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b5f      	ldr	r3, [pc, #380]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5e      	ldr	r2, [pc, #376]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d014      	beq.n	8003776 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd fe3c 	bl	80013c8 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003752:	e009      	b.n	8003768 <HAL_RCC_OscConfig+0x17c>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fd fe38 	bl	80013c8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	@ 0x64
 8003760:	d902      	bls.n	8003768 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	f000 bce8 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003768:	4b53      	ldr	r3, [pc, #332]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <HAL_RCC_OscConfig+0x168>
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fd fe27 	bl	80013c8 <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800377c:	e009      	b.n	8003792 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800377e:	f7fd fe23 	bl	80013c8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	@ 0x64
 800378a:	d902      	bls.n	8003792 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	f000 bcd3 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003792:	4b49      	ldr	r3, [pc, #292]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ef      	bne.n	800377e <HAL_RCC_OscConfig+0x192>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x1b6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80f5 	beq.w	800399a <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <HAL_RCC_OscConfig+0x1fe>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d014      	beq.n	80037ea <HAL_RCC_OscConfig+0x1fe>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_OscConfig+0x1fe>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	d00c      	beq.n	80037ea <HAL_RCC_OscConfig+0x1fe>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b11      	cmp	r3, #17
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_OscConfig+0x1fe>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b19      	cmp	r3, #25
 80037de:	d004      	beq.n	80037ea <HAL_RCC_OscConfig+0x1fe>
 80037e0:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80037e4:	4833      	ldr	r0, [pc, #204]	@ (80038b4 <HAL_RCC_OscConfig+0x2c8>)
 80037e6:	f7fd fb6f 	bl	8000ec8 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80037f0:	d904      	bls.n	80037fc <HAL_RCC_OscConfig+0x210>
 80037f2:	f240 11db 	movw	r1, #475	@ 0x1db
 80037f6:	482f      	ldr	r0, [pc, #188]	@ (80038b4 <HAL_RCC_OscConfig+0x2c8>)
 80037f8:	f7fd fb66 	bl	8000ec8 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fc:	4b2e      	ldr	r3, [pc, #184]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003804:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003806:	4b2c      	ldr	r3, [pc, #176]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_RCC_OscConfig+0x236>
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b18      	cmp	r3, #24
 8003816:	d15c      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2e6>
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d157      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003822:	4b25      	ldr	r3, [pc, #148]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_RCC_OscConfig+0x250>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f000 bc7e 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800383c:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0219 	bic.w	r2, r3, #25
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	491b      	ldr	r1, [pc, #108]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fd fdbb 	bl	80013c8 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003854:	e009      	b.n	800386a <HAL_RCC_OscConfig+0x27e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003856:	f7fd fdb7 	bl	80013c8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d902      	bls.n	800386a <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	f000 bc67 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ef      	beq.n	8003856 <HAL_RCC_OscConfig+0x26a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	f7fd fdb3 	bl	80013e0 <HAL_GetREVID>
 800387a:	4603      	mov	r3, r0
 800387c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003880:	4293      	cmp	r3, r2
 8003882:	d81b      	bhi.n	80038bc <HAL_RCC_OscConfig+0x2d0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d108      	bne.n	800389e <HAL_RCC_OscConfig+0x2b2>
 800388c:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003894:	4a08      	ldr	r2, [pc, #32]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	e07d      	b.n	800399a <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	031b      	lsls	r3, r3, #12
 80038ac:	4902      	ldr	r1, [pc, #8]	@ (80038b8 <HAL_RCC_OscConfig+0x2cc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b2:	e072      	b.n	800399a <HAL_RCC_OscConfig+0x3ae>
 80038b4:	08009d94 	.word	0x08009d94
 80038b8:	58024400 	.word	0x58024400
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b97      	ldr	r3, [pc, #604]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	4994      	ldr	r1, [pc, #592]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	e063      	b.n	800399a <HAL_RCC_OscConfig+0x3ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d046      	beq.n	8003968 <HAL_RCC_OscConfig+0x37c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038da:	4b90      	ldr	r3, [pc, #576]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0219 	bic.w	r2, r3, #25
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	498d      	ldr	r1, [pc, #564]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fd6c 	bl	80013c8 <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f2:	e009      	b.n	8003908 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd fd68 	bl	80013c8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	f000 bc18 	b.w	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003908:	4b84      	ldr	r3, [pc, #528]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	f7fd fd64 	bl	80013e0 <HAL_GetREVID>
 8003918:	4603      	mov	r3, r0
 800391a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800391e:	4293      	cmp	r3, r2
 8003920:	d817      	bhi.n	8003952 <HAL_RCC_OscConfig+0x366>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b40      	cmp	r3, #64	@ 0x40
 8003928:	d108      	bne.n	800393c <HAL_RCC_OscConfig+0x350>
 800392a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003932:	4a7a      	ldr	r2, [pc, #488]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003938:	6053      	str	r3, [r2, #4]
 800393a:	e02e      	b.n	800399a <HAL_RCC_OscConfig+0x3ae>
 800393c:	4b77      	ldr	r3, [pc, #476]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	4974      	ldr	r1, [pc, #464]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	e023      	b.n	800399a <HAL_RCC_OscConfig+0x3ae>
 8003952:	4b72      	ldr	r3, [pc, #456]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	061b      	lsls	r3, r3, #24
 8003960:	496e      	ldr	r1, [pc, #440]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
 8003966:	e018      	b.n	800399a <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003968:	4b6c      	ldr	r3, [pc, #432]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fd28 	bl	80013c8 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397c:	f7fd fd24 	bl	80013c8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e3d4      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800398e:	4b63      	ldr	r3, [pc, #396]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80c4 	beq.w	8003b30 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3d6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d004      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3d6>
 80039b8:	f240 212b 	movw	r1, #555	@ 0x22b
 80039bc:	4858      	ldr	r0, [pc, #352]	@ (8003b20 <HAL_RCC_OscConfig+0x534>)
 80039be:	f7fd fa83 	bl	8000ec8 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80039c8:	d904      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3e8>
 80039ca:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80039ce:	4854      	ldr	r0, [pc, #336]	@ (8003b20 <HAL_RCC_OscConfig+0x534>)
 80039d0:	f7fd fa7a 	bl	8000ec8 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d4:	4b51      	ldr	r3, [pc, #324]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039de:	4b4f      	ldr	r3, [pc, #316]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d007      	beq.n	80039fa <HAL_RCC_OscConfig+0x40e>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b18      	cmp	r3, #24
 80039ee:	d13a      	bne.n	8003a66 <HAL_RCC_OscConfig+0x47a>
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d135      	bne.n	8003a66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fa:	4b48      	ldr	r3, [pc, #288]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x426>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e392      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a12:	f7fd fce5 	bl	80013e0 <HAL_GetREVID>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d817      	bhi.n	8003a50 <HAL_RCC_OscConfig+0x464>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d108      	bne.n	8003a3a <HAL_RCC_OscConfig+0x44e>
 8003a28:	4b3c      	ldr	r3, [pc, #240]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a30:	4a3a      	ldr	r2, [pc, #232]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a38:	e07a      	b.n	8003b30 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3a:	4b38      	ldr	r3, [pc, #224]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	069b      	lsls	r3, r3, #26
 8003a48:	4934      	ldr	r1, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a4e:	e06f      	b.n	8003b30 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a50:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	492f      	ldr	r1, [pc, #188]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a64:	e064      	b.n	8003b30 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d042      	beq.n	8003af4 <HAL_RCC_OscConfig+0x508>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2a      	ldr	r2, [pc, #168]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fca5 	bl	80013c8 <HAL_GetTick>
 8003a7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x4a8>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a82:	f7fd fca1 	bl	80013c8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e351      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a94:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aa0:	f7fd fc9e 	bl	80013e0 <HAL_GetREVID>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d817      	bhi.n	8003ade <HAL_RCC_OscConfig+0x4f2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d108      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4dc>
 8003ab6:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003abe:	4a17      	ldr	r2, [pc, #92]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ac4:	6053      	str	r3, [r2, #4]
 8003ac6:	e033      	b.n	8003b30 <HAL_RCC_OscConfig+0x544>
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	069b      	lsls	r3, r3, #26
 8003ad6:	4911      	ldr	r1, [pc, #68]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
 8003adc:	e028      	b.n	8003b30 <HAL_RCC_OscConfig+0x544>
 8003ade:	4b0f      	ldr	r3, [pc, #60]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	490b      	ldr	r1, [pc, #44]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60cb      	str	r3, [r1, #12]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003af4:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <HAL_RCC_OscConfig+0x530>)
 8003afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd fc62 	bl	80013c8 <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b06:	e00d      	b.n	8003b24 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b08:	f7fd fc5e 	bl	80013c8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d906      	bls.n	8003b24 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e30e      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
 8003b1a:	bf00      	nop
 8003b1c:	58024400 	.word	0x58024400
 8003b20:	08009d94 	.word	0x08009d94
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b24:	4b96      	ldr	r3, [pc, #600]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1eb      	bne.n	8003b08 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d043      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x5d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_OscConfig+0x56a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d004      	beq.n	8003b56 <HAL_RCC_OscConfig+0x56a>
 8003b4c:	f240 216d 	movw	r1, #621	@ 0x26d
 8003b50:	488c      	ldr	r0, [pc, #560]	@ (8003d84 <HAL_RCC_OscConfig+0x798>)
 8003b52:	f7fd f9b9 	bl	8000ec8 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d019      	beq.n	8003b92 <HAL_RCC_OscConfig+0x5a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b88      	ldr	r3, [pc, #544]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	4a87      	ldr	r2, [pc, #540]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fd fc2d 	bl	80013c8 <HAL_GetTick>
 8003b6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x598>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fd fc29 	bl	80013c8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e2d9      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b84:	4b7e      	ldr	r3, [pc, #504]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x586>
 8003b90:	e018      	b.n	8003bc4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b92:	4b7b      	ldr	r3, [pc, #492]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b96:	4a7a      	ldr	r2, [pc, #488]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fc13 	bl	80013c8 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fc0f 	bl	80013c8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e2bf      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bb8:	4b71      	ldr	r3, [pc, #452]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d043      	beq.n	8003c58 <HAL_RCC_OscConfig+0x66c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_OscConfig+0x5fe>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d004      	beq.n	8003bea <HAL_RCC_OscConfig+0x5fe>
 8003be0:	f44f 7126 	mov.w	r1, #664	@ 0x298
 8003be4:	4867      	ldr	r0, [pc, #412]	@ (8003d84 <HAL_RCC_OscConfig+0x798>)
 8003be6:	f7fd f96f 	bl	8000ec8 <assert_failed>

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d019      	beq.n	8003c26 <HAL_RCC_OscConfig+0x63a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bf2:	4b63      	ldr	r3, [pc, #396]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a62      	ldr	r2, [pc, #392]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fbe3 	bl	80013c8 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x62c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c06:	f7fd fbdf 	bl	80013c8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e28f      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x61a>
 8003c24:	e018      	b.n	8003c58 <HAL_RCC_OscConfig+0x66c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c26:	4b56      	ldr	r3, [pc, #344]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a55      	ldr	r2, [pc, #340]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c32:	f7fd fbc9 	bl	80013c8 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x660>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c3a:	f7fd fbc5 	bl	80013c8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e275      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8099 	beq.w	8003d98 <HAL_RCC_OscConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x69c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d008      	beq.n	8003c88 <HAL_RCC_OscConfig+0x69c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCC_OscConfig+0x69c>
 8003c7e:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8003c82:	4840      	ldr	r0, [pc, #256]	@ (8003d84 <HAL_RCC_OscConfig+0x798>)
 8003c84:	f7fd f920 	bl	8000ec8 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c88:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <HAL_RCC_OscConfig+0x79c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d88 <HAL_RCC_OscConfig+0x79c>)
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c94:	f7fd fb98 	bl	80013c8 <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x6c2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9c:	f7fd fb94 	bl	80013c8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x6c2>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e244      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cae:	4b36      	ldr	r3, [pc, #216]	@ (8003d88 <HAL_RCC_OscConfig+0x79c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x6b0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x6e4>
 8003cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cce:	e02d      	b.n	8003d2c <HAL_RCC_OscConfig+0x740>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x706>
 8003cd8:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	4a28      	ldr	r2, [pc, #160]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce4:	4b26      	ldr	r3, [pc, #152]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x740>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x728>
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d06:	4b1e      	ldr	r3, [pc, #120]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0x740>
 8003d14:	4b1a      	ldr	r3, [pc, #104]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d20:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d24:	4a16      	ldr	r2, [pc, #88]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d26:	f023 0304 	bic.w	r3, r3, #4
 8003d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCC_OscConfig+0x774>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd fb48 	bl	80013c8 <HAL_GetTick>
 8003d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x766>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fb44 	bl	80013c8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x766>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1f2      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d52:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_OscConfig+0x794>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_RCC_OscConfig+0x750>
 8003d5e:	e01b      	b.n	8003d98 <HAL_RCC_OscConfig+0x7ac>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd fb32 	bl	80013c8 <HAL_GetTick>
 8003d64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d66:	e011      	b.n	8003d8c <HAL_RCC_OscConfig+0x7a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd fb2e 	bl	80013c8 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d908      	bls.n	8003d8c <HAL_RCC_OscConfig+0x7a0>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1dc      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	08009d94 	.word	0x08009d94
 8003d88:	58024800 	.word	0x58024800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d8c:	4b97      	ldr	r3, [pc, #604]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e7      	bne.n	8003d68 <HAL_RCC_OscConfig+0x77c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_RCC_OscConfig+0x7ce>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_OscConfig+0x7ce>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d004      	beq.n	8003dba <HAL_RCC_OscConfig+0x7ce>
 8003db0:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8003db4:	488e      	ldr	r0, [pc, #568]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003db6:	f7fd f887 	bl	8000ec8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 81b9 	beq.w	8004136 <HAL_RCC_OscConfig+0xb4a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dc4:	4b89      	ldr	r3, [pc, #548]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dcc:	2b18      	cmp	r3, #24
 8003dce:	f000 813f 	beq.w	8004050 <HAL_RCC_OscConfig+0xa64>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	f040 8120 	bne.w	800401c <HAL_RCC_OscConfig+0xa30>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_OscConfig+0x81a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x81a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_OscConfig+0x81a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d004      	beq.n	8003e06 <HAL_RCC_OscConfig+0x81a>
 8003dfc:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8003e00:	487b      	ldr	r0, [pc, #492]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003e02:	f7fd f861 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCC_OscConfig+0x844>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d00c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x844>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCC_OscConfig+0x844>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d004      	beq.n	8003e30 <HAL_RCC_OscConfig+0x844>
 8003e26:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8003e2a:	4871      	ldr	r0, [pc, #452]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003e2c:	f7fd f84c 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCC_OscConfig+0x85e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCC_OscConfig+0x85e>
 8003e40:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8003e44:	486a      	ldr	r0, [pc, #424]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003e46:	f7fd f83f 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_OscConfig+0x86e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e58:	d904      	bls.n	8003e64 <HAL_RCC_OscConfig+0x878>
 8003e5a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003e5e:	4864      	ldr	r0, [pc, #400]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003e60:	f7fd f832 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d904      	bls.n	8003e76 <HAL_RCC_OscConfig+0x88a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e74:	d904      	bls.n	8003e80 <HAL_RCC_OscConfig+0x894>
 8003e76:	f240 3101 	movw	r1, #769	@ 0x301
 8003e7a:	485d      	ldr	r0, [pc, #372]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003e7c:	f7fd f824 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_RCC_OscConfig+0x8a4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	2b80      	cmp	r3, #128	@ 0x80
 8003e8e:	d904      	bls.n	8003e9a <HAL_RCC_OscConfig+0x8ae>
 8003e90:	f240 3102 	movw	r1, #770	@ 0x302
 8003e94:	4856      	ldr	r0, [pc, #344]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003e96:	f7fd f817 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_OscConfig+0x8be>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	2b80      	cmp	r3, #128	@ 0x80
 8003ea8:	d904      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x8c8>
 8003eaa:	f240 3103 	movw	r1, #771	@ 0x303
 8003eae:	4850      	ldr	r0, [pc, #320]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003eb0:	f7fd f80a 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x8d8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	2b80      	cmp	r3, #128	@ 0x80
 8003ec2:	d904      	bls.n	8003ece <HAL_RCC_OscConfig+0x8e2>
 8003ec4:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8003ec8:	4849      	ldr	r0, [pc, #292]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003eca:	f7fc fffd 	bl	8000ec8 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed6:	d304      	bcc.n	8003ee2 <HAL_RCC_OscConfig+0x8f6>
 8003ed8:	f240 3105 	movw	r1, #773	@ 0x305
 8003edc:	4844      	ldr	r0, [pc, #272]	@ (8003ff0 <HAL_RCC_OscConfig+0xa04>)
 8003ede:	f7fc fff3 	bl	8000ec8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	4b42      	ldr	r3, [pc, #264]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a41      	ldr	r2, [pc, #260]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd fa6b 	bl	80013c8 <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x91c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd fa67 	bl	80013c8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x91c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e117      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f08:	4b38      	ldr	r3, [pc, #224]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x90a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f14:	4b35      	ldr	r3, [pc, #212]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f18:	4b36      	ldr	r3, [pc, #216]	@ (8003ff4 <HAL_RCC_OscConfig+0xa08>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	430a      	orrs	r2, r1
 8003f28:	4930      	ldr	r1, [pc, #192]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	3b01      	subs	r3, #1
 8003f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	025b      	lsls	r3, r3, #9
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	3b01      	subs	r3, #1
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f5e:	4923      	ldr	r1, [pc, #140]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f64:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4a20      	ldr	r2, [pc, #128]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f70:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f74:	4b20      	ldr	r3, [pc, #128]	@ (8003ff8 <HAL_RCC_OscConfig+0xa0c>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f7c:	00d2      	lsls	r2, r2, #3
 8003f7e:	491b      	ldr	r1, [pc, #108]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f84:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	f023 020c 	bic.w	r2, r3, #12
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	4916      	ldr	r1, [pc, #88]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f96:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	f023 0202 	bic.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	4912      	ldr	r1, [pc, #72]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fa8:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	4a0f      	ldr	r2, [pc, #60]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fcc:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4a06      	ldr	r2, [pc, #24]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a03      	ldr	r2, [pc, #12]	@ (8003fec <HAL_RCC_OscConfig+0xa00>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd f9f0 	bl	80013c8 <HAL_GetTick>
 8003fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fea:	e010      	b.n	800400e <HAL_RCC_OscConfig+0xa22>
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	08009d94 	.word	0x08009d94
 8003ff4:	fffffc0c 	.word	0xfffffc0c
 8003ff8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fd f9e4 	bl	80013c8 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xa22>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e094      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800400e:	4b4c      	ldr	r3, [pc, #304]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0xa10>
 800401a:	e08c      	b.n	8004136 <HAL_RCC_OscConfig+0xb4a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b48      	ldr	r3, [pc, #288]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a47      	ldr	r2, [pc, #284]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd f9ce 	bl	80013c8 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xa56>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd f9ca 	bl	80013c8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xa56>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e07a      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004042:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0xa44>
 800404e:	e072      	b.n	8004136 <HAL_RCC_OscConfig+0xb4a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004050:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004056:	4b3a      	ldr	r3, [pc, #232]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	2b01      	cmp	r3, #1
 8004062:	d031      	beq.n	80040c8 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0203 	and.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d12a      	bne.n	80040c8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d122      	bne.n	80040c8 <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d11a      	bne.n	80040c8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	0a5b      	lsrs	r3, r3, #9
 8004096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d111      	bne.n	80040c8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d108      	bne.n	80040c8 <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0xae0>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e035      	b.n	8004138 <HAL_RCC_OscConfig+0xb4c>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d029      	beq.n	8004136 <HAL_RCC_OscConfig+0xb4a>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ea:	d304      	bcc.n	80040f6 <HAL_RCC_OscConfig+0xb0a>
 80040ec:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 80040f0:	4814      	ldr	r0, [pc, #80]	@ (8004144 <HAL_RCC_OscConfig+0xb58>)
 80040f2:	f7fc fee9 	bl	8000ec8 <assert_failed>
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004102:	f7fd f961 	bl	80013c8 <HAL_GetTick>
 8004106:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004108:	bf00      	nop
 800410a:	f7fd f95d 	bl	80013c8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	4293      	cmp	r3, r2
 8004114:	d0f9      	beq.n	800410a <HAL_RCC_OscConfig+0xb1e>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411a:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_RCC_OscConfig+0xb5c>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004122:	00d2      	lsls	r2, r2, #3
 8004124:	4906      	ldr	r1, [pc, #24]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004126:	4313      	orrs	r3, r2
 8004128:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_RCC_OscConfig+0xb54>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3730      	adds	r7, #48	@ 0x30
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	58024400 	.word	0x58024400
 8004144:	08009d94 	.word	0x08009d94
 8004148:	ffff0007 	.word	0xffff0007

0800414c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e354      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_RCC_ClockConfig+0x24>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b3f      	cmp	r3, #63	@ 0x3f
 800416e:	d904      	bls.n	800417a <HAL_RCC_ClockConfig+0x2e>
 8004170:	f240 31a7 	movw	r1, #935	@ 0x3a7
 8004174:	4827      	ldr	r0, [pc, #156]	@ (8004214 <HAL_RCC_ClockConfig+0xc8>)
 8004176:	f7fc fea7 	bl	8000ec8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d031      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d02e      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d02b      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d025      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d022      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d01f      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	d01c      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d019      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b09      	cmp	r3, #9
 80041b4:	d016      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b0a      	cmp	r3, #10
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b0b      	cmp	r3, #11
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b0d      	cmp	r3, #13
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b0e      	cmp	r3, #14
 80041d2:	d007      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	d004      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x98>
 80041da:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 80041de:	480d      	ldr	r0, [pc, #52]	@ (8004214 <HAL_RCC_ClockConfig+0xc8>)
 80041e0:	f7fc fe72 	bl	8000ec8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <HAL_RCC_ClockConfig+0xcc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d914      	bls.n	800421c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_ClockConfig+0xcc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	4907      	ldr	r1, [pc, #28]	@ (8004218 <HAL_RCC_ClockConfig+0xcc>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_RCC_ClockConfig+0xcc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e2fa      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
 8004214:	08009d94 	.word	0x08009d94
 8004218:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d029      	beq.n	800427c <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	4b7e      	ldr	r3, [pc, #504]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004234:	429a      	cmp	r2, r3
 8004236:	d921      	bls.n	800427c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d014      	beq.n	800426a <HAL_RCC_ClockConfig+0x11e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d010      	beq.n	800426a <HAL_RCC_ClockConfig+0x11e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b50      	cmp	r3, #80	@ 0x50
 800424e:	d00c      	beq.n	800426a <HAL_RCC_ClockConfig+0x11e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b60      	cmp	r3, #96	@ 0x60
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x11e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b70      	cmp	r3, #112	@ 0x70
 800425e:	d004      	beq.n	800426a <HAL_RCC_ClockConfig+0x11e>
 8004260:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
 8004264:	4871      	ldr	r0, [pc, #452]	@ (800442c <HAL_RCC_ClockConfig+0x2e0>)
 8004266:	f7fc fe2f 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800426a:	4b6f      	ldr	r3, [pc, #444]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	496c      	ldr	r1, [pc, #432]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d029      	beq.n	80042dc <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004294:	429a      	cmp	r2, r3
 8004296:	d921      	bls.n	80042dc <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d014      	beq.n	80042ca <HAL_RCC_ClockConfig+0x17e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d010      	beq.n	80042ca <HAL_RCC_ClockConfig+0x17e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b50      	cmp	r3, #80	@ 0x50
 80042ae:	d00c      	beq.n	80042ca <HAL_RCC_ClockConfig+0x17e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	2b60      	cmp	r3, #96	@ 0x60
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x17e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b70      	cmp	r3, #112	@ 0x70
 80042be:	d004      	beq.n	80042ca <HAL_RCC_ClockConfig+0x17e>
 80042c0:	f240 31d6 	movw	r1, #982	@ 0x3d6
 80042c4:	4859      	ldr	r0, [pc, #356]	@ (800442c <HAL_RCC_ClockConfig+0x2e0>)
 80042c6:	f7fc fdff 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ca:	4b57      	ldr	r3, [pc, #348]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	4954      	ldr	r1, [pc, #336]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02d      	beq.n	8004344 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d925      	bls.n	8004344 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d018      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004308:	d013      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004312:	d00e      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800431c:	d009      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004326:	d004      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
 8004328:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800432c:	483f      	ldr	r0, [pc, #252]	@ (800442c <HAL_RCC_ClockConfig+0x2e0>)
 800432e:	f7fc fdcb 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004332:	4b3d      	ldr	r3, [pc, #244]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	493a      	ldr	r1, [pc, #232]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d029      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800435c:	429a      	cmp	r2, r3
 800435e:	d921      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d014      	beq.n	8004392 <HAL_RCC_ClockConfig+0x246>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2b40      	cmp	r3, #64	@ 0x40
 800436e:	d010      	beq.n	8004392 <HAL_RCC_ClockConfig+0x246>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b50      	cmp	r3, #80	@ 0x50
 8004376:	d00c      	beq.n	8004392 <HAL_RCC_ClockConfig+0x246>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b60      	cmp	r3, #96	@ 0x60
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x246>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2b70      	cmp	r3, #112	@ 0x70
 8004386:	d004      	beq.n	8004392 <HAL_RCC_ClockConfig+0x246>
 8004388:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 800438c:	4827      	ldr	r0, [pc, #156]	@ (800442c <HAL_RCC_ClockConfig+0x2e0>)
 800438e:	f7fc fd9b 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004392:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4922      	ldr	r1, [pc, #136]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03f      	beq.n	8004430 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	429a      	cmp	r2, r3
 80043be:	d937      	bls.n	8004430 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d024      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	d01c      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b0a      	cmp	r3, #10
 80043de:	d018      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b0b      	cmp	r3, #11
 80043e6:	d014      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d010      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b0d      	cmp	r3, #13
 80043f6:	d00c      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b0e      	cmp	r3, #14
 80043fe:	d008      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b0f      	cmp	r3, #15
 8004406:	d004      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2c6>
 8004408:	f240 410c 	movw	r1, #1036	@ 0x40c
 800440c:	4807      	ldr	r0, [pc, #28]	@ (800442c <HAL_RCC_ClockConfig+0x2e0>)
 800440e:	f7fc fd5b 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004412:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f023 020f 	bic.w	r2, r3, #15
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4902      	ldr	r1, [pc, #8]	@ (8004428 <HAL_RCC_ClockConfig+0x2dc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	618b      	str	r3, [r1, #24]
 8004424:	e004      	b.n	8004430 <HAL_RCC_ClockConfig+0x2e4>
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400
 800442c:	08009d94 	.word	0x08009d94
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 809c 	beq.w	8004576 <HAL_RCC_ClockConfig+0x42a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02c      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444e:	d027      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004458:	d022      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004462:	d01d      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800446c:	d018      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004476:	d013      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004480:	d00e      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800448a:	d009      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004494:	d004      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x354>
 8004496:	f240 411c 	movw	r1, #1052	@ 0x41c
 800449a:	4863      	ldr	r0, [pc, #396]	@ (8004628 <HAL_RCC_ClockConfig+0x4dc>)
 800449c:	f7fc fd14 	bl	8000ec8 <assert_failed>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d010      	beq.n	80044ca <HAL_RCC_ClockConfig+0x37e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00c      	beq.n	80044ca <HAL_RCC_ClockConfig+0x37e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x37e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d004      	beq.n	80044ca <HAL_RCC_ClockConfig+0x37e>
 80044c0:	f240 411d 	movw	r1, #1053	@ 0x41d
 80044c4:	4858      	ldr	r0, [pc, #352]	@ (8004628 <HAL_RCC_ClockConfig+0x4dc>)
 80044c6:	f7fc fcff 	bl	8000ec8 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044ca:	4b58      	ldr	r3, [pc, #352]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4955      	ldr	r1, [pc, #340]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x3a8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044e4:	4b51      	ldr	r3, [pc, #324]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d121      	bne.n	8004534 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e18a      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d107      	bne.n	800450c <HAL_RCC_ClockConfig+0x3c0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044fc:	4b4b      	ldr	r3, [pc, #300]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d115      	bne.n	8004534 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e17e      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <HAL_RCC_ClockConfig+0x3d8>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004514:	4b45      	ldr	r3, [pc, #276]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e172      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004524:	4b41      	ldr	r3, [pc, #260]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e16a      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004534:	4b3d      	ldr	r3, [pc, #244]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f023 0207 	bic.w	r2, r3, #7
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	493a      	ldr	r1, [pc, #232]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004546:	f7fc ff3f 	bl	80013c8 <HAL_GetTick>
 800454a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454c:	e00a      	b.n	8004564 <HAL_RCC_ClockConfig+0x418>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454e:	f7fc ff3b 	bl	80013c8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_ClockConfig+0x418>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e152      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004564:	4b31      	ldr	r3, [pc, #196]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	429a      	cmp	r2, r3
 8004574:	d1eb      	bne.n	800454e <HAL_RCC_ClockConfig+0x402>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d039      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	4b29      	ldr	r3, [pc, #164]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	429a      	cmp	r2, r3
 8004590:	d231      	bcs.n	80045f6 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d024      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d020      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	d01c      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b0a      	cmp	r3, #10
 80045b0:	d018      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b0b      	cmp	r3, #11
 80045b8:	d014      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d010      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b0d      	cmp	r3, #13
 80045c8:	d00c      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b0e      	cmp	r3, #14
 80045d0:	d008      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d004      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x498>
 80045da:	f240 415e 	movw	r1, #1118	@ 0x45e
 80045de:	4812      	ldr	r0, [pc, #72]	@ (8004628 <HAL_RCC_ClockConfig+0x4dc>)
 80045e0:	f7fc fc72 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b11      	ldr	r3, [pc, #68]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f023 020f 	bic.w	r2, r3, #15
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	490e      	ldr	r1, [pc, #56]	@ (800462c <HAL_RCC_ClockConfig+0x4e0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <HAL_RCC_ClockConfig+0x4e4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d217      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004604:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <HAL_RCC_ClockConfig+0x4e4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 020f 	bic.w	r2, r3, #15
 800460c:	4908      	ldr	r1, [pc, #32]	@ (8004630 <HAL_RCC_ClockConfig+0x4e4>)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <HAL_RCC_ClockConfig+0x4e4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d008      	beq.n	8004634 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0f1      	b.n	800480a <HAL_RCC_ClockConfig+0x6be>
 8004626:	bf00      	nop
 8004628:	08009d94 	.word	0x08009d94
 800462c:	58024400 	.word	0x58024400
 8004630:	52002000 	.word	0x52002000
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d029      	beq.n	8004694 <HAL_RCC_ClockConfig+0x548>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	4b73      	ldr	r3, [pc, #460]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800464c:	429a      	cmp	r2, r3
 800464e:	d221      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x548>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d014      	beq.n	8004682 <HAL_RCC_ClockConfig+0x536>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b40      	cmp	r3, #64	@ 0x40
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0x536>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b50      	cmp	r3, #80	@ 0x50
 8004666:	d00c      	beq.n	8004682 <HAL_RCC_ClockConfig+0x536>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b60      	cmp	r3, #96	@ 0x60
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x536>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b70      	cmp	r3, #112	@ 0x70
 8004676:	d004      	beq.n	8004682 <HAL_RCC_ClockConfig+0x536>
 8004678:	f240 417f 	movw	r1, #1151	@ 0x47f
 800467c:	4866      	ldr	r0, [pc, #408]	@ (8004818 <HAL_RCC_ClockConfig+0x6cc>)
 800467e:	f7fc fc23 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004682:	4b64      	ldr	r3, [pc, #400]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4961      	ldr	r1, [pc, #388]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d029      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x5a8>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d221      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x5a8>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x596>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	2b40      	cmp	r3, #64	@ 0x40
 80046be:	d010      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x596>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	2b50      	cmp	r3, #80	@ 0x50
 80046c6:	d00c      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x596>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	2b60      	cmp	r3, #96	@ 0x60
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x596>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	2b70      	cmp	r3, #112	@ 0x70
 80046d6:	d004      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x596>
 80046d8:	f240 4191 	movw	r1, #1169	@ 0x491
 80046dc:	484e      	ldr	r0, [pc, #312]	@ (8004818 <HAL_RCC_ClockConfig+0x6cc>)
 80046de:	f7fc fbf3 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4949      	ldr	r1, [pc, #292]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d02d      	beq.n	800475c <HAL_RCC_ClockConfig+0x610>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	4b43      	ldr	r3, [pc, #268]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800470c:	429a      	cmp	r2, r3
 800470e:	d225      	bcs.n	800475c <HAL_RCC_ClockConfig+0x610>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d018      	beq.n	800474a <HAL_RCC_ClockConfig+0x5fe>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	d013      	beq.n	800474a <HAL_RCC_ClockConfig+0x5fe>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800472a:	d00e      	beq.n	800474a <HAL_RCC_ClockConfig+0x5fe>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004734:	d009      	beq.n	800474a <HAL_RCC_ClockConfig+0x5fe>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800473e:	d004      	beq.n	800474a <HAL_RCC_ClockConfig+0x5fe>
 8004740:	f240 41a3 	movw	r1, #1187	@ 0x4a3
 8004744:	4834      	ldr	r0, [pc, #208]	@ (8004818 <HAL_RCC_ClockConfig+0x6cc>)
 8004746:	f7fc fbbf 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800474a:	4b32      	ldr	r3, [pc, #200]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	492f      	ldr	r1, [pc, #188]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d029      	beq.n	80047bc <HAL_RCC_ClockConfig+0x670>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004774:	429a      	cmp	r2, r3
 8004776:	d221      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x670>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d014      	beq.n	80047aa <HAL_RCC_ClockConfig+0x65e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	d010      	beq.n	80047aa <HAL_RCC_ClockConfig+0x65e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	2b50      	cmp	r3, #80	@ 0x50
 800478e:	d00c      	beq.n	80047aa <HAL_RCC_ClockConfig+0x65e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	2b60      	cmp	r3, #96	@ 0x60
 8004796:	d008      	beq.n	80047aa <HAL_RCC_ClockConfig+0x65e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b70      	cmp	r3, #112	@ 0x70
 800479e:	d004      	beq.n	80047aa <HAL_RCC_ClockConfig+0x65e>
 80047a0:	f240 41b5 	movw	r1, #1205	@ 0x4b5
 80047a4:	481c      	ldr	r0, [pc, #112]	@ (8004818 <HAL_RCC_ClockConfig+0x6cc>)
 80047a6:	f7fc fb8f 	bl	8000ec8 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4917      	ldr	r1, [pc, #92]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047bc:	f000 f836 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b14      	ldr	r3, [pc, #80]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	4913      	ldr	r1, [pc, #76]	@ (800481c <HAL_RCC_ClockConfig+0x6d0>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
 80047d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <HAL_RCC_ClockConfig+0x6c8>)
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	4a0e      	ldr	r2, [pc, #56]	@ (800481c <HAL_RCC_ClockConfig+0x6d0>)
 80047e4:	5cd3      	ldrb	r3, [r2, r3]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
 80047f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004820 <HAL_RCC_ClockConfig+0x6d4>)
 80047f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004824 <HAL_RCC_ClockConfig+0x6d8>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCC_ClockConfig+0x6dc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc fd98 	bl	8001334 <HAL_InitTick>
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	58024400 	.word	0x58024400
 8004818:	08009d94 	.word	0x08009d94
 800481c:	08009ef4 	.word	0x08009ef4
 8004820:	24000008 	.word	0x24000008
 8004824:	24000004 	.word	0x24000004
 8004828:	2400000c 	.word	0x2400000c

0800482c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	@ 0x24
 8004830:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004832:	4bb3      	ldr	r3, [pc, #716]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800483a:	2b18      	cmp	r3, #24
 800483c:	f200 8155 	bhi.w	8004aea <HAL_RCC_GetSysClockFreq+0x2be>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	080048ad 	.word	0x080048ad
 800484c:	08004aeb 	.word	0x08004aeb
 8004850:	08004aeb 	.word	0x08004aeb
 8004854:	08004aeb 	.word	0x08004aeb
 8004858:	08004aeb 	.word	0x08004aeb
 800485c:	08004aeb 	.word	0x08004aeb
 8004860:	08004aeb 	.word	0x08004aeb
 8004864:	08004aeb 	.word	0x08004aeb
 8004868:	080048d3 	.word	0x080048d3
 800486c:	08004aeb 	.word	0x08004aeb
 8004870:	08004aeb 	.word	0x08004aeb
 8004874:	08004aeb 	.word	0x08004aeb
 8004878:	08004aeb 	.word	0x08004aeb
 800487c:	08004aeb 	.word	0x08004aeb
 8004880:	08004aeb 	.word	0x08004aeb
 8004884:	08004aeb 	.word	0x08004aeb
 8004888:	080048d9 	.word	0x080048d9
 800488c:	08004aeb 	.word	0x08004aeb
 8004890:	08004aeb 	.word	0x08004aeb
 8004894:	08004aeb 	.word	0x08004aeb
 8004898:	08004aeb 	.word	0x08004aeb
 800489c:	08004aeb 	.word	0x08004aeb
 80048a0:	08004aeb 	.word	0x08004aeb
 80048a4:	08004aeb 	.word	0x08004aeb
 80048a8:	080048df 	.word	0x080048df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ac:	4b94      	ldr	r3, [pc, #592]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b8:	4b91      	ldr	r3, [pc, #580]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	4a90      	ldr	r2, [pc, #576]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80048ca:	e111      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048ce:	61bb      	str	r3, [r7, #24]
      break;
 80048d0:	e10e      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048d4:	61bb      	str	r3, [r7, #24]
      break;
 80048d6:	e10b      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048d8:	4b8c      	ldr	r3, [pc, #560]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048da:	61bb      	str	r3, [r7, #24]
      break;
 80048dc:	e108      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048de:	4b88      	ldr	r3, [pc, #544]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048e8:	4b85      	ldr	r3, [pc, #532]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048f4:	4b82      	ldr	r3, [pc, #520]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048fe:	4b80      	ldr	r3, [pc, #512]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004902:	08db      	lsrs	r3, r3, #3
 8004904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80e1 	beq.w	8004ae4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b02      	cmp	r3, #2
 8004926:	f000 8083 	beq.w	8004a30 <HAL_RCC_GetSysClockFreq+0x204>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b02      	cmp	r3, #2
 800492e:	f200 80a1 	bhi.w	8004a74 <HAL_RCC_GetSysClockFreq+0x248>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x114>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d056      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800493e:	e099      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004940:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02d      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800494c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	08db      	lsrs	r3, r3, #3
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	4a6b      	ldr	r2, [pc, #428]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a02 	vldr	s12, [r7, #8]
 800498a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80049a6:	e087      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x2e8>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b51      	ldr	r3, [pc, #324]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049ea:	e065      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fe:	4b40      	ldr	r3, [pc, #256]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a2e:	e043      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004b1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a42:	4b2f      	ldr	r3, [pc, #188]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a72:	e021      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a86:	4b1e      	ldr	r3, [pc, #120]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ab6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	0a5b      	lsrs	r3, r3, #9
 8004abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004adc:	ee17 3a90 	vmov	r3, s15
 8004ae0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ae2:	e005      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
      break;
 8004ae8:	e002      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004aea:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004aec:	61bb      	str	r3, [r7, #24]
      break;
 8004aee:	bf00      	nop
  }

  return sysclockfreq;
 8004af0:	69bb      	ldr	r3, [r7, #24]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3724      	adds	r7, #36	@ 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
 8004b04:	03d09000 	.word	0x03d09000
 8004b08:	003d0900 	.word	0x003d0900
 8004b0c:	007a1200 	.word	0x007a1200
 8004b10:	46000000 	.word	0x46000000
 8004b14:	4c742400 	.word	0x4c742400
 8004b18:	4a742400 	.word	0x4a742400
 8004b1c:	4af42400 	.word	0x4af42400

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b26:	f7ff fe81 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b10      	ldr	r3, [pc, #64]	@ (8004b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490f      	ldr	r1, [pc, #60]	@ (8004b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	4a09      	ldr	r2, [pc, #36]	@ (8004b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b4e:	5cd3      	ldrb	r3, [r2, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a07      	ldr	r2, [pc, #28]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b5e:	4a07      	ldr	r2, [pc, #28]	@ (8004b7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	58024400 	.word	0x58024400
 8004b74:	08009ef4 	.word	0x08009ef4
 8004b78:	24000008 	.word	0x24000008
 8004b7c:	24000004 	.word	0x24000004

08004b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b84:	f7ff ffcc 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4904      	ldr	r1, [pc, #16]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	08009ef4 	.word	0x08009ef4

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004bb0:	f7ff ffb6 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	08009ef4 	.word	0x08009ef4

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bdc:	b0ca      	sub	sp, #296	@ 0x128
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bea:	2300      	movs	r3, #0
 8004bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8004c02:	d049      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c0e:	d02f      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c14:	d828      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c1a:	d01a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c20:	d822      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2a:	d007      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c2c:	e01c      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2e:	4bb8      	ldr	r3, [pc, #736]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4ab7      	ldr	r2, [pc, #732]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c3a:	e01a      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	3308      	adds	r3, #8
 8004c42:	2102      	movs	r1, #2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 fe87 	bl	8007958 <RCCEx_PLL2_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c50:	e00f      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	3328      	adds	r3, #40	@ 0x28
 8004c58:	2102      	movs	r1, #2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f002 ff9e 	bl	8007b9c <RCCEx_PLL3_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c66:	e004      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c6e:	e000      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c7a:	4ba5      	ldr	r3, [pc, #660]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c88:	4aa1      	ldr	r2, [pc, #644]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c8e:	e003      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ca4:	f04f 0900 	mov.w	r9, #0
 8004ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8004cac:	d047      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d82a      	bhi.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd5 	.word	0x08004cd5
 8004cc4:	08004ce3 	.word	0x08004ce3
 8004cc8:	08004cf9 	.word	0x08004cf9
 8004ccc:	08004d17 	.word	0x08004d17
 8004cd0:	08004d17 	.word	0x08004d17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	4a8d      	ldr	r2, [pc, #564]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ce0:	e01a      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f002 fe34 	bl	8007958 <RCCEx_PLL2_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cf6:	e00f      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	3328      	adds	r3, #40	@ 0x28
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f002 ff4b 	bl	8007b9c <RCCEx_PLL3_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d0c:	e004      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d14:	e000      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d20:	4b7b      	ldr	r3, [pc, #492]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d24:	f023 0107 	bic.w	r1, r3, #7
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2e:	4a78      	ldr	r2, [pc, #480]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d34:	e003      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004d4a:	f04f 0b00 	mov.w	fp, #0
 8004d4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d52:	d04c      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5e:	d030      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d64:	d829      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d68:	d02d      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d6c:	d825      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d6e:	2b80      	cmp	r3, #128	@ 0x80
 8004d70:	d018      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d821      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d007      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d7e:	e01c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d80:	4b63      	ldr	r3, [pc, #396]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4a62      	ldr	r2, [pc, #392]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d92:	3308      	adds	r3, #8
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 fdde 	bl	8007958 <RCCEx_PLL2_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004da2:	e011      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da8:	3328      	adds	r3, #40	@ 0x28
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 fef5 	bl	8007b9c <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004dd0:	4b4f      	ldr	r3, [pc, #316]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dde:	4a4c      	ldr	r2, [pc, #304]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004dfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004e04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	d053      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1a:	d035      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e20:	d82e      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e26:	d031      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004e28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e2c:	d828      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e32:	d01a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e38:	d822      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004e3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e42:	d007      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004e44:	e01c      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e46:	4b32      	ldr	r3, [pc, #200]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	4a31      	ldr	r2, [pc, #196]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e52:	e01c      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e58:	3308      	adds	r3, #8
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f002 fd7b 	bl	8007958 <RCCEx_PLL2_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e68:	e011      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	3328      	adds	r3, #40	@ 0x28
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fe92 	bl	8007b9c <RCCEx_PLL3_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e7e:	e006      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e88:	bf00      	nop
 8004e8a:	e000      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e96:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ec2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ecc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	d056      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee2:	d038      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee8:	d831      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eee:	d034      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef4:	d82b      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efa:	d01d      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f00:	d825      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f0c:	e01f      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f14:	4ba2      	ldr	r3, [pc, #648]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	4aa1      	ldr	r2, [pc, #644]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f20:	e01c      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	3308      	adds	r3, #8
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f002 fd14 	bl	8007958 <RCCEx_PLL2_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f36:	e011      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	3328      	adds	r3, #40	@ 0x28
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f002 fe2b 	bl	8007b9c <RCCEx_PLL3_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f64:	4b8e      	ldr	r3, [pc, #568]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f74:	4a8a      	ldr	r2, [pc, #552]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7a:	e003      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	d03a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	2b30      	cmp	r3, #48	@ 0x30
 8004fac:	d01f      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004fae:	2b30      	cmp	r3, #48	@ 0x30
 8004fb0:	d819      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d815      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d019      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d111      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc2:	4b77      	ldr	r3, [pc, #476]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	4a76      	ldr	r2, [pc, #472]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fce:	e011      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f002 fcbd 	bl	8007958 <RCCEx_PLL2_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fe4:	e006      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fec:	e002      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ffc:	4b68      	ldr	r3, [pc, #416]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005000:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500a:	4a65      	ldr	r2, [pc, #404]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800500c:	430b      	orrs	r3, r1
 800500e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005010:	e003      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005026:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800502a:	2300      	movs	r3, #0
 800502c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005030:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d051      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005044:	d035      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800504a:	d82e      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800504c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005050:	d031      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005052:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005056:	d828      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505c:	d01a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005062:	d822      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506c:	d007      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800506e:	e01c      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005070:	4b4b      	ldr	r3, [pc, #300]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	4a4a      	ldr	r2, [pc, #296]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800507c:	e01c      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	3308      	adds	r3, #8
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f002 fc66 	bl	8007958 <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005092:	e011      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	3328      	adds	r3, #40	@ 0x28
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f002 fd7d 	bl	8007b9c <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050a8:	e006      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b0:	e002      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80050b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050c0:	4b37      	ldr	r3, [pc, #220]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ce:	4a34      	ldr	r2, [pc, #208]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80050d4:	e003      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ee:	2300      	movs	r3, #0
 80050f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80050f8:	460b      	mov	r3, r1
 80050fa:	4313      	orrs	r3, r2
 80050fc:	d056      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005108:	d033      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800510a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800510e:	d82c      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005110:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005114:	d02f      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005116:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800511a:	d826      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800511c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005120:	d02b      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005122:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005126:	d820      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800512c:	d012      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800512e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005132:	d81a      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d022      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800513c:	d115      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005142:	3308      	adds	r3, #8
 8005144:	2101      	movs	r1, #1
 8005146:	4618      	mov	r0, r3
 8005148:	f002 fc06 	bl	8007958 <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005152:	e015      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	3328      	adds	r3, #40	@ 0x28
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f002 fd1d 	bl	8007b9c <RCCEx_PLL3_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005168:	e00a      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005170:	e006      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005172:	bf00      	nop
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800517e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800518a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005196:	4a02      	ldr	r2, [pc, #8]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005198:	430b      	orrs	r3, r1
 800519a:	6513      	str	r3, [r2, #80]	@ 0x50
 800519c:	e006      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d055      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d8:	d033      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80051da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051de:	d82c      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e4:	d02f      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ea:	d826      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f0:	d02b      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80051f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f6:	d820      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fc:	d012      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005202:	d81a      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d022      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520c:	d115      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	3308      	adds	r3, #8
 8005214:	2101      	movs	r1, #1
 8005216:	4618      	mov	r0, r3
 8005218:	f002 fb9e 	bl	8007958 <RCCEx_PLL2_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005222:	e015      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005228:	3328      	adds	r3, #40	@ 0x28
 800522a:	2101      	movs	r1, #1
 800522c:	4618      	mov	r0, r3
 800522e:	f002 fcb5 	bl	8007b9c <RCCEx_PLL3_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005238:	e00a      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800524e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005258:	4b4e      	ldr	r3, [pc, #312]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005268:	4a4a      	ldr	r2, [pc, #296]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 800526a:	430b      	orrs	r3, r1
 800526c:	6593      	str	r3, [r2, #88]	@ 0x58
 800526e:	e003      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005284:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800528e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d037      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a2:	d00e      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80052a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a8:	d816      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d018      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80052ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b2:	d111      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b4:	4b37      	ldr	r3, [pc, #220]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	4a36      	ldr	r2, [pc, #216]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80052ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052c0:	e00f      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c6:	3308      	adds	r3, #8
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f002 fb44 	bl	8007958 <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052d6:	e004      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80052e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80052ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	4a26      	ldr	r2, [pc, #152]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800531e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d03b      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532e:	2b03      	cmp	r3, #3
 8005330:	d81c      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005332:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005375 	.word	0x08005375
 800533c:	08005349 	.word	0x08005349
 8005340:	08005357 	.word	0x08005357
 8005344:	08005375 	.word	0x08005375
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005348:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	4a11      	ldr	r2, [pc, #68]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 800534e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005354:	e00f      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	3308      	adds	r3, #8
 800535c:	2102      	movs	r1, #2
 800535e:	4618      	mov	r0, r3
 8005360:	f002 fafa 	bl	8007958 <RCCEx_PLL2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800537e:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	f023 0103 	bic.w	r1, r3, #3
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538c:	4a01      	ldr	r2, [pc, #4]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 800538e:	430b      	orrs	r3, r1
 8005390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005392:	e005      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8005394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053ba:	460b      	mov	r3, r1
 80053bc:	4313      	orrs	r3, r2
 80053be:	f000 82f1 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ce:	f000 81eb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053de:	f000 81e3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053ea:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 80053ee:	f000 81db 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053fa:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
 80053fe:	f000 81d3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800540a:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
 800540e:	f000 81cb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800541a:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
 800541e:	f000 81c3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800542a:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
 800542e:	f000 81bb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800543a:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
 800543e:	f000 81b3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800544a:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
 800544e:	f000 81ab 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800545a:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 800545e:	f000 81a3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800546a:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
 800546e:	f000 819b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800547a:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
 800547e:	f000 8193 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800548a:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
 800548e:	f000 818b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800549a:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
 800549e:	f000 8183 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054aa:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
 80054ae:	f000 817b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054ba:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
 80054be:	f000 8173 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80054ca:	4bbd      	ldr	r3, [pc, #756]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	f000 816b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80054da:	4bba      	ldr	r3, [pc, #744]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0xbec>)
 80054dc:	429a      	cmp	r2, r3
 80054de:	f000 8163 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80054ea:	4bb7      	ldr	r3, [pc, #732]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f000 815b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80054fa:	4bb4      	ldr	r3, [pc, #720]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	f000 8153 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800550a:	4bb1      	ldr	r3, [pc, #708]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800550c:	429a      	cmp	r2, r3
 800550e:	f000 814b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800551a:	4bae      	ldr	r3, [pc, #696]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800551c:	429a      	cmp	r2, r3
 800551e:	f000 8143 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800552a:	4bab      	ldr	r3, [pc, #684]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc00>)
 800552c:	429a      	cmp	r2, r3
 800552e:	f000 813b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800553a:	4ba8      	ldr	r3, [pc, #672]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800553c:	429a      	cmp	r2, r3
 800553e:	f000 8133 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800554a:	4ba5      	ldr	r3, [pc, #660]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>)
 800554c:	429a      	cmp	r2, r3
 800554e:	f000 812b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005556:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800555a:	4ba2      	ldr	r3, [pc, #648]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>)
 800555c:	429a      	cmp	r2, r3
 800555e:	f000 8123 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800556a:	4b9f      	ldr	r3, [pc, #636]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800556c:	429a      	cmp	r2, r3
 800556e:	f000 811b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005576:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800557a:	4b9c      	ldr	r3, [pc, #624]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xc14>)
 800557c:	429a      	cmp	r2, r3
 800557e:	f000 8113 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800558a:	4b99      	ldr	r3, [pc, #612]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800558c:	429a      	cmp	r2, r3
 800558e:	f000 810b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800559a:	4b96      	ldr	r3, [pc, #600]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>)
 800559c:	429a      	cmp	r2, r3
 800559e:	f000 8103 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80055aa:	4b93      	ldr	r3, [pc, #588]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f000 80fb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80055ba:	4b90      	ldr	r3, [pc, #576]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xc24>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	f000 80f3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80055ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0xc28>)
 80055cc:	429a      	cmp	r2, r3
 80055ce:	f000 80eb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80055da:	4b8a      	ldr	r3, [pc, #552]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 80055dc:	429a      	cmp	r2, r3
 80055de:	f000 80e3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80055ea:	4b87      	ldr	r3, [pc, #540]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 80055ec:	429a      	cmp	r2, r3
 80055ee:	f000 80db 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80055fa:	4b84      	ldr	r3, [pc, #528]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0xc34>)
 80055fc:	429a      	cmp	r2, r3
 80055fe:	f000 80d3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800560a:	4b81      	ldr	r3, [pc, #516]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800560c:	429a      	cmp	r2, r3
 800560e:	f000 80cb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800561a:	4b7e      	ldr	r3, [pc, #504]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 800561c:	429a      	cmp	r2, r3
 800561e:	f000 80c3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800562a:	4b7b      	ldr	r3, [pc, #492]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 800562c:	429a      	cmp	r2, r3
 800562e:	f000 80bb 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005636:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800563a:	4b78      	ldr	r3, [pc, #480]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800563c:	429a      	cmp	r2, r3
 800563e:	f000 80b3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005646:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800564a:	4b75      	ldr	r3, [pc, #468]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800564c:	429a      	cmp	r2, r3
 800564e:	f000 80ab 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005656:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800565a:	4b72      	ldr	r3, [pc, #456]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xc4c>)
 800565c:	429a      	cmp	r2, r3
 800565e:	f000 80a3 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800566a:	4b6f      	ldr	r3, [pc, #444]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800566c:	429a      	cmp	r2, r3
 800566e:	f000 809b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005676:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800567a:	4b6c      	ldr	r3, [pc, #432]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800567c:	429a      	cmp	r2, r3
 800567e:	f000 8093 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800568a:	4b69      	ldr	r3, [pc, #420]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0xc58>)
 800568c:	429a      	cmp	r2, r3
 800568e:	f000 808b 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800569a:	4b66      	ldr	r3, [pc, #408]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800569c:	429a      	cmp	r2, r3
 800569e:	f000 8083 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056aa:	4b63      	ldr	r3, [pc, #396]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d07b      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056b8:	4b60      	ldr	r3, [pc, #384]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d074      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d06d      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d066      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056e2:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xc70>)
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d05f      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056f0:	4b56      	ldr	r3, [pc, #344]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0xc74>)
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d058      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80056fe:	4b54      	ldr	r3, [pc, #336]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0xc78>)
 8005700:	429a      	cmp	r2, r3
 8005702:	d051      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005708:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800570c:	4b51      	ldr	r3, [pc, #324]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xc7c>)
 800570e:	429a      	cmp	r2, r3
 8005710:	d04a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800571a:	4b4f      	ldr	r3, [pc, #316]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xc80>)
 800571c:	429a      	cmp	r2, r3
 800571e:	d043      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005728:	4b4c      	ldr	r3, [pc, #304]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0xc84>)
 800572a:	429a      	cmp	r2, r3
 800572c:	d03c      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005736:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8005738:	429a      	cmp	r2, r3
 800573a:	d035      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005744:	4b47      	ldr	r3, [pc, #284]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
 8005746:	429a      	cmp	r2, r3
 8005748:	d02e      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005752:	4b45      	ldr	r3, [pc, #276]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d027      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005760:	4b42      	ldr	r3, [pc, #264]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc94>)
 8005762:	429a      	cmp	r2, r3
 8005764:	d020      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800576e:	4b40      	ldr	r3, [pc, #256]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d019      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800577c:	4b3d      	ldr	r3, [pc, #244]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800577e:	429a      	cmp	r2, r3
 8005780:	d012      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800578a:	4b3b      	ldr	r3, [pc, #236]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800578c:	429a      	cmp	r2, r3
 800578e:	d00b      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005794:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005798:	4b38      	ldr	r3, [pc, #224]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0xca4>)
 800579a:	429a      	cmp	r2, r3
 800579c:	d004      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800579e:	f240 317d 	movw	r1, #893	@ 0x37d
 80057a2:	4837      	ldr	r0, [pc, #220]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xca8>)
 80057a4:	f7fb fb90 	bl	8000ec8 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a8:	4b36      	ldr	r3, [pc, #216]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0xcac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a35      	ldr	r2, [pc, #212]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0xcac>)
 80057ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b4:	f7fb fe08 	bl	80013c8 <HAL_GetTick>
 80057b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057bc:	e070      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80057be:	bf00      	nop
 80057c0:	00010300 	.word	0x00010300
 80057c4:	00011300 	.word	0x00011300
 80057c8:	00012300 	.word	0x00012300
 80057cc:	00013300 	.word	0x00013300
 80057d0:	00014300 	.word	0x00014300
 80057d4:	00015300 	.word	0x00015300
 80057d8:	00016300 	.word	0x00016300
 80057dc:	00017300 	.word	0x00017300
 80057e0:	00018300 	.word	0x00018300
 80057e4:	00019300 	.word	0x00019300
 80057e8:	0001a300 	.word	0x0001a300
 80057ec:	0001b300 	.word	0x0001b300
 80057f0:	0001c300 	.word	0x0001c300
 80057f4:	0001d300 	.word	0x0001d300
 80057f8:	0001e300 	.word	0x0001e300
 80057fc:	0001f300 	.word	0x0001f300
 8005800:	00020300 	.word	0x00020300
 8005804:	00021300 	.word	0x00021300
 8005808:	00022300 	.word	0x00022300
 800580c:	00023300 	.word	0x00023300
 8005810:	00024300 	.word	0x00024300
 8005814:	00025300 	.word	0x00025300
 8005818:	00026300 	.word	0x00026300
 800581c:	00027300 	.word	0x00027300
 8005820:	00028300 	.word	0x00028300
 8005824:	00029300 	.word	0x00029300
 8005828:	0002a300 	.word	0x0002a300
 800582c:	0002b300 	.word	0x0002b300
 8005830:	0002c300 	.word	0x0002c300
 8005834:	0002d300 	.word	0x0002d300
 8005838:	0002e300 	.word	0x0002e300
 800583c:	0002f300 	.word	0x0002f300
 8005840:	00030300 	.word	0x00030300
 8005844:	00031300 	.word	0x00031300
 8005848:	00032300 	.word	0x00032300
 800584c:	00033300 	.word	0x00033300
 8005850:	00034300 	.word	0x00034300
 8005854:	00035300 	.word	0x00035300
 8005858:	00036300 	.word	0x00036300
 800585c:	00037300 	.word	0x00037300
 8005860:	00038300 	.word	0x00038300
 8005864:	00039300 	.word	0x00039300
 8005868:	0003a300 	.word	0x0003a300
 800586c:	0003b300 	.word	0x0003b300
 8005870:	0003c300 	.word	0x0003c300
 8005874:	0003d300 	.word	0x0003d300
 8005878:	0003e300 	.word	0x0003e300
 800587c:	0003f300 	.word	0x0003f300
 8005880:	08009dcc 	.word	0x08009dcc
 8005884:	58024800 	.word	0x58024800
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005888:	f7fb fd9e 	bl	80013c8 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b64      	cmp	r3, #100	@ 0x64
 8005896:	d903      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
      {
        ret = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800589e:	e005      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xcd4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a0:	4bcf      	ldr	r3, [pc, #828]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1008>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0ed      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
    }

    if (ret == HAL_OK)
 80058ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d173      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058b4:	4bcb      	ldr	r3, [pc, #812]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058c0:	4053      	eors	r3, r2
 80058c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d015      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ca:	4bc6      	ldr	r3, [pc, #792]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058d6:	4bc3      	ldr	r3, [pc, #780]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	4ac2      	ldr	r2, [pc, #776]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058e2:	4bc0      	ldr	r3, [pc, #768]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	4abf      	ldr	r2, [pc, #764]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058ee:	4abd      	ldr	r2, [pc, #756]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 80058f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005902:	d118      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fb fd60 	bl	80013c8 <HAL_GetTick>
 8005908:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800590c:	e00d      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xd52>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590e:	f7fb fd5b 	bl	80013c8 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005918:	1ad2      	subs	r2, r2, r3
 800591a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800591e:	429a      	cmp	r2, r3
 8005920:	d903      	bls.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xd52>
          {
            ret = HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005928:	e005      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800592a:	4bae      	ldr	r3, [pc, #696]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0eb      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xd36>
          }
        }
      }

      if (ret == HAL_OK)
 8005936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593a:	2b00      	cmp	r3, #0
 800593c:	d129      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594e:	d10e      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8005950:	4ba4      	ldr	r3, [pc, #656]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005960:	091a      	lsrs	r2, r3, #4
 8005962:	4ba1      	ldr	r3, [pc, #644]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1010>)
 8005964:	4013      	ands	r3, r2
 8005966:	4a9f      	ldr	r2, [pc, #636]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005968:	430b      	orrs	r3, r1
 800596a:	6113      	str	r3, [r2, #16]
 800596c:	e005      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800596e:	4b9d      	ldr	r3, [pc, #628]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	4a9c      	ldr	r2, [pc, #624]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005974:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005978:	6113      	str	r3, [r2, #16]
 800597a:	4b9a      	ldr	r3, [pc, #616]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800597c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598a:	4a96      	ldr	r2, [pc, #600]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 800598c:	430b      	orrs	r3, r1
 800598e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800599a:	e003      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f002 0301 	and.w	r3, r2, #1
 80059b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059b4:	2300      	movs	r3, #0
 80059b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059be:	460b      	mov	r3, r1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f000 8089 	beq.w	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059cc:	2b28      	cmp	r3, #40	@ 0x28
 80059ce:	d86b      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xed0>
 80059d0:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	08005ab1 	.word	0x08005ab1
 80059dc:	08005aa9 	.word	0x08005aa9
 80059e0:	08005aa9 	.word	0x08005aa9
 80059e4:	08005aa9 	.word	0x08005aa9
 80059e8:	08005aa9 	.word	0x08005aa9
 80059ec:	08005aa9 	.word	0x08005aa9
 80059f0:	08005aa9 	.word	0x08005aa9
 80059f4:	08005aa9 	.word	0x08005aa9
 80059f8:	08005a7d 	.word	0x08005a7d
 80059fc:	08005aa9 	.word	0x08005aa9
 8005a00:	08005aa9 	.word	0x08005aa9
 8005a04:	08005aa9 	.word	0x08005aa9
 8005a08:	08005aa9 	.word	0x08005aa9
 8005a0c:	08005aa9 	.word	0x08005aa9
 8005a10:	08005aa9 	.word	0x08005aa9
 8005a14:	08005aa9 	.word	0x08005aa9
 8005a18:	08005a93 	.word	0x08005a93
 8005a1c:	08005aa9 	.word	0x08005aa9
 8005a20:	08005aa9 	.word	0x08005aa9
 8005a24:	08005aa9 	.word	0x08005aa9
 8005a28:	08005aa9 	.word	0x08005aa9
 8005a2c:	08005aa9 	.word	0x08005aa9
 8005a30:	08005aa9 	.word	0x08005aa9
 8005a34:	08005aa9 	.word	0x08005aa9
 8005a38:	08005ab1 	.word	0x08005ab1
 8005a3c:	08005aa9 	.word	0x08005aa9
 8005a40:	08005aa9 	.word	0x08005aa9
 8005a44:	08005aa9 	.word	0x08005aa9
 8005a48:	08005aa9 	.word	0x08005aa9
 8005a4c:	08005aa9 	.word	0x08005aa9
 8005a50:	08005aa9 	.word	0x08005aa9
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005ab1 	.word	0x08005ab1
 8005a5c:	08005aa9 	.word	0x08005aa9
 8005a60:	08005aa9 	.word	0x08005aa9
 8005a64:	08005aa9 	.word	0x08005aa9
 8005a68:	08005aa9 	.word	0x08005aa9
 8005a6c:	08005aa9 	.word	0x08005aa9
 8005a70:	08005aa9 	.word	0x08005aa9
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005ab1 	.word	0x08005ab1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	3308      	adds	r3, #8
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 ff67 	bl	8007958 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a90:	e00f      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xeda>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	3328      	adds	r3, #40	@ 0x28
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f002 f87e 	bl	8007b9c <RCCEx_PLL3_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005aa6:	e004      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xeda>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aae:	e000      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xeda>
        break;
 8005ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xef8>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005aba:	4b4a      	ldr	r3, [pc, #296]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ac8:	4a46      	ldr	r2, [pc, #280]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005aca:	430b      	orrs	r3, r1
 8005acc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ace:	e003      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f002 0302 	and.w	r3, r2, #2
 8005ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005aee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d041      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xfa4>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d824      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xf74>
 8005b02:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <HAL_RCCEx_PeriphCLKConfig+0xf30>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b55 	.word	0x08005b55
 8005b0c:	08005b21 	.word	0x08005b21
 8005b10:	08005b37 	.word	0x08005b37
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b55 	.word	0x08005b55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b24:	3308      	adds	r3, #8
 8005b26:	2101      	movs	r1, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 ff15 	bl	8007958 <RCCEx_PLL2_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b34:	e00f      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xf7e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	3328      	adds	r3, #40	@ 0x28
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 f82c 	bl	8007b9c <RCCEx_PLL3_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e004      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xf7e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xf7e>
        break;
 8005b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b5e:	4b21      	ldr	r3, [pc, #132]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	f023 0107 	bic.w	r1, r3, #7
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x100c>)
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xfa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f002 0304 	and.w	r3, r2, #4
 8005b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d04b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x105c>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d82c      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005c0b 	.word	0x08005c0b
 8005bb4:	08005bc9 	.word	0x08005bc9
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005c0b 	.word	0x08005c0b
 8005bc0:	08005c0b 	.word	0x08005c0b
 8005bc4:	08005c0b 	.word	0x08005c0b
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bcc:	3308      	adds	r3, #8
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fec1 	bl	8007958 <RCCEx_PLL2_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bdc:	e016      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1034>
 8005bde:	bf00      	nop
 8005be0:	58024800 	.word	0x58024800
 8005be4:	58024400 	.word	0x58024400
 8005be8:	00ffffcf 	.word	0x00ffffcf

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	3328      	adds	r3, #40	@ 0x28
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 ffd1 	bl	8007b9c <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c00:	e004      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1034>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1034>
        break;
 8005c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1054>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c14:	4b9e      	ldr	r3, [pc, #632]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	f023 0107 	bic.w	r1, r3, #7
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c24:	4a9a      	ldr	r2, [pc, #616]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005c26:	430b      	orrs	r3, r1
 8005c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2a:	e003      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x105c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f002 0320 	and.w	r3, r2, #32
 8005c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c44:	2300      	movs	r3, #0
 8005c46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d055      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1128>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c60:	d033      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x10f2>
 8005c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c66:	d82c      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6c:	d02f      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d826      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 8005c74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c78:	d02b      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
 8005c7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c7e:	d820      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c84:	d012      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8a:	d81a      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d022      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
 8005c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c94:	d115      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fe5a 	bl	8007958 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005caa:	e015      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1100>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	3328      	adds	r3, #40	@ 0x28
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 ff71 	bl	8007b9c <RCCEx_PLL3_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 8005cca:	bf00      	nop
 8005ccc:	e004      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
        break;
 8005cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	4a67      	ldr	r2, [pc, #412]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cf6:	e003      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d16:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d055      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x11f4>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d2c:	d033      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8005d2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d32:	d82c      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d38:	d02f      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3e:	d826      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8005d40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d44:	d02b      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x11c6>
 8005d46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d4a:	d820      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8005d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d50:	d012      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d56:	d81a      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x11b6>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d022      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
 8005d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d60:	d115      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x11b6>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	3308      	adds	r3, #8
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fdf4 	bl	8007958 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d76:	e015      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	3328      	adds	r3, #40	@ 0x28
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 ff0b 	bl	8007b9c <RCCEx_PLL3_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d94:	e006      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 8005d96:	bf00      	nop
 8005d98:	e004      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        break;
 8005da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dac:	4b38      	ldr	r3, [pc, #224]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db0:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dbc:	4a34      	ldr	r2, [pc, #208]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x11f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005de2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005de6:	460b      	mov	r3, r1
 8005de8:	4313      	orrs	r3, r2
 8005dea:	d057      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005df4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005df8:	d033      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x128a>
 8005dfa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005dfe:	d82c      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e04:	d02f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8005e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e0a:	d826      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005e0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e10:	d02b      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1292>
 8005e12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e16:	d820      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005e18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e1c:	d012      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x126c>
 8005e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e22:	d81a      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1282>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d022      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1296>
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2c:	d115      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1282>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	3308      	adds	r3, #8
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 fd8e 	bl	8007958 <RCCEx_PLL2_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e42:	e015      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1298>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	3328      	adds	r3, #40	@ 0x28
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 fea5 	bl	8007b9c <RCCEx_PLL3_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e58:	e00a      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1298>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e88:	4a01      	ldr	r2, [pc, #4]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x12b8>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e8e:	e005      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
 8005e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f002 0308 	and.w	r3, r2, #8
 8005ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d03e      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x1362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec8:	d018      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed6:	d011      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ef0:	d004      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1324>
 8005ef2:	f240 510d 	movw	r1, #1293	@ 0x50d
 8005ef6:	48ab      	ldr	r0, [pc, #684]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8005ef8:	f7fa ffe6 	bl	8000ec8 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f08:	d10c      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x134c>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	3328      	adds	r3, #40	@ 0x28
 8005f10:	2102      	movs	r1, #2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 fe42 	bl	8007b9c <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x134c>
      {
        status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f24:	4ba0      	ldr	r3, [pc, #640]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f34:	4a9c      	ldr	r2, [pc, #624]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f002 0310 	and.w	r3, r2, #16
 8005f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d03e      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f66:	d018      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f74:	d011      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f8e:	d004      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x13c2>
 8005f90:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8005f94:	4883      	ldr	r0, [pc, #524]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8005f96:	f7fa ff97 	bl	8000ec8 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa6:	d10c      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x13ea>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	3328      	adds	r3, #40	@ 0x28
 8005fae:	2102      	movs	r1, #2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 fdf3 	bl	8007b9c <RCCEx_PLL3_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x13ea>
      {
        status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fc2:	4b79      	ldr	r3, [pc, #484]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fd2:	4a75      	ldr	r2, [pc, #468]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d03e      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x149e>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006004:	d022      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1474>
 8006006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800600a:	d81b      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x146c>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1440>
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006014:	d00b      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x1456>
 8006016:	e015      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x146c>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	3308      	adds	r3, #8
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fc99 	bl	8007958 <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1476>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	3328      	adds	r3, #40	@ 0x28
 8006034:	2102      	movs	r1, #2
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fdb0 	bl	8007b9c <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1476>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1476>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1496>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006056:	4b54      	ldr	r3, [pc, #336]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006066:	4a50      	ldr	r2, [pc, #320]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6593      	str	r3, [r2, #88]	@ 0x58
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006082:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006084:	2300      	movs	r3, #0
 8006086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006088:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d03b      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1532>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800609e:	d01f      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1508>
 80060a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060a4:	d818      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1500>
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x14dc>
 80060ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060b0:	d007      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x14ea>
 80060b2:	e011      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b4:	4b3c      	ldr	r3, [pc, #240]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4a3b      	ldr	r2, [pc, #236]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80060c0:	e00f      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x150a>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	3328      	adds	r3, #40	@ 0x28
 80060c8:	2101      	movs	r1, #1
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fd66 	bl	8007b9c <RCCEx_PLL3_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80060d6:	e004      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x150a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060de:	e000      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x150a>
        break;
 80060e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x152a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ea:	4b2f      	ldr	r3, [pc, #188]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80060ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	4a2b      	ldr	r2, [pc, #172]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006100:	e003      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006116:	673b      	str	r3, [r7, #112]	@ 0x70
 8006118:	2300      	movs	r3, #0
 800611a:	677b      	str	r3, [r7, #116]	@ 0x74
 800611c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006120:	460b      	mov	r3, r1
 8006122:	4313      	orrs	r3, r2
 8006124:	d046      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x156e>
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613a:	d004      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x156e>
 800613c:	f240 5186 	movw	r1, #1414	@ 0x586
 8006140:	4818      	ldr	r0, [pc, #96]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
 8006142:	f7fa fec1 	bl	8000ec8 <assert_failed>

    switch (PeriphClkInit->SdmmcClockSelection)
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1580>
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006154:	d007      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x158e>
 8006156:	e011      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x15a4>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4b13      	ldr	r3, [pc, #76]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4a12      	ldr	r2, [pc, #72]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006164:	e00e      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x15ac>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	3308      	adds	r3, #8
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fbf2 	bl	8007958 <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800617a:	e003      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x15ac>

      default:
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10f      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 800618e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006190:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800619a:	4a03      	ldr	r2, [pc, #12]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
 800619c:	430b      	orrs	r3, r1
 800619e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061a0:	e008      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 80061a2:	bf00      	nop
 80061a4:	08009dcc 	.word	0x08009dcc
 80061a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80061c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061c2:	2300      	movs	r3, #0
 80061c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	d00c      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1612>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d4:	3328      	adds	r3, #40	@ 0x28
 80061d6:	2102      	movs	r1, #2
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fcdf 	bl	8007b9c <RCCEx_PLL3_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1612>
    {
      status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80061f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061f8:	2300      	movs	r3, #0
 80061fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80061fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006200:	460b      	mov	r3, r1
 8006202:	4313      	orrs	r3, r2
 8006204:	d03a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x16a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800620e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006212:	d018      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x166e>
 8006214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006218:	d811      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1666>
 800621a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800621e:	d014      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1672>
 8006220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006224:	d80b      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1666>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1676>
 800622a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800622e:	d106      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4b0f      	ldr	r3, [pc, #60]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	4a0e      	ldr	r2, [pc, #56]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800623c:	e008      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006244:	e004      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 8006246:	bf00      	nop
 8006248:	e002      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 800624a:	bf00      	nop
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1678>
        break;
 800624e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10d      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x169c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006258:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 800625a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006268:	4a01      	ldr	r2, [pc, #4]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1698>)
 800626a:	430b      	orrs	r3, r1
 800626c:	6553      	str	r3, [r2, #84]	@ 0x54
 800626e:	e005      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x16a4>
 8006270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006288:	65bb      	str	r3, [r7, #88]	@ 0x58
 800628a:	2300      	movs	r3, #0
 800628c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800628e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006292:	460b      	mov	r3, r1
 8006294:	4313      	orrs	r3, r2
 8006296:	d019      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x16f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062ac:	d004      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80062ae:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 80062b2:	48b8      	ldr	r0, [pc, #736]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 80062b4:	f7fa fe08 	bl	8000ec8 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062b8:	4bb7      	ldr	r3, [pc, #732]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c6:	4ab4      	ldr	r2, [pc, #720]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80062d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80062da:	2300      	movs	r3, #0
 80062dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80062de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d01c      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x174a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1734>
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006300:	d004      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1734>
 8006302:	f240 51ef 	movw	r1, #1519	@ 0x5ef
 8006306:	48a3      	ldr	r0, [pc, #652]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006308:	f7fa fdde 	bl	8000ec8 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800630c:	4ba2      	ldr	r3, [pc, #648]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006318:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800631c:	4a9e      	ldr	r2, [pc, #632]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800632e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006330:	2300      	movs	r3, #0
 8006332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006334:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006338:	460b      	mov	r3, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	d019      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x179a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1786>
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800634e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006352:	d004      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1786>
 8006354:	f240 51f9 	movw	r1, #1529	@ 0x5f9
 8006358:	488e      	ldr	r0, [pc, #568]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 800635a:	f7fa fdb5 	bl	8000ec8 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800635e:	4b8e      	ldr	r3, [pc, #568]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006362:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800636c:	4a8a      	ldr	r2, [pc, #552]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800636e:	430b      	orrs	r3, r1
 8006370:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800637e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006380:	2300      	movs	r3, #0
 8006382:	647b      	str	r3, [r7, #68]	@ 0x44
 8006384:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006388:	460b      	mov	r3, r1
 800638a:	4313      	orrs	r3, r2
 800638c:	d020      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x17f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800638e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006392:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x17da>
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a6:	d004      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x17da>
 80063a8:	f240 610f 	movw	r1, #1551	@ 0x60f
 80063ac:	4879      	ldr	r0, [pc, #484]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 80063ae:	f7fa fd8b 	bl	8000ec8 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063b2:	4b79      	ldr	r3, [pc, #484]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	4a78      	ldr	r2, [pc, #480]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80063b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063bc:	6113      	str	r3, [r2, #16]
 80063be:	4b76      	ldr	r3, [pc, #472]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80063c0:	6919      	ldr	r1, [r3, #16]
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80063ca:	4a73      	ldr	r2, [pc, #460]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 80063cc:	430b      	orrs	r3, r1
 80063ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80063dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063de:	2300      	movs	r3, #0
 80063e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d01f      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1854>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d010      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640c:	d004      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1840>
 800640e:	f240 6119 	movw	r1, #1561	@ 0x619
 8006412:	4860      	ldr	r0, [pc, #384]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006414:	f7fa fd58 	bl	8000ec8 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006418:	4b5f      	ldr	r3, [pc, #380]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800641a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800641c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	4a5c      	ldr	r2, [pc, #368]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 8006428:	430b      	orrs	r3, r1
 800642a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006438:	633b      	str	r3, [r7, #48]	@ 0x30
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
 800643e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006442:	460b      	mov	r3, r1
 8006444:	4313      	orrs	r3, r2
 8006446:	d023      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800645c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006460:	d00b      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800646a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800646e:	d004      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x18a2>
 8006470:	f240 6123 	movw	r1, #1571	@ 0x623
 8006474:	4847      	ldr	r0, [pc, #284]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x19bc>)
 8006476:	f7fa fd27 	bl	8000ec8 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800647a:	4b47      	ldr	r3, [pc, #284]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800648a:	4a43      	ldr	r2, [pc, #268]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x19c0>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	2100      	movs	r1, #0
 800649a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d011      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x18f8>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	3308      	adds	r3, #8
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fa4f 	bl	8007958 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x18f8>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	2100      	movs	r1, #0
 80064da:	6239      	str	r1, [r7, #32]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d011      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1938>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	3308      	adds	r3, #8
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fa2f 	bl	8007958 <RCCEx_PLL2_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1938>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800650c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	2100      	movs	r1, #0
 800651a:	61b9      	str	r1, [r7, #24]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d011      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1978>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006530:	3308      	adds	r3, #8
 8006532:	2102      	movs	r1, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fa0f 	bl	8007958 <RCCEx_PLL2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1978>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	2100      	movs	r1, #0
 800655a:	6139      	str	r1, [r7, #16]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d017      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x19c4>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	3328      	adds	r3, #40	@ 0x28
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fb11 	bl	8007b9c <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x19c4>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006590:	e004      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x19c4>
 8006592:	bf00      	nop
 8006594:	08009dcc 	.word	0x08009dcc
 8006598:	58024400 	.word	0x58024400
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	2100      	movs	r1, #0
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d011      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1a04>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065bc:	3328      	adds	r3, #40	@ 0x28
 80065be:	2101      	movs	r1, #1
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 faeb 	bl	8007b9c <RCCEx_PLL3_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1a04>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	2100      	movs	r1, #0
 80065e6:	6039      	str	r1, [r7, #0]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065f2:	460b      	mov	r3, r1
 80065f4:	4313      	orrs	r3, r2
 80065f6:	d011      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1a44>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	3328      	adds	r3, #40	@ 0x28
 80065fe:	2102      	movs	r1, #2
 8006600:	4618      	mov	r0, r3
 8006602:	f001 facb 	bl	8007b9c <RCCEx_PLL3_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800660c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1a44>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006618:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800661c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
  {
    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e000      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1a52>
  }
  return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
}
 800662a:	4618      	mov	r0, r3
 800662c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006630:	46bd      	mov	sp, r7
 8006632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006636:	bf00      	nop

08006638 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b090      	sub	sp, #64	@ 0x40
 800663c:	af00      	add	r7, sp, #0
 800663e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006646:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800664a:	430b      	orrs	r3, r1
 800664c:	f040 8094 	bne.w	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006650:	4b9e      	ldr	r3, [pc, #632]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	2b04      	cmp	r3, #4
 800665e:	f200 8087 	bhi.w	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006662:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	0800667d 	.word	0x0800667d
 800666c:	080066a5 	.word	0x080066a5
 8006670:	080066cd 	.word	0x080066cd
 8006674:	08006769 	.word	0x08006769
 8006678:	080066f5 	.word	0x080066f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800667c:	4b93      	ldr	r3, [pc, #588]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006688:	d108      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800668a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800668e:	4618      	mov	r0, r3
 8006690:	f001 f810 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006698:	f000 bd45 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a0:	f000 bd41 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066a4:	4b89      	ldr	r3, [pc, #548]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b0:	d108      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b2:	f107 0318 	add.w	r3, r7, #24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fd54 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c0:	f000 bd31 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c8:	f000 bd2d 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066cc:	4b7f      	ldr	r3, [pc, #508]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d8:	d108      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fe94 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066e8:	f000 bd1d 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f0:	f000 bd19 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066f4:	4b75      	ldr	r3, [pc, #468]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066fe:	4b73      	ldr	r3, [pc, #460]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d10c      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006710:	4b6e      	ldr	r3, [pc, #440]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	4a6d      	ldr	r2, [pc, #436]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006722:	e01f      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006724:	4b69      	ldr	r3, [pc, #420]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006738:	d102      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800673a:	4b66      	ldr	r3, [pc, #408]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800673e:	e011      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006740:	4b62      	ldr	r3, [pc, #392]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674c:	d106      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006754:	d102      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006756:	4b60      	ldr	r3, [pc, #384]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006760:	f000 bce1 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006764:	f000 bcdf 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006768:	4b5c      	ldr	r3, [pc, #368]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676c:	f000 bcdb 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006774:	f000 bcd7 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006780:	430b      	orrs	r3, r1
 8006782:	f040 80ad 	bne.w	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006786:	4b51      	ldr	r3, [pc, #324]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800678e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006796:	d056      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679e:	f200 8090 	bhi.w	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80067a6:	f000 8088 	beq.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80067ae:	f200 8088 	bhi.w	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	2b80      	cmp	r3, #128	@ 0x80
 80067b6:	d032      	beq.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	2b80      	cmp	r3, #128	@ 0x80
 80067bc:	f200 8081 	bhi.w	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	d014      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80067cc:	e079      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067ce:	4b3f      	ldr	r3, [pc, #252]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067da:	d108      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 ff67 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ea:	f000 bc9c 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f2:	f000 bc98 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067f6:	4b35      	ldr	r3, [pc, #212]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006802:	d108      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006804:	f107 0318 	add.w	r3, r7, #24
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fcab 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006812:	f000 bc88 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800681a:	f000 bc84 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800681e:	4b2b      	ldr	r3, [pc, #172]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682a:	d108      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800682c:	f107 030c 	add.w	r3, r7, #12
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fdeb 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800683a:	f000 bc74 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006842:	f000 bc70 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006846:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800684a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006850:	4b1e      	ldr	r3, [pc, #120]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b04      	cmp	r3, #4
 800685a:	d10c      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800685c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006862:	4b1a      	ldr	r3, [pc, #104]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	4a18      	ldr	r2, [pc, #96]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006874:	e01f      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006876:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006882:	d106      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800688c:	4b11      	ldr	r3, [pc, #68]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006890:	e011      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006892:	4b0e      	ldr	r3, [pc, #56]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800689e:	d106      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80068a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a6:	d102      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068a8:	4b0b      	ldr	r3, [pc, #44]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ac:	e003      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80068b2:	f000 bc38 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068b6:	f000 bc36 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068ba:	4b08      	ldr	r3, [pc, #32]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80068bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068be:	f000 bc32 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c6:	f000 bc2e 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
 80068d0:	03d09000 	.word	0x03d09000
 80068d4:	003d0900 	.word	0x003d0900
 80068d8:	007a1200 	.word	0x007a1200
 80068dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80068e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80068e8:	430b      	orrs	r3, r1
 80068ea:	f040 809c 	bne.w	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80068ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80068f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068fe:	d054      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006906:	f200 808b 	bhi.w	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006910:	f000 8083 	beq.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800691a:	f200 8081 	bhi.w	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006924:	d02f      	beq.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800692c:	d878      	bhi.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800693a:	d012      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800693c:	e070      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800693e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800694a:	d107      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800694c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006950:	4618      	mov	r0, r3
 8006952:	f000 feaf 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800695a:	e3e4      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006960:	e3e1      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006962:	4b81      	ldr	r3, [pc, #516]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800696a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696e:	d107      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006970:	f107 0318 	add.w	r3, r7, #24
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fbf5 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697e:	e3d2      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006984:	e3cf      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006986:	4b78      	ldr	r3, [pc, #480]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800698e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006992:	d107      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006994:	f107 030c 	add.w	r3, r7, #12
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fd37 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a2:	e3c0      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a8:	e3bd      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069aa:	4b6f      	ldr	r3, [pc, #444]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d10c      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80069c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069c6:	4b68      	ldr	r3, [pc, #416]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	08db      	lsrs	r3, r3, #3
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	4a66      	ldr	r2, [pc, #408]	@ (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80069d2:	fa22 f303 	lsr.w	r3, r2, r3
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d8:	e01e      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069da:	4b63      	ldr	r3, [pc, #396]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e6:	d106      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80069e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ee:	d102      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069f0:	4b5f      	ldr	r3, [pc, #380]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069f4:	e010      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a02:	d106      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a0a:	d102      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a0c:	4b59      	ldr	r3, [pc, #356]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a10:	e002      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a16:	e386      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a18:	e385      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a1a:	4b57      	ldr	r3, [pc, #348]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a1e:	e382      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a24:	e37f      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	f040 80a7 	bne.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006a34:	4b4c      	ldr	r3, [pc, #304]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a38:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a44:	d055      	beq.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a4c:	f200 8096 	bhi.w	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a56:	f000 8084 	beq.w	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a60:	f200 808c 	bhi.w	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a6a:	d030      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a72:	f200 8083 	bhi.w	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a82:	d012      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006a84:	e07a      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a86:	4b38      	ldr	r3, [pc, #224]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a92:	d107      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fe0b 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa2:	e340      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa8:	e33d      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab8:	f107 0318 	add.w	r3, r7, #24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fb51 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac6:	e32e      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006acc:	e32b      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ace:	4b26      	ldr	r3, [pc, #152]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ada:	d107      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006adc:	f107 030c 	add.w	r3, r7, #12
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fc93 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aea:	e31c      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af0:	e319      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006afc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d10c      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b0e:	4b16      	ldr	r3, [pc, #88]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	08db      	lsrs	r3, r3, #3
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	4a14      	ldr	r2, [pc, #80]	@ (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b20:	e01e      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b22:	4b11      	ldr	r3, [pc, #68]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2e:	d106      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b36:	d102      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b38:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b3c:	e010      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b4a:	d106      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b52:	d102      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b54:	4b07      	ldr	r3, [pc, #28]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b58:	e002      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b5e:	e2e2      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b60:	e2e1      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b62:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b66:	e2de      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b68:	58024400 	.word	0x58024400
 8006b6c:	03d09000 	.word	0x03d09000
 8006b70:	003d0900 	.word	0x003d0900
 8006b74:	007a1200 	.word	0x007a1200
 8006b78:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b80:	e2d1      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b86:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	f040 809c 	bne.w	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b90:	4b93      	ldr	r3, [pc, #588]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ba0:	d054      	beq.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ba8:	f200 808b 	bhi.w	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bb2:	f000 8083 	beq.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bbc:	f200 8081 	bhi.w	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bc6:	d02f      	beq.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bce:	d878      	bhi.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bdc:	d012      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006bde:	e070      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006be0:	4b7f      	ldr	r3, [pc, #508]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bec:	d107      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fd5e 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bfc:	e293      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c02:	e290      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c04:	4b76      	ldr	r3, [pc, #472]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c10:	d107      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c12:	f107 0318 	add.w	r3, r7, #24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 faa4 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c20:	e281      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c26:	e27e      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c28:	4b6d      	ldr	r3, [pc, #436]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c34:	d107      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fbe6 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c44:	e26f      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4a:	e26c      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c4c:	4b64      	ldr	r3, [pc, #400]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c56:	4b62      	ldr	r3, [pc, #392]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c68:	4b5d      	ldr	r3, [pc, #372]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	08db      	lsrs	r3, r3, #3
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	4a5c      	ldr	r2, [pc, #368]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7a:	e01e      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c7c:	4b58      	ldr	r3, [pc, #352]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c88:	d106      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c90:	d102      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c92:	4b55      	ldr	r3, [pc, #340]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c96:	e010      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c98:	4b51      	ldr	r3, [pc, #324]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ca4:	d106      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cac:	d102      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cae:	4b4f      	ldr	r3, [pc, #316]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb2:	e002      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006cb8:	e235      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cba:	e234      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc0:	e231      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc6:	e22e      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ccc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	f040 808f 	bne.w	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006cd6:	4b42      	ldr	r3, [pc, #264]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cda:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006cde:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ce6:	d06b      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cee:	d874      	bhi.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cf6:	d056      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cfe:	d86c      	bhi.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d06:	d03b      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d0e:	d864      	bhi.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d16:	d021      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1e:	d85c      	bhi.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2c:	d004      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d2e:	e054      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fd ff26 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8006d34:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d36:	e1f6      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d38:	4b29      	ldr	r3, [pc, #164]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d44:	d107      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d46:	f107 0318 	add.w	r3, r7, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fa0a 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d54:	e1e7      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5a:	e1e4      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d68:	d107      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d6a:	f107 030c 	add.w	r3, r7, #12
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fb4c 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d78:	e1d5      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7e:	e1d2      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d80:	4b17      	ldr	r3, [pc, #92]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d109      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d8c:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	08db      	lsrs	r3, r3, #3
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	4a13      	ldr	r2, [pc, #76]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9e:	e1c2      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da4:	e1bf      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006da6:	4b0e      	ldr	r3, [pc, #56]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db2:	d102      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006db4:	4b0c      	ldr	r3, [pc, #48]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db8:	e1b5      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	e1b2      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dc0:	4b07      	ldr	r3, [pc, #28]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dcc:	d102      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006dce:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd2:	e1a8      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd8:	e1a5      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dde:	e1a2      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006de0:	58024400 	.word	0x58024400
 8006de4:	03d09000 	.word	0x03d09000
 8006de8:	003d0900 	.word	0x003d0900
 8006dec:	007a1200 	.word	0x007a1200
 8006df0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	d173      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006e00:	4b9c      	ldr	r3, [pc, #624]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e10:	d02f      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e18:	d863      	bhi.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e26:	d012      	beq.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006e28:	e05b      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e2a:	4b92      	ldr	r3, [pc, #584]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e36:	d107      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e38:	f107 0318 	add.w	r3, r7, #24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f991 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e46:	e16e      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	e16b      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e4e:	4b89      	ldr	r3, [pc, #548]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e5a:	d107      	bne.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fad3 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e6a:	e15c      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e70:	e159      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e72:	4b80      	ldr	r3, [pc, #512]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d10c      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e8e:	4b79      	ldr	r3, [pc, #484]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	08db      	lsrs	r3, r3, #3
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	4a77      	ldr	r2, [pc, #476]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea0:	e01e      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ea2:	4b74      	ldr	r3, [pc, #464]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eae:	d106      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eb6:	d102      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eb8:	4b70      	ldr	r3, [pc, #448]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ebc:	e010      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eca:	d106      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ed2:	d102      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ed8:	e002      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ede:	e122      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ee0:	e121      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee6:	e11e      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	d133      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006efc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f0a:	d012      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006f0c:	e023      	b.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f0e:	4b59      	ldr	r3, [pc, #356]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fbc7 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2a:	e0fc      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f30:	e0f9      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f32:	4b50      	ldr	r3, [pc, #320]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f40:	f107 0318 	add.w	r3, r7, #24
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 f90d 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f4e:	e0ea      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f54:	e0e7      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f5a:	e0e4      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f60:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006f64:	430b      	orrs	r3, r1
 8006f66:	f040 808d 	bne.w	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f6a:	4b42      	ldr	r3, [pc, #264]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f7a:	d06b      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f82:	d874      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8a:	d056      	beq.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f92:	d86c      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f9a:	d03b      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa2:	d864      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006faa:	d021      	beq.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb2:	d85c      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc0:	d004      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006fc2:	e054      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006fc4:	f000 f8b8 	bl	8007138 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fca:	e0ac      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fcc:	4b29      	ldr	r3, [pc, #164]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fd8:	d107      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fda:	f107 0318 	add.w	r3, r7, #24
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f8c0 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe8:	e09d      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fee:	e09a      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ff0:	4b20      	ldr	r3, [pc, #128]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffc:	d107      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fa02 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800700c:	e08b      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007012:	e088      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007014:	4b17      	ldr	r3, [pc, #92]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b04      	cmp	r3, #4
 800701e:	d109      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007020:	4b14      	ldr	r3, [pc, #80]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a13      	ldr	r2, [pc, #76]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007032:	e078      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007038:	e075      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800703a:	4b0e      	ldr	r3, [pc, #56]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007046:	d102      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007048:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800704c:	e06b      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007052:	e068      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007060:	d102      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007062:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007066:	e05e      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800706c:	e05b      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007072:	e058      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007074:	58024400 	.word	0x58024400
 8007078:	03d09000 	.word	0x03d09000
 800707c:	003d0900 	.word	0x003d0900
 8007080:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007088:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800708c:	430b      	orrs	r3, r1
 800708e:	d148      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007090:	4b27      	ldr	r3, [pc, #156]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007094:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007098:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070a0:	d02a      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070a8:	d838      	bhi.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80070b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070b6:	d00d      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80070b8:	e030      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c6:	d102      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80070ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070cc:	e02b      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d2:	e028      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070d4:	4b16      	ldr	r3, [pc, #88]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e0:	d107      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fae4 	bl	80076b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f0:	e019      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f6:	e016      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007104:	d107      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007106:	f107 0318 	add.w	r3, r7, #24
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f82a 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007114:	e007      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711a:	e004      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007120:	e001      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007128:	4618      	mov	r0, r3
 800712a:	3740      	adds	r7, #64	@ 0x40
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	58024400 	.word	0x58024400
 8007134:	007a1200 	.word	0x007a1200

08007138 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800713c:	f7fd fcf0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8007140:	4602      	mov	r2, r0
 8007142:	4b06      	ldr	r3, [pc, #24]	@ (800715c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	091b      	lsrs	r3, r3, #4
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	4904      	ldr	r1, [pc, #16]	@ (8007160 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800714e:	5ccb      	ldrb	r3, [r1, r3]
 8007150:	f003 031f 	and.w	r3, r3, #31
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007158:	4618      	mov	r0, r3
 800715a:	bd80      	pop	{r7, pc}
 800715c:	58024400 	.word	0x58024400
 8007160:	08009ef4 	.word	0x08009ef4

08007164 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007164:	b480      	push	{r7}
 8007166:	b089      	sub	sp, #36	@ 0x24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800716c:	4ba1      	ldr	r3, [pc, #644]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007176:	4b9f      	ldr	r3, [pc, #636]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717a:	0b1b      	lsrs	r3, r3, #12
 800717c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007180:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007182:	4b9c      	ldr	r3, [pc, #624]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	091b      	lsrs	r3, r3, #4
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800718e:	4b99      	ldr	r3, [pc, #612]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8111 	beq.w	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	f000 8083 	beq.w	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	f200 80a1 	bhi.w	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d056      	beq.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ce:	e099      	b.n	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d0:	4b88      	ldr	r3, [pc, #544]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d02d      	beq.n	8007238 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071dc:	4b85      	ldr	r3, [pc, #532]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	4a84      	ldr	r2, [pc, #528]	@ (80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b7b      	ldr	r3, [pc, #492]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007236:	e087      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b6a      	ldr	r3, [pc, #424]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727a:	e065      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b59      	ldr	r3, [pc, #356]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072be:	e043      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d2:	4b48      	ldr	r3, [pc, #288]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007302:	e021      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007316:	4b37      	ldr	r3, [pc, #220]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007326:	ed97 6a03 	vldr	s12, [r7, #12]
 800732a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800732e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800733a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007346:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007348:	4b2a      	ldr	r3, [pc, #168]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734c:	0a5b      	lsrs	r3, r3, #9
 800734e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800735e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007362:	edd7 6a07 	vldr	s13, [r7, #28]
 8007366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800736a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736e:	ee17 2a90 	vmov	r2, s15
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007376:	4b1f      	ldr	r3, [pc, #124]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007388:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800738c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007390:	edd7 6a07 	vldr	s13, [r7, #28]
 8007394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739c:	ee17 2a90 	vmov	r2, s15
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80073a4:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	0e1b      	lsrs	r3, r3, #24
 80073aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073be:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ca:	ee17 2a90 	vmov	r2, s15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073d2:	e008      	b.n	80073e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	609a      	str	r2, [r3, #8]
}
 80073e6:	bf00      	nop
 80073e8:	3724      	adds	r7, #36	@ 0x24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	58024400 	.word	0x58024400
 80073f8:	03d09000 	.word	0x03d09000
 80073fc:	46000000 	.word	0x46000000
 8007400:	4c742400 	.word	0x4c742400
 8007404:	4a742400 	.word	0x4a742400
 8007408:	4af42400 	.word	0x4af42400

0800740c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	@ 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007414:	4ba1      	ldr	r3, [pc, #644]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800741e:	4b9f      	ldr	r3, [pc, #636]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007422:	0d1b      	lsrs	r3, r3, #20
 8007424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007428:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800742a:	4b9c      	ldr	r3, [pc, #624]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007436:	4b99      	ldr	r3, [pc, #612]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743a:	08db      	lsrs	r3, r3, #3
 800743c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	fb02 f303 	mul.w	r3, r2, r3
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8111 	beq.w	800767c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b02      	cmp	r3, #2
 800745e:	f000 8083 	beq.w	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f200 80a1 	bhi.w	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d056      	beq.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007476:	e099      	b.n	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007478:	4b88      	ldr	r3, [pc, #544]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d02d      	beq.n	80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007484:	4b85      	ldr	r3, [pc, #532]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	08db      	lsrs	r3, r3, #3
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	4a84      	ldr	r2, [pc, #528]	@ (80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007490:	fa22 f303 	lsr.w	r3, r2, r3
 8007494:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ae:	4b7b      	ldr	r3, [pc, #492]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074be:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074de:	e087      	b.n	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f2:	4b6a      	ldr	r3, [pc, #424]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007502:	ed97 6a03 	vldr	s12, [r7, #12]
 8007506:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007522:	e065      	b.n	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007536:	4b59      	ldr	r3, [pc, #356]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007546:	ed97 6a03 	vldr	s12, [r7, #12]
 800754a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800755a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007566:	e043      	b.n	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757a:	4b48      	ldr	r3, [pc, #288]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758a:	ed97 6a03 	vldr	s12, [r7, #12]
 800758e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800759e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075aa:	e021      	b.n	80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075be:	4b37      	ldr	r3, [pc, #220]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075f0:	4b2a      	ldr	r3, [pc, #168]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	0a5b      	lsrs	r3, r3, #9
 80075f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800760a:	edd7 6a07 	vldr	s13, [r7, #28]
 800760e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007616:	ee17 2a90 	vmov	r2, s15
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800761e:	4b1f      	ldr	r3, [pc, #124]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	0c1b      	lsrs	r3, r3, #16
 8007624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007638:	edd7 6a07 	vldr	s13, [r7, #28]
 800763c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007644:	ee17 2a90 	vmov	r2, s15
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800764c:	4b13      	ldr	r3, [pc, #76]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	0e1b      	lsrs	r3, r3, #24
 8007652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007666:	edd7 6a07 	vldr	s13, [r7, #28]
 800766a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007672:	ee17 2a90 	vmov	r2, s15
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800767a:	e008      	b.n	800768e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	609a      	str	r2, [r3, #8]
}
 800768e:	bf00      	nop
 8007690:	3724      	adds	r7, #36	@ 0x24
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
 80076a0:	03d09000 	.word	0x03d09000
 80076a4:	46000000 	.word	0x46000000
 80076a8:	4c742400 	.word	0x4c742400
 80076ac:	4a742400 	.word	0x4a742400
 80076b0:	4af42400 	.word	0x4af42400

080076b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b089      	sub	sp, #36	@ 0x24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076bc:	4ba0      	ldr	r3, [pc, #640]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80076c6:	4b9e      	ldr	r3, [pc, #632]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ca:	091b      	lsrs	r3, r3, #4
 80076cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076d2:	4b9b      	ldr	r3, [pc, #620]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076dc:	4b98      	ldr	r3, [pc, #608]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e0:	08db      	lsrs	r3, r3, #3
 80076e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8111 	beq.w	8007922 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b02      	cmp	r3, #2
 8007704:	f000 8083 	beq.w	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	2b02      	cmp	r3, #2
 800770c:	f200 80a1 	bhi.w	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d056      	beq.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800771c:	e099      	b.n	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800771e:	4b88      	ldr	r3, [pc, #544]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02d      	beq.n	8007786 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800772a:	4b85      	ldr	r3, [pc, #532]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	08db      	lsrs	r3, r3, #3
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	4a83      	ldr	r2, [pc, #524]	@ (8007944 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007754:	4b7a      	ldr	r3, [pc, #488]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	ed97 6a03 	vldr	s12, [r7, #12]
 8007768:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800776c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007780:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007784:	e087      	b.n	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800794c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007798:	4b69      	ldr	r3, [pc, #420]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c8:	e065      	b.n	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007950 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80077d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077dc:	4b58      	ldr	r3, [pc, #352]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800780c:	e043      	b.n	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007818:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800781c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007820:	4b47      	ldr	r3, [pc, #284]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007830:	ed97 6a03 	vldr	s12, [r7, #12]
 8007834:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007840:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007850:	e021      	b.n	8007896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	ee07 3a90 	vmov	s15, r3
 8007858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800794c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007864:	4b36      	ldr	r3, [pc, #216]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007874:	ed97 6a03 	vldr	s12, [r7, #12]
 8007878:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800787c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007884:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007894:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007896:	4b2a      	ldr	r3, [pc, #168]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789a:	0a5b      	lsrs	r3, r3, #9
 800789c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078bc:	ee17 2a90 	vmov	r2, s15
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80078c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078de:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ea:	ee17 2a90 	vmov	r2, s15
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80078f2:	4b13      	ldr	r3, [pc, #76]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f6:	0e1b      	lsrs	r3, r3, #24
 80078f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007918:	ee17 2a90 	vmov	r2, s15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007920:	e008      	b.n	8007934 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	609a      	str	r2, [r3, #8]
}
 8007934:	bf00      	nop
 8007936:	3724      	adds	r7, #36	@ 0x24
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	58024400 	.word	0x58024400
 8007944:	03d09000 	.word	0x03d09000
 8007948:	46000000 	.word	0x46000000
 800794c:	4c742400 	.word	0x4c742400
 8007950:	4a742400 	.word	0x4a742400
 8007954:	4af42400 	.word	0x4af42400

08007958 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <RCCEx_PLL2_Config+0x1e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b3f      	cmp	r3, #63	@ 0x3f
 8007974:	d904      	bls.n	8007980 <RCCEx_PLL2_Config+0x28>
 8007976:	f640 6172 	movw	r1, #3698	@ 0xe72
 800797a:	4885      	ldr	r0, [pc, #532]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 800797c:	f7f9 faa4 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d904      	bls.n	8007992 <RCCEx_PLL2_Config+0x3a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007990:	d904      	bls.n	800799c <RCCEx_PLL2_Config+0x44>
 8007992:	f640 6173 	movw	r1, #3699	@ 0xe73
 8007996:	487e      	ldr	r0, [pc, #504]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 8007998:	f7f9 fa96 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <RCCEx_PLL2_Config+0x54>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b80      	cmp	r3, #128	@ 0x80
 80079aa:	d904      	bls.n	80079b6 <RCCEx_PLL2_Config+0x5e>
 80079ac:	f640 6174 	movw	r1, #3700	@ 0xe74
 80079b0:	4877      	ldr	r0, [pc, #476]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 80079b2:	f7f9 fa89 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <RCCEx_PLL2_Config+0x6e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b80      	cmp	r3, #128	@ 0x80
 80079c4:	d904      	bls.n	80079d0 <RCCEx_PLL2_Config+0x78>
 80079c6:	f640 6175 	movw	r1, #3701	@ 0xe75
 80079ca:	4871      	ldr	r0, [pc, #452]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 80079cc:	f7f9 fa7c 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <RCCEx_PLL2_Config+0x88>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b80      	cmp	r3, #128	@ 0x80
 80079de:	d904      	bls.n	80079ea <RCCEx_PLL2_Config+0x92>
 80079e0:	f640 6176 	movw	r1, #3702	@ 0xe76
 80079e4:	486a      	ldr	r0, [pc, #424]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 80079e6:	f7f9 fa6f 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d010      	beq.n	8007a14 <RCCEx_PLL2_Config+0xbc>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d00c      	beq.n	8007a14 <RCCEx_PLL2_Config+0xbc>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	2b80      	cmp	r3, #128	@ 0x80
 8007a00:	d008      	beq.n	8007a14 <RCCEx_PLL2_Config+0xbc>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a08:	d004      	beq.n	8007a14 <RCCEx_PLL2_Config+0xbc>
 8007a0a:	f640 6177 	movw	r1, #3703	@ 0xe77
 8007a0e:	4860      	ldr	r0, [pc, #384]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 8007a10:	f7f9 fa5a 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <RCCEx_PLL2_Config+0xd6>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	d004      	beq.n	8007a2e <RCCEx_PLL2_Config+0xd6>
 8007a24:	f640 6178 	movw	r1, #3704	@ 0xe78
 8007a28:	4859      	ldr	r0, [pc, #356]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 8007a2a:	f7f9 fa4d 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a36:	d304      	bcc.n	8007a42 <RCCEx_PLL2_Config+0xea>
 8007a38:	f640 6179 	movw	r1, #3705	@ 0xe79
 8007a3c:	4854      	ldr	r0, [pc, #336]	@ (8007b90 <RCCEx_PLL2_Config+0x238>)
 8007a3e:	f7f9 fa43 	bl	8000ec8 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a42:	4b54      	ldr	r3, [pc, #336]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d101      	bne.n	8007a52 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e099      	b.n	8007b86 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a52:	4b50      	ldr	r3, [pc, #320]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a4f      	ldr	r2, [pc, #316]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007a58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7f9 fcb3 	bl	80013c8 <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL2_Config+0x120>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a66:	f7f9 fcaf 	bl	80013c8 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e086      	b.n	8007b86 <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a78:	4b46      	ldr	r3, [pc, #280]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a84:	4b43      	ldr	r3, [pc, #268]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a88:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	4940      	ldr	r1, [pc, #256]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	025b      	lsls	r3, r3, #9
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	061b      	lsls	r3, r3, #24
 8007ac4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ac8:	4932      	ldr	r1, [pc, #200]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ace:	4b31      	ldr	r3, [pc, #196]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	492e      	ldr	r1, [pc, #184]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	f023 0220 	bic.w	r2, r3, #32
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	4929      	ldr	r1, [pc, #164]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007af2:	4b28      	ldr	r3, [pc, #160]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	4a27      	ldr	r2, [pc, #156]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007af8:	f023 0310 	bic.w	r3, r3, #16
 8007afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007afe:	4b25      	ldr	r3, [pc, #148]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b02:	4b25      	ldr	r3, [pc, #148]	@ (8007b98 <RCCEx_PLL2_Config+0x240>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	69d2      	ldr	r2, [r2, #28]
 8007b0a:	00d2      	lsls	r2, r2, #3
 8007b0c:	4921      	ldr	r1, [pc, #132]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b12:	4b20      	ldr	r3, [pc, #128]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	4a1f      	ldr	r2, [pc, #124]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b18:	f043 0310 	orr.w	r3, r3, #16
 8007b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b24:	4b1b      	ldr	r3, [pc, #108]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4a1a      	ldr	r2, [pc, #104]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b30:	e00f      	b.n	8007b52 <RCCEx_PLL2_Config+0x1fa>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d106      	bne.n	8007b46 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b38:	4b16      	ldr	r3, [pc, #88]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b44:	e005      	b.n	8007b52 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b46:	4b13      	ldr	r3, [pc, #76]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	4a12      	ldr	r2, [pc, #72]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b52:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a0f      	ldr	r2, [pc, #60]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5e:	f7f9 fc33 	bl	80013c8 <HAL_GetTick>
 8007b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b64:	e008      	b.n	8007b78 <RCCEx_PLL2_Config+0x220>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b66:	f7f9 fc2f 	bl	80013c8 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e006      	b.n	8007b86 <RCCEx_PLL2_Config+0x22e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b78:	4b06      	ldr	r3, [pc, #24]	@ (8007b94 <RCCEx_PLL2_Config+0x23c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	08009dcc 	.word	0x08009dcc
 8007b94:	58024400 	.word	0x58024400
 8007b98:	ffff0007 	.word	0xffff0007

08007b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <RCCEx_PLL3_Config+0x1e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007bb8:	d904      	bls.n	8007bc4 <RCCEx_PLL3_Config+0x28>
 8007bba:	f640 61da 	movw	r1, #3802	@ 0xeda
 8007bbe:	4887      	ldr	r0, [pc, #540]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007bc0:	f7f9 f982 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d904      	bls.n	8007bd6 <RCCEx_PLL3_Config+0x3a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd4:	d904      	bls.n	8007be0 <RCCEx_PLL3_Config+0x44>
 8007bd6:	f640 61db 	movw	r1, #3803	@ 0xedb
 8007bda:	4880      	ldr	r0, [pc, #512]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007bdc:	f7f9 f974 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <RCCEx_PLL3_Config+0x54>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	2b80      	cmp	r3, #128	@ 0x80
 8007bee:	d904      	bls.n	8007bfa <RCCEx_PLL3_Config+0x5e>
 8007bf0:	f640 61dc 	movw	r1, #3804	@ 0xedc
 8007bf4:	4879      	ldr	r0, [pc, #484]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007bf6:	f7f9 f967 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <RCCEx_PLL3_Config+0x6e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b80      	cmp	r3, #128	@ 0x80
 8007c08:	d904      	bls.n	8007c14 <RCCEx_PLL3_Config+0x78>
 8007c0a:	f640 61dd 	movw	r1, #3805	@ 0xedd
 8007c0e:	4873      	ldr	r0, [pc, #460]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007c10:	f7f9 f95a 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <RCCEx_PLL3_Config+0x88>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b80      	cmp	r3, #128	@ 0x80
 8007c22:	d904      	bls.n	8007c2e <RCCEx_PLL3_Config+0x92>
 8007c24:	f640 61de 	movw	r1, #3806	@ 0xede
 8007c28:	486c      	ldr	r0, [pc, #432]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007c2a:	f7f9 f94d 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d013      	beq.n	8007c5e <RCCEx_PLL3_Config+0xc2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3e:	d00e      	beq.n	8007c5e <RCCEx_PLL3_Config+0xc2>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c48:	d009      	beq.n	8007c5e <RCCEx_PLL3_Config+0xc2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c52:	d004      	beq.n	8007c5e <RCCEx_PLL3_Config+0xc2>
 8007c54:	f640 61df 	movw	r1, #3807	@ 0xedf
 8007c58:	4860      	ldr	r0, [pc, #384]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007c5a:	f7f9 f935 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <RCCEx_PLL3_Config+0xde>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6e:	d004      	beq.n	8007c7a <RCCEx_PLL3_Config+0xde>
 8007c70:	f44f 616e 	mov.w	r1, #3808	@ 0xee0
 8007c74:	4859      	ldr	r0, [pc, #356]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007c76:	f7f9 f927 	bl	8000ec8 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c82:	d304      	bcc.n	8007c8e <RCCEx_PLL3_Config+0xf2>
 8007c84:	f640 61e1 	movw	r1, #3809	@ 0xee1
 8007c88:	4854      	ldr	r0, [pc, #336]	@ (8007ddc <RCCEx_PLL3_Config+0x240>)
 8007c8a:	f7f9 f91d 	bl	8000ec8 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c8e:	4b54      	ldr	r3, [pc, #336]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d101      	bne.n	8007c9e <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e099      	b.n	8007dd2 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c9e:	4b50      	ldr	r3, [pc, #320]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7f9 fb8d 	bl	80013c8 <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL3_Config+0x128>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cb2:	f7f9 fb89 	bl	80013c8 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e086      	b.n	8007dd2 <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cc4:	4b46      	ldr	r3, [pc, #280]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1f0      	bne.n	8007cb2 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cd0:	4b43      	ldr	r3, [pc, #268]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	051b      	lsls	r3, r3, #20
 8007cde:	4940      	ldr	r1, [pc, #256]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	025b      	lsls	r3, r3, #9
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	061b      	lsls	r3, r3, #24
 8007d10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d14:	4932      	ldr	r1, [pc, #200]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d1a:	4b31      	ldr	r3, [pc, #196]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	492e      	ldr	r1, [pc, #184]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	4929      	ldr	r1, [pc, #164]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d3e:	4b28      	ldr	r3, [pc, #160]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	4a27      	ldr	r2, [pc, #156]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d4a:	4b25      	ldr	r3, [pc, #148]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4e:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <RCCEx_PLL3_Config+0x248>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	69d2      	ldr	r2, [r2, #28]
 8007d56:	00d2      	lsls	r2, r2, #3
 8007d58:	4921      	ldr	r1, [pc, #132]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d5e:	4b20      	ldr	r3, [pc, #128]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	4a1f      	ldr	r2, [pc, #124]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d70:	4b1b      	ldr	r3, [pc, #108]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	4a1a      	ldr	r2, [pc, #104]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d7c:	e00f      	b.n	8007d9e <RCCEx_PLL3_Config+0x202>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d84:	4b16      	ldr	r3, [pc, #88]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	4a15      	ldr	r2, [pc, #84]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d90:	e005      	b.n	8007d9e <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d92:	4b13      	ldr	r3, [pc, #76]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d96:	4a12      	ldr	r2, [pc, #72]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d9e:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a0f      	ldr	r2, [pc, #60]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007daa:	f7f9 fb0d 	bl	80013c8 <HAL_GetTick>
 8007dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007db0:	e008      	b.n	8007dc4 <RCCEx_PLL3_Config+0x228>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007db2:	f7f9 fb09 	bl	80013c8 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e006      	b.n	8007dd2 <RCCEx_PLL3_Config+0x236>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dc4:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <RCCEx_PLL3_Config+0x244>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	08009dcc 	.word	0x08009dcc
 8007de0:	58024400 	.word	0x58024400
 8007de4:	ffff0007 	.word	0xffff0007

08007de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0f5      	b.n	8007fe6 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8007ff0 <HAL_TIM_Base_Init+0x208>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d045      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0c:	d040      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a78      	ldr	r2, [pc, #480]	@ (8007ff4 <HAL_TIM_Base_Init+0x20c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d03b      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a76      	ldr	r2, [pc, #472]	@ (8007ff8 <HAL_TIM_Base_Init+0x210>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d036      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a75      	ldr	r2, [pc, #468]	@ (8007ffc <HAL_TIM_Base_Init+0x214>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d031      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a73      	ldr	r2, [pc, #460]	@ (8008000 <HAL_TIM_Base_Init+0x218>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d02c      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a72      	ldr	r2, [pc, #456]	@ (8008004 <HAL_TIM_Base_Init+0x21c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d027      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a70      	ldr	r2, [pc, #448]	@ (8008008 <HAL_TIM_Base_Init+0x220>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d022      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800800c <HAL_TIM_Base_Init+0x224>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d01d      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a6d      	ldr	r2, [pc, #436]	@ (8008010 <HAL_TIM_Base_Init+0x228>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d018      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a6c      	ldr	r2, [pc, #432]	@ (8008014 <HAL_TIM_Base_Init+0x22c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a6a      	ldr	r2, [pc, #424]	@ (8008018 <HAL_TIM_Base_Init+0x230>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00e      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a69      	ldr	r2, [pc, #420]	@ (800801c <HAL_TIM_Base_Init+0x234>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d009      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a67      	ldr	r2, [pc, #412]	@ (8008020 <HAL_TIM_Base_Init+0x238>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d004      	beq.n	8007e90 <HAL_TIM_Base_Init+0xa8>
 8007e86:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8007e8a:	4866      	ldr	r0, [pc, #408]	@ (8008024 <HAL_TIM_Base_Init+0x23c>)
 8007e8c:	f7f9 f81c 	bl	8000ec8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d014      	beq.n	8007ec2 <HAL_TIM_Base_Init+0xda>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d010      	beq.n	8007ec2 <HAL_TIM_Base_Init+0xda>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d00c      	beq.n	8007ec2 <HAL_TIM_Base_Init+0xda>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b40      	cmp	r3, #64	@ 0x40
 8007eae:	d008      	beq.n	8007ec2 <HAL_TIM_Base_Init+0xda>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2b60      	cmp	r3, #96	@ 0x60
 8007eb6:	d004      	beq.n	8007ec2 <HAL_TIM_Base_Init+0xda>
 8007eb8:	f240 1117 	movw	r1, #279	@ 0x117
 8007ebc:	4859      	ldr	r0, [pc, #356]	@ (8008024 <HAL_TIM_Base_Init+0x23c>)
 8007ebe:	f7f9 f803 	bl	8000ec8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_TIM_Base_Init+0x100>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed2:	d009      	beq.n	8007ee8 <HAL_TIM_Base_Init+0x100>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007edc:	d004      	beq.n	8007ee8 <HAL_TIM_Base_Init+0x100>
 8007ede:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007ee2:	4850      	ldr	r0, [pc, #320]	@ (8008024 <HAL_TIM_Base_Init+0x23c>)
 8007ee4:	f7f8 fff0 	bl	8000ec8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ef0:	d004      	beq.n	8007efc <HAL_TIM_Base_Init+0x114>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a41      	ldr	r2, [pc, #260]	@ (8007ffc <HAL_TIM_Base_Init+0x214>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d107      	bne.n	8007f0c <HAL_TIM_Base_Init+0x124>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e00e      	b.n	8007f2a <HAL_TIM_Base_Init+0x142>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d006      	beq.n	8007f22 <HAL_TIM_Base_Init+0x13a>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f1c:	d201      	bcs.n	8007f22 <HAL_TIM_Base_Init+0x13a>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <HAL_TIM_Base_Init+0x13c>
 8007f22:	2300      	movs	r3, #0
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <HAL_TIM_Base_Init+0x150>
 8007f2e:	f240 1119 	movw	r1, #281	@ 0x119
 8007f32:	483c      	ldr	r0, [pc, #240]	@ (8008024 <HAL_TIM_Base_Init+0x23c>)
 8007f34:	f7f8 ffc8 	bl	8000ec8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_TIM_Base_Init+0x16a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	2b80      	cmp	r3, #128	@ 0x80
 8007f46:	d004      	beq.n	8007f52 <HAL_TIM_Base_Init+0x16a>
 8007f48:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8007f4c:	4835      	ldr	r0, [pc, #212]	@ (8008024 <HAL_TIM_Base_Init+0x23c>)
 8007f4e:	f7f8 ffbb 	bl	8000ec8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7f9 f826 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f000 f852 	bl	8008028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40010000 	.word	0x40010000
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40001000 	.word	0x40001000
 8008004:	40001400 	.word	0x40001400
 8008008:	40010400 	.word	0x40010400
 800800c:	40001800 	.word	0x40001800
 8008010:	40001c00 	.word	0x40001c00
 8008014:	40002000 	.word	0x40002000
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400
 8008020:	40014800 	.word	0x40014800
 8008024:	08009e08 	.word	0x08009e08

08008028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a46      	ldr	r2, [pc, #280]	@ (8008154 <TIM_Base_SetConfig+0x12c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d013      	beq.n	8008068 <TIM_Base_SetConfig+0x40>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008046:	d00f      	beq.n	8008068 <TIM_Base_SetConfig+0x40>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a43      	ldr	r2, [pc, #268]	@ (8008158 <TIM_Base_SetConfig+0x130>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00b      	beq.n	8008068 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a42      	ldr	r2, [pc, #264]	@ (800815c <TIM_Base_SetConfig+0x134>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a41      	ldr	r2, [pc, #260]	@ (8008160 <TIM_Base_SetConfig+0x138>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a40      	ldr	r2, [pc, #256]	@ (8008164 <TIM_Base_SetConfig+0x13c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d108      	bne.n	800807a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a35      	ldr	r2, [pc, #212]	@ (8008154 <TIM_Base_SetConfig+0x12c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d01f      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008088:	d01b      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a32      	ldr	r2, [pc, #200]	@ (8008158 <TIM_Base_SetConfig+0x130>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d017      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a31      	ldr	r2, [pc, #196]	@ (800815c <TIM_Base_SetConfig+0x134>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d013      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a30      	ldr	r2, [pc, #192]	@ (8008160 <TIM_Base_SetConfig+0x138>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00f      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a2f      	ldr	r2, [pc, #188]	@ (8008164 <TIM_Base_SetConfig+0x13c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00b      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008168 <TIM_Base_SetConfig+0x140>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d007      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a2d      	ldr	r2, [pc, #180]	@ (800816c <TIM_Base_SetConfig+0x144>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_Base_SetConfig+0x9a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008170 <TIM_Base_SetConfig+0x148>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d108      	bne.n	80080d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a16      	ldr	r2, [pc, #88]	@ (8008154 <TIM_Base_SetConfig+0x12c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00f      	beq.n	8008120 <TIM_Base_SetConfig+0xf8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a18      	ldr	r2, [pc, #96]	@ (8008164 <TIM_Base_SetConfig+0x13c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00b      	beq.n	8008120 <TIM_Base_SetConfig+0xf8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a17      	ldr	r2, [pc, #92]	@ (8008168 <TIM_Base_SetConfig+0x140>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d007      	beq.n	8008120 <TIM_Base_SetConfig+0xf8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a16      	ldr	r2, [pc, #88]	@ (800816c <TIM_Base_SetConfig+0x144>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_Base_SetConfig+0xf8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <TIM_Base_SetConfig+0x148>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d103      	bne.n	8008128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b01      	cmp	r3, #1
 8008138:	d105      	bne.n	8008146 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f023 0201 	bic.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	611a      	str	r2, [r3, #16]
  }
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40010000 	.word	0x40010000
 8008158:	40000400 	.word	0x40000400
 800815c:	40000800 	.word	0x40000800
 8008160:	40000c00 	.word	0x40000c00
 8008164:	40010400 	.word	0x40010400
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800

08008174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a37      	ldr	r2, [pc, #220]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d031      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008190:	d02c      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a33      	ldr	r2, [pc, #204]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d027      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a31      	ldr	r2, [pc, #196]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d022      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a30      	ldr	r2, [pc, #192]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d01d      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d018      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a2d      	ldr	r2, [pc, #180]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d013      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00e      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a2a      	ldr	r2, [pc, #168]	@ (800827c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a28      	ldr	r2, [pc, #160]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80081e2:	f240 71cb 	movw	r1, #1995	@ 0x7cb
 80081e6:	4827      	ldr	r0, [pc, #156]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081e8:	f7f8 fe6e 	bl	8000ec8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d020      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	d01c      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b20      	cmp	r3, #32
 8008202:	d018      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b30      	cmp	r3, #48	@ 0x30
 800820a:	d014      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b40      	cmp	r3, #64	@ 0x40
 8008212:	d010      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b50      	cmp	r3, #80	@ 0x50
 800821a:	d00c      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b60      	cmp	r3, #96	@ 0x60
 8008222:	d008      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b70      	cmp	r3, #112	@ 0x70
 800822a:	d004      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800822c:	f240 71cc 	movw	r1, #1996	@ 0x7cc
 8008230:	4814      	ldr	r0, [pc, #80]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008232:	f7f8 fe49 	bl	8000ec8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b80      	cmp	r3, #128	@ 0x80
 800823c:	d008      	beq.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008246:	f240 71cd 	movw	r1, #1997	@ 0x7cd
 800824a:	480e      	ldr	r0, [pc, #56]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800824c:	f7f8 fe3c 	bl	8000ec8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008256:	2b01      	cmp	r3, #1
 8008258:	d116      	bne.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800825a:	2302      	movs	r3, #2
 800825c:	e0db      	b.n	8008416 <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 800825e:	bf00      	nop
 8008260:	40010000 	.word	0x40010000
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40001000 	.word	0x40001000
 8008274:	40001400 	.word	0x40001400
 8008278:	40010400 	.word	0x40010400
 800827c:	40001800 	.word	0x40001800
 8008280:	40014000 	.word	0x40014000
 8008284:	08009e40 	.word	0x08009e40
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a5c      	ldr	r2, [pc, #368]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d004      	beq.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d161      	bne.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d054      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082cc:	d04f      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082d6:	d04a      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082e0:	d045      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082ea:	d040      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80082f4:	d03b      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80082fe:	d036      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008308:	d031      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8008312:	d02c      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800831c:	d027      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8008326:	d022      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008330:	d01d      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800833a:	d018      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008344:	d013      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800834e:	d00e      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8008358:	d009      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8008362:	d004      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8008364:	f240 71df 	movw	r1, #2015	@ 0x7df
 8008368:	482f      	ldr	r0, [pc, #188]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 800836a:	f7f8 fdad 	bl	8000ec8 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008374:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a20      	ldr	r2, [pc, #128]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d022      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ac:	d01d      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1e      	ldr	r2, [pc, #120]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d018      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008430 <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008434 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00e      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a17      	ldr	r2, [pc, #92]	@ (8008438 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d004      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0x276>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a15      	ldr	r2, [pc, #84]	@ (800843c <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d10c      	bne.n	8008404 <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40010400 	.word	0x40010400
 8008428:	08009e40 	.word	0x08009e40
 800842c:	40000400 	.word	0x40000400
 8008430:	40000800 	.word	0x40000800
 8008434:	40000c00 	.word	0x40000c00
 8008438:	40001800 	.word	0x40001800
 800843c:	40014000 	.word	0x40014000

08008440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e0ab      	b.n	80085aa <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d032      	beq.n	80084c0 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a55      	ldr	r2, [pc, #340]	@ (80085b4 <HAL_UART_Init+0x174>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d05f      	beq.n	8008524 <HAL_UART_Init+0xe4>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a53      	ldr	r2, [pc, #332]	@ (80085b8 <HAL_UART_Init+0x178>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d05a      	beq.n	8008524 <HAL_UART_Init+0xe4>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a52      	ldr	r2, [pc, #328]	@ (80085bc <HAL_UART_Init+0x17c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d055      	beq.n	8008524 <HAL_UART_Init+0xe4>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a50      	ldr	r2, [pc, #320]	@ (80085c0 <HAL_UART_Init+0x180>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d050      	beq.n	8008524 <HAL_UART_Init+0xe4>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a4f      	ldr	r2, [pc, #316]	@ (80085c4 <HAL_UART_Init+0x184>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d04b      	beq.n	8008524 <HAL_UART_Init+0xe4>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a4d      	ldr	r2, [pc, #308]	@ (80085c8 <HAL_UART_Init+0x188>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d046      	beq.n	8008524 <HAL_UART_Init+0xe4>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a4c      	ldr	r2, [pc, #304]	@ (80085cc <HAL_UART_Init+0x18c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d041      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a4a      	ldr	r2, [pc, #296]	@ (80085d0 <HAL_UART_Init+0x190>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d03c      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a49      	ldr	r2, [pc, #292]	@ (80085d4 <HAL_UART_Init+0x194>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d037      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084b4:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 80084b8:	4847      	ldr	r0, [pc, #284]	@ (80085d8 <HAL_UART_Init+0x198>)
 80084ba:	f7f8 fd05 	bl	8000ec8 <assert_failed>
 80084be:	e031      	b.n	8008524 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a3b      	ldr	r2, [pc, #236]	@ (80085b4 <HAL_UART_Init+0x174>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d02c      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a3a      	ldr	r2, [pc, #232]	@ (80085b8 <HAL_UART_Init+0x178>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d027      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a38      	ldr	r2, [pc, #224]	@ (80085bc <HAL_UART_Init+0x17c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d022      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a37      	ldr	r2, [pc, #220]	@ (80085c0 <HAL_UART_Init+0x180>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d01d      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a35      	ldr	r2, [pc, #212]	@ (80085c4 <HAL_UART_Init+0x184>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d018      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a34      	ldr	r2, [pc, #208]	@ (80085c8 <HAL_UART_Init+0x188>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <HAL_UART_Init+0xe4>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a32      	ldr	r2, [pc, #200]	@ (80085cc <HAL_UART_Init+0x18c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00e      	beq.n	8008524 <HAL_UART_Init+0xe4>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a31      	ldr	r2, [pc, #196]	@ (80085d0 <HAL_UART_Init+0x190>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <HAL_UART_Init+0xe4>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2f      	ldr	r2, [pc, #188]	@ (80085d4 <HAL_UART_Init+0x194>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <HAL_UART_Init+0xe4>
 800851a:	f240 1143 	movw	r1, #323	@ 0x143
 800851e:	482e      	ldr	r0, [pc, #184]	@ (80085d8 <HAL_UART_Init+0x198>)
 8008520:	f7f8 fcd2 	bl	8000ec8 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7f8 fd60 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2224      	movs	r2, #36	@ 0x24
 8008540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_UART_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fe81 	bl	8009264 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f83a 	bl	80085dc <UART_SetConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_UART_Init+0x132>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e01b      	b.n	80085aa <HAL_UART_Init+0x16a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008580:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008590:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0201 	orr.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 ffd2 	bl	800954c <UART_CheckIdleState>
 80085a8:	4603      	mov	r3, r0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	40011000 	.word	0x40011000
 80085b8:	40004400 	.word	0x40004400
 80085bc:	40004800 	.word	0x40004800
 80085c0:	40004c00 	.word	0x40004c00
 80085c4:	40005000 	.word	0x40005000
 80085c8:	40011400 	.word	0x40011400
 80085cc:	40007800 	.word	0x40007800
 80085d0:	40007c00 	.word	0x40007c00
 80085d4:	58000c00 	.word	0x58000c00
 80085d8:	08009e7c 	.word	0x08009e7c

080085dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085e0:	b092      	sub	sp, #72	@ 0x48
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4a17      	ldr	r2, [pc, #92]	@ (8008650 <UART_SetConfig+0x74>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d904      	bls.n	8008600 <UART_SetConfig+0x24>
 80085f6:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80085fa:	4816      	ldr	r0, [pc, #88]	@ (8008654 <UART_SetConfig+0x78>)
 80085fc:	f7f8 fc64 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008608:	d00d      	beq.n	8008626 <UART_SetConfig+0x4a>
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <UART_SetConfig+0x4a>
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800861a:	d004      	beq.n	8008626 <UART_SetConfig+0x4a>
 800861c:	f640 31ca 	movw	r1, #3018	@ 0xbca
 8008620:	480c      	ldr	r0, [pc, #48]	@ (8008654 <UART_SetConfig+0x78>)
 8008622:	f7f8 fc51 	bl	8000ec8 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a0b      	ldr	r2, [pc, #44]	@ (8008658 <UART_SetConfig+0x7c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d115      	bne.n	800865c <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d037      	beq.n	80086a8 <UART_SetConfig+0xcc>
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008640:	d032      	beq.n	80086a8 <UART_SetConfig+0xcc>
 8008642:	f640 31cd 	movw	r1, #3021	@ 0xbcd
 8008646:	4803      	ldr	r0, [pc, #12]	@ (8008654 <UART_SetConfig+0x78>)
 8008648:	f7f8 fc3e 	bl	8000ec8 <assert_failed>
 800864c:	e02c      	b.n	80086a8 <UART_SetConfig+0xcc>
 800864e:	bf00      	nop
 8008650:	00bebc20 	.word	0x00bebc20
 8008654:	08009e7c 	.word	0x08009e7c
 8008658:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008664:	d012      	beq.n	800868c <UART_SetConfig+0xb0>
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <UART_SetConfig+0xb0>
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008676:	d009      	beq.n	800868c <UART_SetConfig+0xb0>
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008680:	d004      	beq.n	800868c <UART_SetConfig+0xb0>
 8008682:	f640 31d1 	movw	r1, #3025	@ 0xbd1
 8008686:	48a5      	ldr	r0, [pc, #660]	@ (800891c <UART_SetConfig+0x340>)
 8008688:	f7f8 fc1e 	bl	8000ec8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <UART_SetConfig+0xcc>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800869c:	d004      	beq.n	80086a8 <UART_SetConfig+0xcc>
 800869e:	f640 31d2 	movw	r1, #3026	@ 0xbd2
 80086a2:	489e      	ldr	r0, [pc, #632]	@ (800891c <UART_SetConfig+0x340>)
 80086a4:	f7f8 fc10 	bl	8000ec8 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <UART_SetConfig+0xf2>
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b8:	d009      	beq.n	80086ce <UART_SetConfig+0xf2>
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086c2:	d004      	beq.n	80086ce <UART_SetConfig+0xf2>
 80086c4:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 80086c8:	4894      	ldr	r0, [pc, #592]	@ (800891c <UART_SetConfig+0x340>)
 80086ca:	f7f8 fbfd 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	f023 030c 	bic.w	r3, r3, #12
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d103      	bne.n	80086e2 <UART_SetConfig+0x106>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d104      	bne.n	80086ec <UART_SetConfig+0x110>
 80086e2:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 80086e6:	488d      	ldr	r0, [pc, #564]	@ (800891c <UART_SetConfig+0x340>)
 80086e8:	f7f8 fbee 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d013      	beq.n	800871c <UART_SetConfig+0x140>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fc:	d00e      	beq.n	800871c <UART_SetConfig+0x140>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008706:	d009      	beq.n	800871c <UART_SetConfig+0x140>
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008710:	d004      	beq.n	800871c <UART_SetConfig+0x140>
 8008712:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 8008716:	4881      	ldr	r0, [pc, #516]	@ (800891c <UART_SetConfig+0x340>)
 8008718:	f7f8 fbd6 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d009      	beq.n	8008738 <UART_SetConfig+0x15c>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800872c:	d004      	beq.n	8008738 <UART_SetConfig+0x15c>
 800872e:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8008732:	487a      	ldr	r0, [pc, #488]	@ (800891c <UART_SetConfig+0x340>)
 8008734:	f7f8 fbc8 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d030      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008744:	2b01      	cmp	r3, #1
 8008746:	d02c      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874c:	2b02      	cmp	r3, #2
 800874e:	d028      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008754:	2b03      	cmp	r3, #3
 8008756:	d024      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875c:	2b04      	cmp	r3, #4
 800875e:	d020      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	2b05      	cmp	r3, #5
 8008766:	d01c      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876c:	2b06      	cmp	r3, #6
 800876e:	d018      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008774:	2b07      	cmp	r3, #7
 8008776:	d014      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877c:	2b08      	cmp	r3, #8
 800877e:	d010      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	2b09      	cmp	r3, #9
 8008786:	d00c      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878c:	2b0a      	cmp	r3, #10
 800878e:	d008      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008794:	2b0b      	cmp	r3, #11
 8008796:	d004      	beq.n	80087a2 <UART_SetConfig+0x1c6>
 8008798:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 800879c:	485f      	ldr	r0, [pc, #380]	@ (800891c <UART_SetConfig+0x340>)
 800879e:	f7f8 fb93 	bl	8000ec8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	431a      	orrs	r2, r3
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	4b57      	ldr	r3, [pc, #348]	@ (8008920 <UART_SetConfig+0x344>)
 80087c2:	4013      	ands	r3, r2
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087ca:	430b      	orrs	r3, r1
 80087cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a4d      	ldr	r2, [pc, #308]	@ (8008924 <UART_SetConfig+0x348>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d004      	beq.n	80087fe <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087fa:	4313      	orrs	r3, r2
 80087fc:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	4b48      	ldr	r3, [pc, #288]	@ (8008928 <UART_SetConfig+0x34c>)
 8008806:	4013      	ands	r3, r2
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800880e:	430b      	orrs	r3, r1
 8008810:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	f023 010f 	bic.w	r1, r3, #15
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a3f      	ldr	r2, [pc, #252]	@ (800892c <UART_SetConfig+0x350>)
 800882e:	4293      	cmp	r3, r2
 8008830:	f040 8084 	bne.w	800893c <UART_SetConfig+0x360>
 8008834:	4b3e      	ldr	r3, [pc, #248]	@ (8008930 <UART_SetConfig+0x354>)
 8008836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800883c:	2b28      	cmp	r3, #40	@ 0x28
 800883e:	d879      	bhi.n	8008934 <UART_SetConfig+0x358>
 8008840:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <UART_SetConfig+0x26c>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	080088ed 	.word	0x080088ed
 800884c:	08008935 	.word	0x08008935
 8008850:	08008935 	.word	0x08008935
 8008854:	08008935 	.word	0x08008935
 8008858:	08008935 	.word	0x08008935
 800885c:	08008935 	.word	0x08008935
 8008860:	08008935 	.word	0x08008935
 8008864:	08008935 	.word	0x08008935
 8008868:	080088f5 	.word	0x080088f5
 800886c:	08008935 	.word	0x08008935
 8008870:	08008935 	.word	0x08008935
 8008874:	08008935 	.word	0x08008935
 8008878:	08008935 	.word	0x08008935
 800887c:	08008935 	.word	0x08008935
 8008880:	08008935 	.word	0x08008935
 8008884:	08008935 	.word	0x08008935
 8008888:	080088fd 	.word	0x080088fd
 800888c:	08008935 	.word	0x08008935
 8008890:	08008935 	.word	0x08008935
 8008894:	08008935 	.word	0x08008935
 8008898:	08008935 	.word	0x08008935
 800889c:	08008935 	.word	0x08008935
 80088a0:	08008935 	.word	0x08008935
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008905 	.word	0x08008905
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	08008935 	.word	0x08008935
 80088c8:	0800890d 	.word	0x0800890d
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008915 	.word	0x08008915
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e22a      	b.n	8008d4a <UART_SetConfig+0x76e>
 80088f4:	2304      	movs	r3, #4
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e226      	b.n	8008d4a <UART_SetConfig+0x76e>
 80088fc:	2308      	movs	r3, #8
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e222      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008904:	2310      	movs	r3, #16
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e21e      	b.n	8008d4a <UART_SetConfig+0x76e>
 800890c:	2320      	movs	r3, #32
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e21a      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008914:	2340      	movs	r3, #64	@ 0x40
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e216      	b.n	8008d4a <UART_SetConfig+0x76e>
 800891c:	08009e7c 	.word	0x08009e7c
 8008920:	cfff69f3 	.word	0xcfff69f3
 8008924:	58000c00 	.word	0x58000c00
 8008928:	11fff4ff 	.word	0x11fff4ff
 800892c:	40011000 	.word	0x40011000
 8008930:	58024400 	.word	0x58024400
 8008934:	2380      	movs	r3, #128	@ 0x80
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e206      	b.n	8008d4a <UART_SetConfig+0x76e>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4ac3      	ldr	r2, [pc, #780]	@ (8008c50 <UART_SetConfig+0x674>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d130      	bne.n	80089a8 <UART_SetConfig+0x3cc>
 8008946:	4bc3      	ldr	r3, [pc, #780]	@ (8008c54 <UART_SetConfig+0x678>)
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b05      	cmp	r3, #5
 8008950:	d826      	bhi.n	80089a0 <UART_SetConfig+0x3c4>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <UART_SetConfig+0x37c>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008971 	.word	0x08008971
 800895c:	08008979 	.word	0x08008979
 8008960:	08008981 	.word	0x08008981
 8008964:	08008989 	.word	0x08008989
 8008968:	08008991 	.word	0x08008991
 800896c:	08008999 	.word	0x08008999
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e1e8      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e1e4      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e1e0      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e1dc      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e1d8      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e1d4      	b.n	8008d4a <UART_SetConfig+0x76e>
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e1d0      	b.n	8008d4a <UART_SetConfig+0x76e>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4aaa      	ldr	r2, [pc, #680]	@ (8008c58 <UART_SetConfig+0x67c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d130      	bne.n	8008a14 <UART_SetConfig+0x438>
 80089b2:	4ba8      	ldr	r3, [pc, #672]	@ (8008c54 <UART_SetConfig+0x678>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d826      	bhi.n	8008a0c <UART_SetConfig+0x430>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x3e8>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089e5 	.word	0x080089e5
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e1b2      	b.n	8008d4a <UART_SetConfig+0x76e>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e1ae      	b.n	8008d4a <UART_SetConfig+0x76e>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e1aa      	b.n	8008d4a <UART_SetConfig+0x76e>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e1a6      	b.n	8008d4a <UART_SetConfig+0x76e>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e1a2      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e19e      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e19a      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a90      	ldr	r2, [pc, #576]	@ (8008c5c <UART_SetConfig+0x680>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x4a4>
 8008a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c54 <UART_SetConfig+0x678>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x49c>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x454>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e17c      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e178      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e174      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e170      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e16c      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e168      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e164      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a76      	ldr	r2, [pc, #472]	@ (8008c60 <UART_SetConfig+0x684>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d130      	bne.n	8008aec <UART_SetConfig+0x510>
 8008a8a:	4b72      	ldr	r3, [pc, #456]	@ (8008c54 <UART_SetConfig+0x678>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d826      	bhi.n	8008ae4 <UART_SetConfig+0x508>
 8008a96:	a201      	add	r2, pc, #4	@ (adr r2, 8008a9c <UART_SetConfig+0x4c0>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ac5 	.word	0x08008ac5
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008add 	.word	0x08008add
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e146      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008abc:	2304      	movs	r3, #4
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e142      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e13e      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e13a      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e136      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008adc:	2340      	movs	r3, #64	@ 0x40
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e132      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008ae4:	2380      	movs	r3, #128	@ 0x80
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e12e      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a5c      	ldr	r2, [pc, #368]	@ (8008c64 <UART_SetConfig+0x688>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d176      	bne.n	8008be4 <UART_SetConfig+0x608>
 8008af6:	4b57      	ldr	r3, [pc, #348]	@ (8008c54 <UART_SetConfig+0x678>)
 8008af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008afe:	2b28      	cmp	r3, #40	@ 0x28
 8008b00:	d86c      	bhi.n	8008bdc <UART_SetConfig+0x600>
 8008b02:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <UART_SetConfig+0x52c>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bdd 	.word	0x08008bdd
 8008b10:	08008bdd 	.word	0x08008bdd
 8008b14:	08008bdd 	.word	0x08008bdd
 8008b18:	08008bdd 	.word	0x08008bdd
 8008b1c:	08008bdd 	.word	0x08008bdd
 8008b20:	08008bdd 	.word	0x08008bdd
 8008b24:	08008bdd 	.word	0x08008bdd
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bdd 	.word	0x08008bdd
 8008b30:	08008bdd 	.word	0x08008bdd
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008bdd 	.word	0x08008bdd
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008bdd 	.word	0x08008bdd
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008bdd 	.word	0x08008bdd
 8008b50:	08008bdd 	.word	0x08008bdd
 8008b54:	08008bdd 	.word	0x08008bdd
 8008b58:	08008bdd 	.word	0x08008bdd
 8008b5c:	08008bdd 	.word	0x08008bdd
 8008b60:	08008bdd 	.word	0x08008bdd
 8008b64:	08008bdd 	.word	0x08008bdd
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bdd 	.word	0x08008bdd
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008bdd 	.word	0x08008bdd
 8008b80:	08008bdd 	.word	0x08008bdd
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bcd 	.word	0x08008bcd
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008bdd 	.word	0x08008bdd
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bdd 	.word	0x08008bdd
 8008ba4:	08008bdd 	.word	0x08008bdd
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e0ca      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e0c6      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e0c2      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e0be      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e0ba      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008bd4:	2340      	movs	r3, #64	@ 0x40
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bda:	e0b6      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008bdc:	2380      	movs	r3, #128	@ 0x80
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e0b2      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a1f      	ldr	r2, [pc, #124]	@ (8008c68 <UART_SetConfig+0x68c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d13e      	bne.n	8008c6c <UART_SetConfig+0x690>
 8008bee:	4b19      	ldr	r3, [pc, #100]	@ (8008c54 <UART_SetConfig+0x678>)
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d826      	bhi.n	8008c48 <UART_SetConfig+0x66c>
 8008bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <UART_SetConfig+0x624>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c29 	.word	0x08008c29
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e094      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c20:	2304      	movs	r3, #4
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e090      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e08c      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c30:	2310      	movs	r3, #16
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e088      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e084      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c40:	2340      	movs	r3, #64	@ 0x40
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e080      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e07c      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008c50:	40004400 	.word	0x40004400
 8008c54:	58024400 	.word	0x58024400
 8008c58:	40004800 	.word	0x40004800
 8008c5c:	40004c00 	.word	0x40004c00
 8008c60:	40005000 	.word	0x40005000
 8008c64:	40011400 	.word	0x40011400
 8008c68:	40007800 	.word	0x40007800
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4aae      	ldr	r2, [pc, #696]	@ (8008f2c <UART_SetConfig+0x950>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d130      	bne.n	8008cd8 <UART_SetConfig+0x6fc>
 8008c76:	4bae      	ldr	r3, [pc, #696]	@ (8008f30 <UART_SetConfig+0x954>)
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	d826      	bhi.n	8008cd0 <UART_SetConfig+0x6f4>
 8008c82:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <UART_SetConfig+0x6ac>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008ca1 	.word	0x08008ca1
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	08008cb1 	.word	0x08008cb1
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008cc1 	.word	0x08008cc1
 8008c9c:	08008cc9 	.word	0x08008cc9
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e050      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e04c      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008cb0:	2308      	movs	r3, #8
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e048      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e044      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e040      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008cc8:	2340      	movs	r3, #64	@ 0x40
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e03c      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008cd0:	2380      	movs	r3, #128	@ 0x80
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e038      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a95      	ldr	r2, [pc, #596]	@ (8008f34 <UART_SetConfig+0x958>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d130      	bne.n	8008d44 <UART_SetConfig+0x768>
 8008ce2:	4b93      	ldr	r3, [pc, #588]	@ (8008f30 <UART_SetConfig+0x954>)
 8008ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d826      	bhi.n	8008d3c <UART_SetConfig+0x760>
 8008cee:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf4 <UART_SetConfig+0x718>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d0d 	.word	0x08008d0d
 8008cf8:	08008d15 	.word	0x08008d15
 8008cfc:	08008d1d 	.word	0x08008d1d
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d2d 	.word	0x08008d2d
 8008d08:	08008d35 	.word	0x08008d35
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e01a      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d14:	2304      	movs	r3, #4
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e016      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d1c:	2308      	movs	r3, #8
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e012      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d24:	2310      	movs	r3, #16
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e00e      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e00a      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d34:	2340      	movs	r3, #64	@ 0x40
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e006      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d3c:	2380      	movs	r3, #128	@ 0x80
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e002      	b.n	8008d4a <UART_SetConfig+0x76e>
 8008d44:	2380      	movs	r3, #128	@ 0x80
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a79      	ldr	r2, [pc, #484]	@ (8008f34 <UART_SetConfig+0x958>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	f040 80f7 	bne.w	8008f44 <UART_SetConfig+0x968>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	dc46      	bgt.n	8008dec <UART_SetConfig+0x810>
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	db75      	blt.n	8008e4e <UART_SetConfig+0x872>
 8008d62:	3b02      	subs	r3, #2
 8008d64:	2b1e      	cmp	r3, #30
 8008d66:	d872      	bhi.n	8008e4e <UART_SetConfig+0x872>
 8008d68:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <UART_SetConfig+0x794>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008df3 	.word	0x08008df3
 8008d74:	08008e4f 	.word	0x08008e4f
 8008d78:	08008dfb 	.word	0x08008dfb
 8008d7c:	08008e4f 	.word	0x08008e4f
 8008d80:	08008e4f 	.word	0x08008e4f
 8008d84:	08008e4f 	.word	0x08008e4f
 8008d88:	08008e0b 	.word	0x08008e0b
 8008d8c:	08008e4f 	.word	0x08008e4f
 8008d90:	08008e4f 	.word	0x08008e4f
 8008d94:	08008e4f 	.word	0x08008e4f
 8008d98:	08008e4f 	.word	0x08008e4f
 8008d9c:	08008e4f 	.word	0x08008e4f
 8008da0:	08008e4f 	.word	0x08008e4f
 8008da4:	08008e4f 	.word	0x08008e4f
 8008da8:	08008e1b 	.word	0x08008e1b
 8008dac:	08008e4f 	.word	0x08008e4f
 8008db0:	08008e4f 	.word	0x08008e4f
 8008db4:	08008e4f 	.word	0x08008e4f
 8008db8:	08008e4f 	.word	0x08008e4f
 8008dbc:	08008e4f 	.word	0x08008e4f
 8008dc0:	08008e4f 	.word	0x08008e4f
 8008dc4:	08008e4f 	.word	0x08008e4f
 8008dc8:	08008e4f 	.word	0x08008e4f
 8008dcc:	08008e4f 	.word	0x08008e4f
 8008dd0:	08008e4f 	.word	0x08008e4f
 8008dd4:	08008e4f 	.word	0x08008e4f
 8008dd8:	08008e4f 	.word	0x08008e4f
 8008ddc:	08008e4f 	.word	0x08008e4f
 8008de0:	08008e4f 	.word	0x08008e4f
 8008de4:	08008e4f 	.word	0x08008e4f
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	2b40      	cmp	r3, #64	@ 0x40
 8008dee:	d02a      	beq.n	8008e46 <UART_SetConfig+0x86a>
 8008df0:	e02d      	b.n	8008e4e <UART_SetConfig+0x872>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008df2:	f7fe f9a1 	bl	8007138 <HAL_RCCEx_GetD3PCLK1Freq>
 8008df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008df8:	e02f      	b.n	8008e5a <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe f9b0 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e08:	e027      	b.n	8008e5a <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0a:	f107 0318 	add.w	r3, r7, #24
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fafc 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e18:	e01f      	b.n	8008e5a <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e1a:	4b45      	ldr	r3, [pc, #276]	@ (8008f30 <UART_SetConfig+0x954>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d009      	beq.n	8008e3a <UART_SetConfig+0x85e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e26:	4b42      	ldr	r3, [pc, #264]	@ (8008f30 <UART_SetConfig+0x954>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	08db      	lsrs	r3, r3, #3
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	4a41      	ldr	r2, [pc, #260]	@ (8008f38 <UART_SetConfig+0x95c>)
 8008e32:	fa22 f303 	lsr.w	r3, r2, r3
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e38:	e00f      	b.n	8008e5a <UART_SetConfig+0x87e>
          pclk = (uint32_t) HSI_VALUE;
 8008e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8008f38 <UART_SetConfig+0x95c>)
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e3e:	e00c      	b.n	8008e5a <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e40:	4b3e      	ldr	r3, [pc, #248]	@ (8008f3c <UART_SetConfig+0x960>)
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e44:	e009      	b.n	8008e5a <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4c:	e005      	b.n	8008e5a <UART_SetConfig+0x87e>
      default:
        pclk = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 81e3 	beq.w	8009228 <UART_SetConfig+0xc4c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e66:	4a36      	ldr	r2, [pc, #216]	@ (8008f40 <UART_SetConfig+0x964>)
 8008e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e74:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4413      	add	r3, r2
 8008e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d305      	bcc.n	8008e92 <UART_SetConfig+0x8b6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d903      	bls.n	8008e9a <UART_SetConfig+0x8be>
      {
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e98:	e1c6      	b.n	8009228 <UART_SetConfig+0xc4c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	60bb      	str	r3, [r7, #8]
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea6:	4a26      	ldr	r2, [pc, #152]	@ (8008f40 <UART_SetConfig+0x964>)
 8008ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2200      	movs	r2, #0
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ebc:	f7f7 fa0c 	bl	80002d8 <__aeabi_uldivmod>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f04f 0200 	mov.w	r2, #0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	020b      	lsls	r3, r1, #8
 8008ed2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ed6:	0202      	lsls	r2, r0, #8
 8008ed8:	6979      	ldr	r1, [r7, #20]
 8008eda:	6849      	ldr	r1, [r1, #4]
 8008edc:	0849      	lsrs	r1, r1, #1
 8008ede:	2000      	movs	r0, #0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	eb12 0804 	adds.w	r8, r2, r4
 8008ee8:	eb43 0905 	adc.w	r9, r3, r5
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	469a      	mov	sl, r3
 8008ef4:	4693      	mov	fp, r2
 8008ef6:	4652      	mov	r2, sl
 8008ef8:	465b      	mov	r3, fp
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 f9eb 	bl	80002d8 <__aeabi_uldivmod>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4613      	mov	r3, r2
 8008f08:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f10:	d308      	bcc.n	8008f24 <UART_SetConfig+0x948>
 8008f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f18:	d204      	bcs.n	8008f24 <UART_SetConfig+0x948>
        {
          huart->Instance->BRR = usartdiv;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	e181      	b.n	8009228 <UART_SetConfig+0xc4c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f2a:	e17d      	b.n	8009228 <UART_SetConfig+0xc4c>
 8008f2c:	40007c00 	.word	0x40007c00
 8008f30:	58024400 	.word	0x58024400
 8008f34:	58000c00 	.word	0x58000c00
 8008f38:	03d09000 	.word	0x03d09000
 8008f3c:	003d0900 	.word	0x003d0900
 8008f40:	08009f04 	.word	0x08009f04
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f4c:	f040 80be 	bne.w	80090cc <UART_SetConfig+0xaf0>
  {
    switch (clocksource)
 8008f50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f54:	2b20      	cmp	r3, #32
 8008f56:	dc49      	bgt.n	8008fec <UART_SetConfig+0xa10>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db7c      	blt.n	8009056 <UART_SetConfig+0xa7a>
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d87a      	bhi.n	8009056 <UART_SetConfig+0xa7a>
 8008f60:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0x98c>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008ff3 	.word	0x08008ff3
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08009057 	.word	0x08009057
 8008f74:	08009057 	.word	0x08009057
 8008f78:	08009003 	.word	0x08009003
 8008f7c:	08009057 	.word	0x08009057
 8008f80:	08009057 	.word	0x08009057
 8008f84:	08009057 	.word	0x08009057
 8008f88:	08009013 	.word	0x08009013
 8008f8c:	08009057 	.word	0x08009057
 8008f90:	08009057 	.word	0x08009057
 8008f94:	08009057 	.word	0x08009057
 8008f98:	08009057 	.word	0x08009057
 8008f9c:	08009057 	.word	0x08009057
 8008fa0:	08009057 	.word	0x08009057
 8008fa4:	08009057 	.word	0x08009057
 8008fa8:	08009023 	.word	0x08009023
 8008fac:	08009057 	.word	0x08009057
 8008fb0:	08009057 	.word	0x08009057
 8008fb4:	08009057 	.word	0x08009057
 8008fb8:	08009057 	.word	0x08009057
 8008fbc:	08009057 	.word	0x08009057
 8008fc0:	08009057 	.word	0x08009057
 8008fc4:	08009057 	.word	0x08009057
 8008fc8:	08009057 	.word	0x08009057
 8008fcc:	08009057 	.word	0x08009057
 8008fd0:	08009057 	.word	0x08009057
 8008fd4:	08009057 	.word	0x08009057
 8008fd8:	08009057 	.word	0x08009057
 8008fdc:	08009057 	.word	0x08009057
 8008fe0:	08009057 	.word	0x08009057
 8008fe4:	08009057 	.word	0x08009057
 8008fe8:	08009049 	.word	0x08009049
 8008fec:	2b40      	cmp	r3, #64	@ 0x40
 8008fee:	d02e      	beq.n	800904e <UART_SetConfig+0xa72>
 8008ff0:	e031      	b.n	8009056 <UART_SetConfig+0xa7a>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff2:	f7fb fdc5 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8008ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ff8:	e033      	b.n	8009062 <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ffa:	f7fb fdd7 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 8008ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009000:	e02f      	b.n	8009062 <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe f8ac 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009010:	e027      	b.n	8009062 <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009012:	f107 0318 	add.w	r3, r7, #24
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe f9f8 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009020:	e01f      	b.n	8009062 <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009022:	4b8c      	ldr	r3, [pc, #560]	@ (8009254 <UART_SetConfig+0xc78>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <UART_SetConfig+0xa66>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800902e:	4b89      	ldr	r3, [pc, #548]	@ (8009254 <UART_SetConfig+0xc78>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	08db      	lsrs	r3, r3, #3
 8009034:	f003 0303 	and.w	r3, r3, #3
 8009038:	4a87      	ldr	r2, [pc, #540]	@ (8009258 <UART_SetConfig+0xc7c>)
 800903a:	fa22 f303 	lsr.w	r3, r2, r3
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009040:	e00f      	b.n	8009062 <UART_SetConfig+0xa86>
          pclk = (uint32_t) HSI_VALUE;
 8009042:	4b85      	ldr	r3, [pc, #532]	@ (8009258 <UART_SetConfig+0xc7c>)
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009046:	e00c      	b.n	8009062 <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009048:	4b84      	ldr	r3, [pc, #528]	@ (800925c <UART_SetConfig+0xc80>)
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800904c:	e009      	b.n	8009062 <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009054:	e005      	b.n	8009062 <UART_SetConfig+0xa86>
      default:
        pclk = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 80df 	beq.w	8009228 <UART_SetConfig+0xc4c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906e:	4a7c      	ldr	r2, [pc, #496]	@ (8009260 <UART_SetConfig+0xc84>)
 8009070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009074:	461a      	mov	r2, r3
 8009076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009078:	fbb3 f3f2 	udiv	r3, r3, r2
 800907c:	005a      	lsls	r2, r3, #1
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	085b      	lsrs	r3, r3, #1
 8009084:	441a      	add	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	fbb2 f3f3 	udiv	r3, r2, r3
 800908e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	2b0f      	cmp	r3, #15
 8009094:	d916      	bls.n	80090c4 <UART_SetConfig+0xae8>
 8009096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800909c:	d212      	bcs.n	80090c4 <UART_SetConfig+0xae8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800909e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f023 030f 	bic.w	r3, r3, #15
 80090a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80090b6:	4313      	orrs	r3, r2
 80090b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	e0b1      	b.n	8009228 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090ca:	e0ad      	b.n	8009228 <UART_SetConfig+0xc4c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	dc49      	bgt.n	8009168 <UART_SetConfig+0xb8c>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	db7c      	blt.n	80091d2 <UART_SetConfig+0xbf6>
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d87a      	bhi.n	80091d2 <UART_SetConfig+0xbf6>
 80090dc:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <UART_SetConfig+0xb08>)
 80090de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	08009177 	.word	0x08009177
 80090ec:	080091d3 	.word	0x080091d3
 80090f0:	080091d3 	.word	0x080091d3
 80090f4:	0800917f 	.word	0x0800917f
 80090f8:	080091d3 	.word	0x080091d3
 80090fc:	080091d3 	.word	0x080091d3
 8009100:	080091d3 	.word	0x080091d3
 8009104:	0800918f 	.word	0x0800918f
 8009108:	080091d3 	.word	0x080091d3
 800910c:	080091d3 	.word	0x080091d3
 8009110:	080091d3 	.word	0x080091d3
 8009114:	080091d3 	.word	0x080091d3
 8009118:	080091d3 	.word	0x080091d3
 800911c:	080091d3 	.word	0x080091d3
 8009120:	080091d3 	.word	0x080091d3
 8009124:	0800919f 	.word	0x0800919f
 8009128:	080091d3 	.word	0x080091d3
 800912c:	080091d3 	.word	0x080091d3
 8009130:	080091d3 	.word	0x080091d3
 8009134:	080091d3 	.word	0x080091d3
 8009138:	080091d3 	.word	0x080091d3
 800913c:	080091d3 	.word	0x080091d3
 8009140:	080091d3 	.word	0x080091d3
 8009144:	080091d3 	.word	0x080091d3
 8009148:	080091d3 	.word	0x080091d3
 800914c:	080091d3 	.word	0x080091d3
 8009150:	080091d3 	.word	0x080091d3
 8009154:	080091d3 	.word	0x080091d3
 8009158:	080091d3 	.word	0x080091d3
 800915c:	080091d3 	.word	0x080091d3
 8009160:	080091d3 	.word	0x080091d3
 8009164:	080091c5 	.word	0x080091c5
 8009168:	2b40      	cmp	r3, #64	@ 0x40
 800916a:	d02e      	beq.n	80091ca <UART_SetConfig+0xbee>
 800916c:	e031      	b.n	80091d2 <UART_SetConfig+0xbf6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800916e:	f7fb fd07 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8009172:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009174:	e033      	b.n	80091de <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009176:	f7fb fd19 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 800917a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800917c:	e02f      	b.n	80091de <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009182:	4618      	mov	r0, r3
 8009184:	f7fd ffee 	bl	8007164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	e027      	b.n	80091de <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918e:	f107 0318 	add.w	r3, r7, #24
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe f93a 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800919c:	e01f      	b.n	80091de <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800919e:	4b2d      	ldr	r3, [pc, #180]	@ (8009254 <UART_SetConfig+0xc78>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d009      	beq.n	80091be <UART_SetConfig+0xbe2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009254 <UART_SetConfig+0xc78>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	08db      	lsrs	r3, r3, #3
 80091b0:	f003 0303 	and.w	r3, r3, #3
 80091b4:	4a28      	ldr	r2, [pc, #160]	@ (8009258 <UART_SetConfig+0xc7c>)
 80091b6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091bc:	e00f      	b.n	80091de <UART_SetConfig+0xc02>
          pclk = (uint32_t) HSI_VALUE;
 80091be:	4b26      	ldr	r3, [pc, #152]	@ (8009258 <UART_SetConfig+0xc7c>)
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c2:	e00c      	b.n	80091de <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091c4:	4b25      	ldr	r3, [pc, #148]	@ (800925c <UART_SetConfig+0xc80>)
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c8:	e009      	b.n	80091de <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d0:	e005      	b.n	80091de <UART_SetConfig+0xc02>
      default:
        pclk = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091dc:	bf00      	nop
    }

    if (pclk != 0U)
 80091de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d021      	beq.n	8009228 <UART_SetConfig+0xc4c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009260 <UART_SetConfig+0xc84>)
 80091ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ee:	461a      	mov	r2, r3
 80091f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	085b      	lsrs	r3, r3, #1
 80091fc:	441a      	add	r2, r3
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	fbb2 f3f3 	udiv	r3, r2, r3
 8009206:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	2b0f      	cmp	r3, #15
 800920c:	d909      	bls.n	8009222 <UART_SetConfig+0xc46>
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009214:	d205      	bcs.n	8009222 <UART_SetConfig+0xc46>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	b29a      	uxth	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60da      	str	r2, [r3, #12]
 8009220:	e002      	b.n	8009228 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2201      	movs	r2, #1
 800922c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2201      	movs	r2, #1
 8009234:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2200      	movs	r2, #0
 800923c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2200      	movs	r2, #0
 8009242:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009244:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009248:	4618      	mov	r0, r3
 800924a:	3748      	adds	r7, #72	@ 0x48
 800924c:	46bd      	mov	sp, r7
 800924e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009252:	bf00      	nop
 8009254:	58024400 	.word	0x58024400
 8009258:	03d09000 	.word	0x03d09000
 800925c:	003d0900 	.word	0x003d0900
 8009260:	08009f04 	.word	0x08009f04

08009264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009270:	2bff      	cmp	r3, #255	@ 0xff
 8009272:	d904      	bls.n	800927e <UART_AdvFeatureConfig+0x1a>
 8009274:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 8009278:	4893      	ldr	r0, [pc, #588]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 800927a:	f7f7 fe25 	bl	8000ec8 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <UART_AdvFeatureConfig+0x42>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800929a:	d004      	beq.n	80092a6 <UART_AdvFeatureConfig+0x42>
 800929c:	f640 41cc 	movw	r1, #3276	@ 0xccc
 80092a0:	4889      	ldr	r0, [pc, #548]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 80092a2:	f7f7 fe11 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d018      	beq.n	80092fa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <UART_AdvFeatureConfig+0x80>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092d8:	d004      	beq.n	80092e4 <UART_AdvFeatureConfig+0x80>
 80092da:	f640 41d3 	movw	r1, #3283	@ 0xcd3
 80092de:	487a      	ldr	r0, [pc, #488]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 80092e0:	f7f7 fdf2 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d018      	beq.n	8009338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <UART_AdvFeatureConfig+0xbe>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009316:	d004      	beq.n	8009322 <UART_AdvFeatureConfig+0xbe>
 8009318:	f640 41da 	movw	r1, #3290	@ 0xcda
 800931c:	486a      	ldr	r0, [pc, #424]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 800931e:	f7f7 fdd3 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b00      	cmp	r3, #0
 8009342:	d018      	beq.n	8009376 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009348:	2b00      	cmp	r3, #0
 800934a:	d009      	beq.n	8009360 <UART_AdvFeatureConfig+0xfc>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009350:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009354:	d004      	beq.n	8009360 <UART_AdvFeatureConfig+0xfc>
 8009356:	f640 41e1 	movw	r1, #3297	@ 0xce1
 800935a:	485b      	ldr	r0, [pc, #364]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 800935c:	f7f7 fdb4 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937a:	f003 0310 	and.w	r3, r3, #16
 800937e:	2b00      	cmp	r3, #0
 8009380:	d018      	beq.n	80093b4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <UART_AdvFeatureConfig+0x13a>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800938e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009392:	d004      	beq.n	800939e <UART_AdvFeatureConfig+0x13a>
 8009394:	f640 41e8 	movw	r1, #3304	@ 0xce8
 8009398:	484b      	ldr	r0, [pc, #300]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 800939a:	f7f7 fd95 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d018      	beq.n	80093f2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d009      	beq.n	80093dc <UART_AdvFeatureConfig+0x178>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093d0:	d004      	beq.n	80093dc <UART_AdvFeatureConfig+0x178>
 80093d2:	f640 41ef 	movw	r1, #3311	@ 0xcef
 80093d6:	483c      	ldr	r0, [pc, #240]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 80093d8:	f7f7 fd76 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 8081 	beq.w	8009502 <UART_AdvFeatureConfig+0x29e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a31      	ldr	r2, [pc, #196]	@ (80094cc <UART_AdvFeatureConfig+0x268>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d027      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a30      	ldr	r2, [pc, #192]	@ (80094d0 <UART_AdvFeatureConfig+0x26c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d022      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a2e      	ldr	r2, [pc, #184]	@ (80094d4 <UART_AdvFeatureConfig+0x270>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01d      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a2d      	ldr	r2, [pc, #180]	@ (80094d8 <UART_AdvFeatureConfig+0x274>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d018      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a2b      	ldr	r2, [pc, #172]	@ (80094dc <UART_AdvFeatureConfig+0x278>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a2a      	ldr	r2, [pc, #168]	@ (80094e0 <UART_AdvFeatureConfig+0x27c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00e      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a28      	ldr	r2, [pc, #160]	@ (80094e4 <UART_AdvFeatureConfig+0x280>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d009      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a27      	ldr	r2, [pc, #156]	@ (80094e8 <UART_AdvFeatureConfig+0x284>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d004      	beq.n	800945a <UART_AdvFeatureConfig+0x1f6>
 8009450:	f640 41f6 	movw	r1, #3318	@ 0xcf6
 8009454:	481c      	ldr	r0, [pc, #112]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 8009456:	f7f7 fd37 	bl	8000ec8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <UART_AdvFeatureConfig+0x212>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800946a:	d004      	beq.n	8009476 <UART_AdvFeatureConfig+0x212>
 800946c:	f640 41f7 	movw	r1, #3319	@ 0xcf7
 8009470:	4815      	ldr	r0, [pc, #84]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 8009472:	f7f7 fd29 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009494:	d135      	bne.n	8009502 <UART_AdvFeatureConfig+0x29e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800949a:	2b00      	cmp	r3, #0
 800949c:	d026      	beq.n	80094ec <UART_AdvFeatureConfig+0x288>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094a6:	d021      	beq.n	80094ec <UART_AdvFeatureConfig+0x288>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094b0:	d01c      	beq.n	80094ec <UART_AdvFeatureConfig+0x288>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80094ba:	d017      	beq.n	80094ec <UART_AdvFeatureConfig+0x288>
 80094bc:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 80094c0:	4801      	ldr	r0, [pc, #4]	@ (80094c8 <UART_AdvFeatureConfig+0x264>)
 80094c2:	f7f7 fd01 	bl	8000ec8 <assert_failed>
 80094c6:	e011      	b.n	80094ec <UART_AdvFeatureConfig+0x288>
 80094c8:	08009e7c 	.word	0x08009e7c
 80094cc:	40011000 	.word	0x40011000
 80094d0:	40004400 	.word	0x40004400
 80094d4:	40004800 	.word	0x40004800
 80094d8:	40004c00 	.word	0x40004c00
 80094dc:	40005000 	.word	0x40005000
 80094e0:	40011400 	.word	0x40011400
 80094e4:	40007800 	.word	0x40007800
 80094e8:	40007c00 	.word	0x40007c00
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800950a:	2b00      	cmp	r3, #0
 800950c:	d018      	beq.n	8009540 <UART_AdvFeatureConfig+0x2dc>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <UART_AdvFeatureConfig+0x2c6>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800951a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800951e:	d004      	beq.n	800952a <UART_AdvFeatureConfig+0x2c6>
 8009520:	f640 5104 	movw	r1, #3332	@ 0xd04
 8009524:	4808      	ldr	r0, [pc, #32]	@ (8009548 <UART_AdvFeatureConfig+0x2e4>)
 8009526:	f7f7 fccf 	bl	8000ec8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	08009e7c 	.word	0x08009e7c

0800954c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b098      	sub	sp, #96	@ 0x60
 8009550:	af02      	add	r7, sp, #8
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800955c:	f7f7 ff34 	bl	80013c8 <HAL_GetTick>
 8009560:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b08      	cmp	r3, #8
 800956e:	d12f      	bne.n	80095d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009570:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009578:	2200      	movs	r2, #0
 800957a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f88e 	bl	80096a0 <UART_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d022      	beq.n	80095d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800959e:	653b      	str	r3, [r7, #80]	@ 0x50
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e6      	bne.n	800958a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2220      	movs	r2, #32
 80095c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e063      	b.n	8009698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d149      	bne.n	8009672 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e6:	2200      	movs	r2, #0
 80095e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f857 	bl	80096a0 <UART_WaitOnFlagUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d03c      	beq.n	8009672 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	623b      	str	r3, [r7, #32]
   return(result);
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800960c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009616:	633b      	str	r3, [r7, #48]	@ 0x30
 8009618:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800961c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	60fb      	str	r3, [r7, #12]
   return(result);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f023 0301 	bic.w	r3, r3, #1
 8009640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3308      	adds	r3, #8
 8009648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800964a:	61fa      	str	r2, [r7, #28]
 800964c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	69b9      	ldr	r1, [r7, #24]
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	617b      	str	r3, [r7, #20]
   return(result);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e5      	bne.n	800962a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e012      	b.n	8009698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3758      	adds	r7, #88	@ 0x58
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	4613      	mov	r3, r2
 80096ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b0:	e04f      	b.n	8009752 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d04b      	beq.n	8009752 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ba:	f7f7 fe85 	bl	80013c8 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d302      	bcc.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e04e      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d037      	beq.n	8009752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2b80      	cmp	r3, #128	@ 0x80
 80096e6:	d034      	beq.n	8009752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b40      	cmp	r3, #64	@ 0x40
 80096ec:	d031      	beq.n	8009752 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	f003 0308 	and.w	r3, r3, #8
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d110      	bne.n	800971e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2208      	movs	r2, #8
 8009702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 f839 	bl	800977c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2208      	movs	r2, #8
 800970e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e029      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800972c:	d111      	bne.n	8009752 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f81f 	bl	800977c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e00f      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69da      	ldr	r2, [r3, #28]
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	4013      	ands	r3, r2
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	429a      	cmp	r2, r3
 8009760:	bf0c      	ite	eq
 8009762:	2301      	moveq	r3, #1
 8009764:	2300      	movne	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	461a      	mov	r2, r3
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	429a      	cmp	r2, r3
 800976e:	d0a0      	beq.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b095      	sub	sp, #84	@ 0x54
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80097a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e6      	bne.n	8009784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3308      	adds	r3, #8
 80097bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009844 <UART_EndRxTransfer+0xc8>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e5      	bne.n	80097b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d118      	bne.n	8009824 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f023 0310 	bic.w	r3, r3, #16
 8009806:	647b      	str	r3, [r7, #68]	@ 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6979      	ldr	r1, [r7, #20]
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	613b      	str	r3, [r7, #16]
   return(result);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009838:	bf00      	nop
 800983a:	3754      	adds	r7, #84	@ 0x54
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	effffffe 	.word	0xeffffffe

08009848 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a2e      	ldr	r2, [pc, #184]	@ (8009910 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d027      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a2d      	ldr	r2, [pc, #180]	@ (8009914 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d022      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a2b      	ldr	r2, [pc, #172]	@ (8009918 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01d      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a2a      	ldr	r2, [pc, #168]	@ (800991c <HAL_UARTEx_DisableFifoMode+0xd4>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d018      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a28      	ldr	r2, [pc, #160]	@ (8009920 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a27      	ldr	r2, [pc, #156]	@ (8009924 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00e      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a25      	ldr	r2, [pc, #148]	@ (8009928 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d009      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a24      	ldr	r2, [pc, #144]	@ (800992c <HAL_UARTEx_DisableFifoMode+0xe4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <HAL_UARTEx_DisableFifoMode+0x62>
 80098a0:	f240 2136 	movw	r1, #566	@ 0x236
 80098a4:	4822      	ldr	r0, [pc, #136]	@ (8009930 <HAL_UARTEx_DisableFifoMode+0xe8>)
 80098a6:	f7f7 fb0f 	bl	8000ec8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d101      	bne.n	80098b8 <HAL_UARTEx_DisableFifoMode+0x70>
 80098b4:	2302      	movs	r3, #2
 80098b6:	e027      	b.n	8009908 <HAL_UARTEx_DisableFifoMode+0xc0>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2224      	movs	r2, #36	@ 0x24
 80098c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0201 	bic.w	r2, r2, #1
 80098de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	40011000 	.word	0x40011000
 8009914:	40004400 	.word	0x40004400
 8009918:	40004800 	.word	0x40004800
 800991c:	40004c00 	.word	0x40004c00
 8009920:	40005000 	.word	0x40005000
 8009924:	40011400 	.word	0x40011400
 8009928:	40007800 	.word	0x40007800
 800992c:	40007c00 	.word	0x40007c00
 8009930:	08009eb8 	.word	0x08009eb8

08009934 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a40      	ldr	r2, [pc, #256]	@ (8009a44 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d027      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a48 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d022      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a3d      	ldr	r2, [pc, #244]	@ (8009a4c <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d01d      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a3b      	ldr	r2, [pc, #236]	@ (8009a50 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d018      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a3a      	ldr	r2, [pc, #232]	@ (8009a54 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d013      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a38      	ldr	r2, [pc, #224]	@ (8009a58 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00e      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a37      	ldr	r2, [pc, #220]	@ (8009a5c <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d009      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a35      	ldr	r2, [pc, #212]	@ (8009a60 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d004      	beq.n	8009998 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800998e:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8009992:	4834      	ldr	r0, [pc, #208]	@ (8009a64 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8009994:	f7f7 fa98 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d018      	beq.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a4:	d014      	beq.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ac:	d010      	beq.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099b4:	d00c      	beq.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099bc:	d008      	beq.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 80099c4:	d004      	beq.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099c6:	f240 2165 	movw	r1, #613	@ 0x265
 80099ca:	4826      	ldr	r0, [pc, #152]	@ (8009a64 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 80099cc:	f7f7 fa7c 	bl	8000ec8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d101      	bne.n	80099de <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 80099da:	2302      	movs	r3, #2
 80099dc:	e02d      	b.n	8009a3a <HAL_UARTEx_SetTxFifoThreshold+0x106>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2224      	movs	r2, #36	@ 0x24
 80099ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0201 	bic.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f8be 	bl	8009b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40011000 	.word	0x40011000
 8009a48:	40004400 	.word	0x40004400
 8009a4c:	40004800 	.word	0x40004800
 8009a50:	40004c00 	.word	0x40004c00
 8009a54:	40005000 	.word	0x40005000
 8009a58:	40011400 	.word	0x40011400
 8009a5c:	40007800 	.word	0x40007800
 8009a60:	40007c00 	.word	0x40007c00
 8009a64:	08009eb8 	.word	0x08009eb8

08009a68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a40      	ldr	r2, [pc, #256]	@ (8009b78 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d027      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a3e      	ldr	r2, [pc, #248]	@ (8009b7c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d022      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b80 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d01d      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a3b      	ldr	r2, [pc, #236]	@ (8009b84 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d018      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a3a      	ldr	r2, [pc, #232]	@ (8009b88 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d013      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a38      	ldr	r2, [pc, #224]	@ (8009b8c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d00e      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a37      	ldr	r2, [pc, #220]	@ (8009b90 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d009      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a35      	ldr	r2, [pc, #212]	@ (8009b94 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d004      	beq.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009ac2:	f240 2195 	movw	r1, #661	@ 0x295
 8009ac6:	4834      	ldr	r0, [pc, #208]	@ (8009b98 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8009ac8:	f7f7 f9fe 	bl	8000ec8 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d018      	beq.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ad8:	d014      	beq.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ae0:	d010      	beq.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8009ae8:	d00c      	beq.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009af0:	d008      	beq.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8009af8:	d004      	beq.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009afa:	f240 2196 	movw	r1, #662	@ 0x296
 8009afe:	4826      	ldr	r0, [pc, #152]	@ (8009b98 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8009b00:	f7f7 f9e2 	bl	8000ec8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d101      	bne.n	8009b12 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 8009b0e:	2302      	movs	r3, #2
 8009b10:	e02d      	b.n	8009b6e <HAL_UARTEx_SetRxFifoThreshold+0x106>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2224      	movs	r2, #36	@ 0x24
 8009b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0201 	bic.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f824 	bl	8009b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40011000 	.word	0x40011000
 8009b7c:	40004400 	.word	0x40004400
 8009b80:	40004800 	.word	0x40004800
 8009b84:	40004c00 	.word	0x40004c00
 8009b88:	40005000 	.word	0x40005000
 8009b8c:	40011400 	.word	0x40011400
 8009b90:	40007800 	.word	0x40007800
 8009b94:	40007c00 	.word	0x40007c00
 8009b98:	08009eb8 	.word	0x08009eb8

08009b9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d108      	bne.n	8009bbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bbc:	e031      	b.n	8009c22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bbe:	2310      	movs	r3, #16
 8009bc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bc2:	2310      	movs	r3, #16
 8009bc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	0e5b      	lsrs	r3, r3, #25
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	0f5b      	lsrs	r3, r3, #29
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	f003 0307 	and.w	r3, r3, #7
 8009be4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	7b3a      	ldrb	r2, [r7, #12]
 8009bea:	4911      	ldr	r1, [pc, #68]	@ (8009c30 <UARTEx_SetNbDataToProcess+0x94>)
 8009bec:	5c8a      	ldrb	r2, [r1, r2]
 8009bee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bf2:	7b3a      	ldrb	r2, [r7, #12]
 8009bf4:	490f      	ldr	r1, [pc, #60]	@ (8009c34 <UARTEx_SetNbDataToProcess+0x98>)
 8009bf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	7b7a      	ldrb	r2, [r7, #13]
 8009c08:	4909      	ldr	r1, [pc, #36]	@ (8009c30 <UARTEx_SetNbDataToProcess+0x94>)
 8009c0a:	5c8a      	ldrb	r2, [r1, r2]
 8009c0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c10:	7b7a      	ldrb	r2, [r7, #13]
 8009c12:	4908      	ldr	r1, [pc, #32]	@ (8009c34 <UARTEx_SetNbDataToProcess+0x98>)
 8009c14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c22:	bf00      	nop
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	08009f1c 	.word	0x08009f1c
 8009c34:	08009f24 	.word	0x08009f24

08009c38 <memset>:
 8009c38:	4402      	add	r2, r0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d100      	bne.n	8009c42 <memset+0xa>
 8009c40:	4770      	bx	lr
 8009c42:	f803 1b01 	strb.w	r1, [r3], #1
 8009c46:	e7f9      	b.n	8009c3c <memset+0x4>

08009c48 <__libc_init_array>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c80 <__libc_init_array+0x38>)
 8009c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c84 <__libc_init_array+0x3c>)
 8009c4e:	1b64      	subs	r4, r4, r5
 8009c50:	10a4      	asrs	r4, r4, #2
 8009c52:	2600      	movs	r6, #0
 8009c54:	42a6      	cmp	r6, r4
 8009c56:	d109      	bne.n	8009c6c <__libc_init_array+0x24>
 8009c58:	4d0b      	ldr	r5, [pc, #44]	@ (8009c88 <__libc_init_array+0x40>)
 8009c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c8c <__libc_init_array+0x44>)
 8009c5c:	f000 f818 	bl	8009c90 <_init>
 8009c60:	1b64      	subs	r4, r4, r5
 8009c62:	10a4      	asrs	r4, r4, #2
 8009c64:	2600      	movs	r6, #0
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	d105      	bne.n	8009c76 <__libc_init_array+0x2e>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c70:	4798      	blx	r3
 8009c72:	3601      	adds	r6, #1
 8009c74:	e7ee      	b.n	8009c54 <__libc_init_array+0xc>
 8009c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7a:	4798      	blx	r3
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	e7f2      	b.n	8009c66 <__libc_init_array+0x1e>
 8009c80:	08009f34 	.word	0x08009f34
 8009c84:	08009f34 	.word	0x08009f34
 8009c88:	08009f34 	.word	0x08009f34
 8009c8c:	08009f38 	.word	0x08009f38

08009c90 <_init>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	bf00      	nop
 8009c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c96:	bc08      	pop	{r3}
 8009c98:	469e      	mov	lr, r3
 8009c9a:	4770      	bx	lr

08009c9c <_fini>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr
